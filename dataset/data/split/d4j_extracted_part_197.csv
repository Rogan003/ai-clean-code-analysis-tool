code_snippet,type,score
"                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        ProductEntry product = (ProductEntry) v.getTag(R.id.tag_product_entry);
                        // TODO: show product details
                    }
                }",method,
"                    @Override
                    public void onClick(View v) {
                        ProductEntry product = (ProductEntry) v.getTag(R.id.tag_product_entry);
                        // TODO: show product details
                    }",method,
"        void bind(ProductEntry product, ImageRequester imageRequester) {
            itemView.setTag(R.id.tag_product_entry, product);
            imageRequester.setImageFromUrl(imageView, product.url);
            priceView.setText(product.price);
        }",method,
"    public ProductEntry(String title, String url, String price, String description) {
        this.title = title;
        this.url = url;
        this.price = price;
        this.description = description;
    }",method,
"public class ParameterSignatureTest {
    @DataPoint
    public static Method getType() throws SecurityException,
            NoSuchMethodException {
        return ParameterSignatureTest.class.getMethod(""getType"", Method.class,
                int.class);
    }
    @DataPoint
    public static int ZERO = 0;
    @DataPoint
    public static int ONE = 1;
    @Theory
    public void getType(Method method, int index) {
        assumeTrue(index < method.getParameterTypes().length);
        assertEquals(method.getParameterTypes()[index], ParameterSignature
                .signatures(method).get(index).getType());
    }
    public void foo(@TestedOn(ints = {1, 2, 3}) int x) {
    }
    @Test
    public void getAnnotations() throws SecurityException,
            NoSuchMethodException {
        Method method = getClass().getMethod(""foo"", int.class);
        List<Annotation> annotations = ParameterSignature.signatures(method)
                .get(0).getAnnotations();
        assertThat(annotations,
                CoreMatchers.<TestedOn>hasItem(isA(TestedOn.class)));
    }
    public void intMethod(int param) {
    }
    public void integerMethod(Integer param) {
    }
    public void numberMethod(Number param) {
    }
    @Test
    public void primitiveTypesShouldBeAcceptedAsWrapperTypes() throws Exception {
        List<ParameterSignature> signatures = ParameterSignature
                .signatures(getClass().getMethod(""integerMethod"", Integer.class));
        ParameterSignature integerSignature = signatures.get(0);
        assertTrue(integerSignature.canAcceptType(int.class));
    }
    @Test
    public void primitiveTypesShouldBeAcceptedAsWrapperTypeAssignables() throws Exception {
        List<ParameterSignature> signatures = ParameterSignature
                .signatures(getClass().getMethod(""numberMethod"", Number.class));
        ParameterSignature numberSignature = signatures.get(0);
        assertTrue(numberSignature.canAcceptType(int.class));
    }
    @Test
    public void wrapperTypesShouldBeAcceptedAsPrimitiveTypes() throws Exception {
        List<ParameterSignature> signatures = ParameterSignature
                .signatures(getClass().getMethod(""intMethod"", int.class));
        ParameterSignature intSignature = signatures.get(0);
        assertTrue(intSignature.canAcceptType(Integer.class));
    }
}",class,
"    @DataPoint
    public static Method getType() throws SecurityException,
            NoSuchMethodException {
        return ParameterSignatureTest.class.getMethod(""getType"", Method.class,
                int.class);
    }",method,
"    @Theory
    public void getType(Method method, int index) {
        assumeTrue(index < method.getParameterTypes().length);
        assertEquals(method.getParameterTypes()[index], ParameterSignature
                .signatures(method).get(index).getType());
    }",method,
"    @Test
    public void getAnnotations() throws SecurityException,
            NoSuchMethodException {
        Method method = getClass().getMethod(""foo"", int.class);
        List<Annotation> annotations = ParameterSignature.signatures(method)
                .get(0).getAnnotations();
        assertThat(annotations,
                CoreMatchers.<TestedOn>hasItem(isA(TestedOn.class)));
    }",method,
"    public void intMethod(int param) {
    }",method,
"    public void integerMethod(Integer param) {
    }",method,
"    public void numberMethod(Number param) {
    }",method,
"    @Test
    public void primitiveTypesShouldBeAcceptedAsWrapperTypes() throws Exception {
        List<ParameterSignature> signatures = ParameterSignature
                .signatures(getClass().getMethod(""integerMethod"", Integer.class));
        ParameterSignature integerSignature = signatures.get(0);
        assertTrue(integerSignature.canAcceptType(int.class));
    }",method,
"    @Test
    public void primitiveTypesShouldBeAcceptedAsWrapperTypeAssignables() throws Exception {
        List<ParameterSignature> signatures = ParameterSignature
                .signatures(getClass().getMethod(""numberMethod"", Number.class));
        ParameterSignature numberSignature = signatures.get(0);
        assertTrue(numberSignature.canAcceptType(int.class));
    }",method,
"    @Test
    public void wrapperTypesShouldBeAcceptedAsPrimitiveTypes() throws Exception {
        List<ParameterSignature> signatures = ParameterSignature
                .signatures(getClass().getMethod(""intMethod"", int.class));
        ParameterSignature intSignature = signatures.get(0);
        assertTrue(intSignature.canAcceptType(Integer.class));
    }",method,
"public final class JavaRuntimeSuiteRule implements RuleDefinition {
  @Override
  public RuleClass build(Builder builder, RuleDefinitionEnvironment env) {
    return builder
        .add(attr(""runtimes"", BuildType.LABEL_DICT_UNARY).allowedFileTypes(FileTypeSet.NO_FILE))
        .add(
            attr(""default"", BuildType.LABEL)
                .mandatoryProviders(JavaRuntimeInfo.PROVIDER.id())
                .allowedFileTypes(FileTypeSet.NO_FILE))
        .add(attr(""output_licenses"", LICENSE))
        .build();
  }
  @Override
  public Metadata getMetadata() {
    return RuleDefinition.Metadata.builder()
        .name(""java_runtime_suite"")
        .ancestors(BaseRuleClasses.BaseRule.class)
        .factoryClass(JavaRuntimeSuite.class)
        .build();
  }
}",class,
"  @Override
  public RuleClass build(Builder builder, RuleDefinitionEnvironment env) {
    return builder
        .add(attr(""runtimes"", BuildType.LABEL_DICT_UNARY).allowedFileTypes(FileTypeSet.NO_FILE))
        .add(
            attr(""default"", BuildType.LABEL)
                .mandatoryProviders(JavaRuntimeInfo.PROVIDER.id())
                .allowedFileTypes(FileTypeSet.NO_FILE))
        .add(attr(""output_licenses"", LICENSE))
        .build();
  }",method,
"  @Override
  public Metadata getMetadata() {
    return RuleDefinition.Metadata.builder()
        .name(""java_runtime_suite"")
        .ancestors(BaseRuleClasses.BaseRule.class)
        .factoryClass(JavaRuntimeSuite.class)
        .build();
  }",method,
"final class LazyBinding<T> extends Binding<Lazy<T>> {
  final static Object NOT_PRESENT = new Object();
  private final String lazyKey;
  private final ClassLoader loader;
  Binding<T> delegate;
  LazyBinding(String key, Object requiredBy, ClassLoader loader, String lazyKey) {
    super(key, null, false, requiredBy);
    this.loader = loader;
    this.lazyKey = lazyKey;
  }
  @SuppressWarnings(""unchecked"") // At runtime we know it's a Binding<Lazy<T>>.
  @Override
  public void attach(Linker linker) {
    delegate = (Binding<T>) linker.requestBinding(lazyKey, requiredBy, loader);
  }
  @Override public void injectMembers(Lazy<T> t) {
    throw new UnsupportedOperationException(); // Injecting into a custom Lazy not supported.
  }
  @Override
  public Lazy<T> get() {
    return new Lazy<T>() {
      private volatile Object cacheValue = NOT_PRESENT;
      @SuppressWarnings(""unchecked"") // Delegate is of type T
      @Override
      public T get() {
        if (cacheValue == NOT_PRESENT) {
          synchronized (this) {
            if (cacheValue == NOT_PRESENT) {
              cacheValue = delegate.get();
            }
          }
        }
        return (T) cacheValue;
      }
    };
  }
  // public void getDependencies() not overridden.
  // We don't add 'delegate' because it isn't actually used by get() or injectMembers().
}",class,
"  LazyBinding(String key, Object requiredBy, ClassLoader loader, String lazyKey) {
    super(key, null, false, requiredBy);
    this.loader = loader;
    this.lazyKey = lazyKey;
  }",method,
"  @SuppressWarnings(""unchecked"") // At runtime we know it's a Binding<Lazy<T>>.
  @Override
  public void attach(Linker linker) {
    delegate = (Binding<T>) linker.requestBinding(lazyKey, requiredBy, loader);
  }",method,
"  @Override
  public Lazy<T> get() {
    return new Lazy<T>() {
      private volatile Object cacheValue = NOT_PRESENT;
      @SuppressWarnings(""unchecked"") // Delegate is of type T
      @Override
      public T get() {
        if (cacheValue == NOT_PRESENT) {
          synchronized (this) {
            if (cacheValue == NOT_PRESENT) {
              cacheValue = delegate.get();
            }
          }
        }
        return (T) cacheValue;
      }
    };
  }",method,
"      @SuppressWarnings(""unchecked"") // Delegate is of type T
      @Override
      public T get() {
        if (cacheValue == NOT_PRESENT) {
          synchronized (this) {
            if (cacheValue == NOT_PRESENT) {
              cacheValue = delegate.get();
            }
          }
        }
        return (T) cacheValue;
      }",method,
"        if (cacheValue == NOT_PRESENT) {
          synchronized (this) {
            if (cacheValue == NOT_PRESENT) {
              cacheValue = delegate.get();
            }
          }
        }",method,
"          synchronized (this) {
            if (cacheValue == NOT_PRESENT) {
              cacheValue = delegate.get();
            }
          }",method,
"            if (cacheValue == NOT_PRESENT) {
              cacheValue = delegate.get();
            }",method,
"public class Logs2SolrRDDProcessor implements SparkApp.RDDProcessor {
  public static Logger log = Logger.getLogger(Logs2SolrRDDProcessor.class);
  public String getName() { return ""logs2solr""; }
  public Option[] getOptions() {
    return new Option[]{
      OptionBuilder
        .withArgName(""PATH"")
        .hasArg()
        .isRequired(false)
        .withDescription(""HDFS path identifying the directories / files to index"")
        .create(""hdfsPath"")
    };
  }
  public int run(SparkConf conf, CommandLine cli) throws Exception {
    JavaSparkContext jsc = new JavaSparkContext(conf);
    final String zkHost = cli.getOptionValue(""zkHost"", ""localhost:9983"");
    final String collection = cli.getOptionValue(""collection"", ""collection1"");
    final int batchSize = Integer.parseInt(cli.getOptionValue(""batchSize"", ""1000""));
    jsc.binaryFiles(cli.getOptionValue(""hdfsPath"")).foreach(
      new VoidFunction<Tuple2<String, PortableDataStream>>() {
        public void call(Tuple2<String, PortableDataStream> t2) throws Exception {
          final SolrClient solrServer = SolrSupport.getCachedCloudClient(zkHost);
          List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(batchSize);
          String path = t2._1();
          BufferedReader br = null;
          String line = null;
          int lineNum = 0;
          try {
            br = new BufferedReader(new InputStreamReader(openPortableDataStream(t2._2()), ""UTF-8""));
            while ((line = br.readLine()) != null) {
              ++lineNum;
              SolrInputDocument doc = new SolrInputDocument();
              doc.setField(""id"", path + "":"" + lineNum);
              doc.setField(""path_s"", path);
              doc.setField(""line_t"", line);
              batch.add(doc);
              if (batch.size() >= batchSize)
                SolrSupport.sendBatchToSolr(solrServer, collection, JavaConversions.collectionAsScalaIterable(batch));
              if (lineNum % 10000 == 0)
                log.info(""Sent ""+lineNum+"" docs to Solr from ""+path);
            }
            if (!batch.isEmpty())
              SolrSupport.sendBatchToSolr(solrServer, collection, JavaConversions.collectionAsScalaIterable(batch));
          } catch (Exception exc) {
            log.error(""Failed to read '"" + path + ""' due to: "" + exc);
          } finally {
            if (br != null) {
              try {
                br.close();
              } catch (Exception ignore) {}
            }
          }
        }
        InputStream openPortableDataStream(PortableDataStream pds) throws Exception {
          InputStream in = null;
          String path = pds.getPath();
          log.info(""Opening InputStream to "" + path);
          if (path.endsWith("".zip"")) {
            ZipInputStream zipIn = new ZipInputStream(pds.open());
            zipIn.getNextEntry();
            in = zipIn;
          } else if (path.endsWith("".bz2"")) {
            in = new BZip2CompressorInputStream(pds.open());
          } else if (path.endsWith("".gz"")) {
            in = new GzipCompressorInputStream(pds.open());
          }
          return in;
      }
    });
    return 0;
  }
}",class,
"  public String getName() { return ""logs2solr""; }",method,
"  public Option[] getOptions() {
    return new Option[]{
      OptionBuilder
        .withArgName(""PATH"")
        .hasArg()
        .isRequired(false)
        .withDescription(""HDFS path identifying the directories / files to index"")
        .create(""hdfsPath"")
    };
  }",method,
"  public int run(SparkConf conf, CommandLine cli) throws Exception {
    JavaSparkContext jsc = new JavaSparkContext(conf);
    final String zkHost = cli.getOptionValue(""zkHost"", ""localhost:9983"");
    final String collection = cli.getOptionValue(""collection"", ""collection1"");
    final int batchSize = Integer.parseInt(cli.getOptionValue(""batchSize"", ""1000""));
    jsc.binaryFiles(cli.getOptionValue(""hdfsPath"")).foreach(
      new VoidFunction<Tuple2<String, PortableDataStream>>() {
        public void call(Tuple2<String, PortableDataStream> t2) throws Exception {
          final SolrClient solrServer = SolrSupport.getCachedCloudClient(zkHost);
          List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(batchSize);
          String path = t2._1();
          BufferedReader br = null;
          String line = null;
          int lineNum = 0;
          try {
            br = new BufferedReader(new InputStreamReader(openPortableDataStream(t2._2()), ""UTF-8""));
            while ((line = br.readLine()) != null) {
              ++lineNum;
              SolrInputDocument doc = new SolrInputDocument();
              doc.setField(""id"", path + "":"" + lineNum);
              doc.setField(""path_s"", path);
              doc.setField(""line_t"", line);
              batch.add(doc);
              if (batch.size() >= batchSize)
                SolrSupport.sendBatchToSolr(solrServer, collection, JavaConversions.collectionAsScalaIterable(batch));
              if (lineNum % 10000 == 0)
                log.info(""Sent ""+lineNum+"" docs to Solr from ""+path);
            }
            if (!batch.isEmpty())
              SolrSupport.sendBatchToSolr(solrServer, collection, JavaConversions.collectionAsScalaIterable(batch));
          } catch (Exception exc) {
            log.error(""Failed to read '"" + path + ""' due to: "" + exc);
          } finally {
            if (br != null) {
              try {
                br.close();
              } catch (Exception ignore) {}
            }
          }
        }
        InputStream openPortableDataStream(PortableDataStream pds) throws Exception {
          InputStream in = null;
          String path = pds.getPath();
          log.info(""Opening InputStream to "" + path);
          if (path.endsWith("".zip"")) {
            ZipInputStream zipIn = new ZipInputStream(pds.open());
            zipIn.getNextEntry();
            in = zipIn;
          } else if (path.endsWith("".bz2"")) {
            in = new BZip2CompressorInputStream(pds.open());
          } else if (path.endsWith("".gz"")) {
            in = new GzipCompressorInputStream(pds.open());
          }
          return in;
      }
    });
    return 0;
  }",method,
"        public void call(Tuple2<String, PortableDataStream> t2) throws Exception {
          final SolrClient solrServer = SolrSupport.getCachedCloudClient(zkHost);
          List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(batchSize);
          String path = t2._1();
          BufferedReader br = null;
          String line = null;
          int lineNum = 0;
          try {
            br = new BufferedReader(new InputStreamReader(openPortableDataStream(t2._2()), ""UTF-8""));
            while ((line = br.readLine()) != null) {
              ++lineNum;
              SolrInputDocument doc = new SolrInputDocument();
              doc.setField(""id"", path + "":"" + lineNum);
              doc.setField(""path_s"", path);
              doc.setField(""line_t"", line);
              batch.add(doc);
              if (batch.size() >= batchSize)
                SolrSupport.sendBatchToSolr(solrServer, collection, JavaConversions.collectionAsScalaIterable(batch));
              if (lineNum % 10000 == 0)
                log.info(""Sent ""+lineNum+"" docs to Solr from ""+path);
            }
            if (!batch.isEmpty())
              SolrSupport.sendBatchToSolr(solrServer, collection, JavaConversions.collectionAsScalaIterable(batch));
          } catch (Exception exc) {
            log.error(""Failed to read '"" + path + ""' due to: "" + exc);
          } finally {
            if (br != null) {
              try {
                br.close();
              } catch (Exception ignore) {}
            }
          }
        }",method,
"            if (br != null) {
              try {
                br.close();
              } catch (Exception ignore) {}
            }",method,
"        InputStream openPortableDataStream(PortableDataStream pds) throws Exception {
          InputStream in = null;
          String path = pds.getPath();
          log.info(""Opening InputStream to "" + path);
          if (path.endsWith("".zip"")) {
            ZipInputStream zipIn = new ZipInputStream(pds.open());
            zipIn.getNextEntry();
            in = zipIn;
          } else if (path.endsWith("".bz2"")) {
            in = new BZip2CompressorInputStream(pds.open());
          } else if (path.endsWith("".gz"")) {
            in = new GzipCompressorInputStream(pds.open());
          }
          return in;
      }",method,
"    @Override
    public void onCreate(Bundle savedInstanceState) {
        setTheme(SampleList.THEME); //Used for theme switching in samples
        super.onCreate(savedInstanceState);
        setContentView(R.layout.text);
        ((TextView)findViewById(R.id.text)).setText(R.string.share_action_providers_content);
        copyPrivateRawResourceToPubliclyAccessibleFile();
    }",method,
"    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate your menu.
        getSupportMenuInflater().inflate(R.menu.share_action_provider, menu);
        // Set file with share history to the provider and set the share intent.
        MenuItem actionItem = menu.findItem(R.id.menu_item_share_action_provider_action_bar);
        ShareActionProvider actionProvider = (ShareActionProvider) actionItem.getActionProvider();
        actionProvider.setShareHistoryFileName(ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME);
        // Note that you can set/change the intent any time,
        // say when the user has selected an image.
        actionProvider.setShareIntent(createShareIntent());
        //XXX: For now, ShareActionProviders must be displayed on the action bar
        // Set file with share history to the provider and set the share intent.
        //MenuItem overflowItem = menu.findItem(R.id.menu_item_share_action_provider_overflow);
        //ShareActionProvider overflowProvider =
        //    (ShareActionProvider) overflowItem.getActionProvider();
        //overflowProvider.setShareHistoryFileName(
        //    ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME);
        // Note that you can set/change the intent any time,
        // say when the user has selected an image.
        //overflowProvider.setShareIntent(createShareIntent());
        return true;
    }",method,
"    private Intent createShareIntent() {
        Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType(""image
    private void copyPrivateRawResourceToPubliclyAccessibleFile() {
        InputStream inputStream = null;
        FileOutputStream outputStream = null;
        try {
            inputStream = getResources().openRawResource(R.raw.robot);
            outputStream = openFileOutput(SHARED_FILE_NAME,
                    Context.MODE_WORLD_READABLE | Context.MODE_APPEND);
            byte[] buffer = new byte[1024];
            int length = 0;
            try {
                while ((length = inputStream.read(buffer)) > 0){
                    outputStream.write(buffer, 0, length);
                }
            } catch (IOException ioe) {
            }
        } catch (FileNotFoundException fnfe) {
        } finally {
            try {
                inputStream.close();
            } catch (IOException ioe) {
            }
            try {
                outputStream.close();
            } catch (IOException ioe) {
            }
        }
    }
}",method,
"        shareIntent.setType(""image
    private void copyPrivateRawResourceToPubliclyAccessibleFile() {
        InputStream inputStream = null;
        FileOutputStream outputStream = null;
        try {
            inputStream = getResources().openRawResource(R.raw.robot);
            outputStream = openFileOutput(SHARED_FILE_NAME,
                    Context.MODE_WORLD_READABLE | Context.MODE_APPEND);
            byte[] buffer = new byte[1024];
            int length = 0;
            try {
                while ((length = inputStream.read(buffer)) > 0){
                    outputStream.write(buffer, 0, length);
                }
            } catch (IOException ioe) {
            }
        } catch (FileNotFoundException fnfe) {
        } finally {
            try {
                inputStream.close();
            } catch (IOException ioe) {
            }
            try {
                outputStream.close();
            } catch (IOException ioe) {
            }
        }
    }",method,
"public class FontStyleManager extends IdentifierManager {
    protected static final StringMap values = new StringMap();
    static {
        values.put(CSSConstants.CSS_ALL_VALUE,
                   ValueConstants.ALL_VALUE);
        values.put(CSSConstants.CSS_ITALIC_VALUE,
                   ValueConstants.ITALIC_VALUE);
        values.put(CSSConstants.CSS_NORMAL_VALUE,
                   ValueConstants.NORMAL_VALUE);
        values.put(CSSConstants.CSS_OBLIQUE_VALUE,
                   ValueConstants.OBLIQUE_VALUE);
    }
    public boolean isInheritedProperty() {
        return true;
    }
    public boolean isAnimatableProperty() {
        return true;
    }
    public boolean isAdditiveProperty() {
        return false;
    }
    public int getPropertyType() {
        return SVGTypes.TYPE_IDENT;
    }
    public String getPropertyName() {
        return CSSConstants.CSS_FONT_STYLE_PROPERTY;
    }
    public Value getDefaultValue() {
        return ValueConstants.NORMAL_VALUE;
    }
    public StringMap getIdentifiers() {
        return values;
    }
}",class,
"    public boolean isInheritedProperty() {
        return true;
    }",method,
"    public boolean isAnimatableProperty() {
        return true;
    }",method,
"    public boolean isAdditiveProperty() {
        return false;
    }",method,
"    public int getPropertyType() {
        return SVGTypes.TYPE_IDENT;
    }",method,
"    public String getPropertyName() {
        return CSSConstants.CSS_FONT_STYLE_PROPERTY;
    }",method,
"    public Value getDefaultValue() {
        return ValueConstants.NORMAL_VALUE;
    }",method,
"    public StringMap getIdentifiers() {
        return values;
    }",method,
"public class PluginManagerTest extends SysuiTestCase {
    private PluginInstanceManagerFactory mMockFactory;
    private PluginInstanceManager mMockPluginInstance;
    private PluginManagerImpl mPluginManager;
    private PluginListener mMockListener;
    private UncaughtExceptionHandler mRealExceptionHandler;
    private UncaughtExceptionHandler mMockExceptionHandler;
    private UncaughtExceptionHandler mPluginExceptionHandler;
    @Before
    public void setup() throws Exception {
        mDependency.injectTestDependency(Dependency.BG_LOOPER,
                TestableLooper.get(this).getLooper());
        mRealExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
        mMockExceptionHandler = mock(UncaughtExceptionHandler.class);
        mMockFactory = mock(PluginInstanceManagerFactory.class);
        mMockPluginInstance = mock(PluginInstanceManager.class);
        when(mMockFactory.createPluginInstanceManager(Mockito.any(), Mockito.any(), Mockito.any(),
                Mockito.anyBoolean(), Mockito.any(), Mockito.any(), Mockito.any()))
                .thenReturn(mMockPluginInstance);
        mPluginManager = new PluginManagerImpl(getContext(), mMockFactory, true,
                mMockExceptionHandler);
        resetExceptionHandler();
        mMockListener = mock(PluginListener.class);
    }
    @RunWithLooper(setAsMainLooper = true)
    @Test
    public void testOneShot() {
        Plugin mockPlugin = mock(Plugin.class);
        when(mMockPluginInstance.getPlugin()).thenReturn(new PluginInfo(null, null, mockPlugin,
                null, null));
        Plugin result = mPluginManager.getOneShotPlugin(""myAction"", TestPlugin.class);
        assertTrue(result == mockPlugin);
    }
    @Test
    public void testAddListener() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        verify(mMockPluginInstance).loadAll();
    }
    @Test
    public void testRemoveListener() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        mPluginManager.removePluginListener(mMockListener);
        verify(mMockPluginInstance).destroy();
    }
    @Test
    public void testNonDebuggable() {
        mPluginManager = new PluginManagerImpl(getContext(), mMockFactory, false,
                mMockExceptionHandler);
        resetExceptionHandler();
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        verify(mMockPluginInstance, Mockito.never()).loadAll();
        assertNull(mPluginManager.getOneShotPlugin(""myPlugin"", TestPlugin.class));
        verify(mMockPluginInstance, Mockito.never()).getPlugin();
    }
    @Test
    public void testExceptionHandler_foundPlugin() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        when(mMockPluginInstance.checkAndDisable(Mockito.any())).thenReturn(true);
        mPluginExceptionHandler.uncaughtException(Thread.currentThread(), new Throwable());
        verify(mMockPluginInstance, Mockito.atLeastOnce()).checkAndDisable(
                ArgumentCaptor.forClass(String.class).capture());
        verify(mMockPluginInstance, Mockito.never()).disableAll();
        verify(mMockExceptionHandler).uncaughtException(
                ArgumentCaptor.forClass(Thread.class).capture(),
                ArgumentCaptor.forClass(Throwable.class).capture());
    }
    @Test
    public void testExceptionHandler_noFoundPlugin() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        when(mMockPluginInstance.checkAndDisable(Mockito.any())).thenReturn(false);
        mPluginExceptionHandler.uncaughtException(Thread.currentThread(), new Throwable());
        verify(mMockPluginInstance, Mockito.atLeastOnce()).checkAndDisable(
                ArgumentCaptor.forClass(String.class).capture());
        verify(mMockPluginInstance).disableAll();
        verify(mMockExceptionHandler).uncaughtException(
                ArgumentCaptor.forClass(Thread.class).capture(),
                ArgumentCaptor.forClass(Throwable.class).capture());
    }
    @Test
    public void testDisableIntent() {
        NotificationManager nm = mock(NotificationManager.class);
        PackageManager pm = mock(PackageManager.class);
        mContext.addMockSystemService(Context.NOTIFICATION_SERVICE, nm);
        mContext.setMockPackageManager(pm);
        ComponentName testComponent = new ComponentName(getContext().getPackageName(),
                PluginManagerTest.class.getName());
        Intent intent = new Intent(PluginManagerImpl.DISABLE_PLUGIN);
        intent.setData(Uri.parse(""package://"" + testComponent.flattenToString()));
        mPluginManager.onReceive(mContext, intent);
        verify(nm).cancel(eq(testComponent.getClassName()), eq(SystemMessage.NOTE_PLUGIN));
        verify(pm).setComponentEnabledSetting(eq(testComponent),
                eq(PackageManager.COMPONENT_ENABLED_STATE_DISABLED),
                eq(PackageManager.DONT_KILL_APP));
    }
    private void resetExceptionHandler() {
        mPluginExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
        // Set back the real exception handler so the test can crash if it wants to.
        Thread.setDefaultUncaughtExceptionHandler(mRealExceptionHandler);
    }
    @ProvidesInterface(action = TestPlugin.ACTION, version = TestPlugin.VERSION)
    public static interface TestPlugin extends Plugin {
        public static final String ACTION = ""testAction"";
        public static final int VERSION = 1;
    }
}",class,
"    @Before
    public void setup() throws Exception {
        mDependency.injectTestDependency(Dependency.BG_LOOPER,
                TestableLooper.get(this).getLooper());
        mRealExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
        mMockExceptionHandler = mock(UncaughtExceptionHandler.class);
        mMockFactory = mock(PluginInstanceManagerFactory.class);
        mMockPluginInstance = mock(PluginInstanceManager.class);
        when(mMockFactory.createPluginInstanceManager(Mockito.any(), Mockito.any(), Mockito.any(),
                Mockito.anyBoolean(), Mockito.any(), Mockito.any(), Mockito.any()))
                .thenReturn(mMockPluginInstance);
        mPluginManager = new PluginManagerImpl(getContext(), mMockFactory, true,
                mMockExceptionHandler);
        resetExceptionHandler();
        mMockListener = mock(PluginListener.class);
    }",method,
"    @RunWithLooper(setAsMainLooper = true)
    @Test
    public void testOneShot() {
        Plugin mockPlugin = mock(Plugin.class);
        when(mMockPluginInstance.getPlugin()).thenReturn(new PluginInfo(null, null, mockPlugin,
                null, null));
        Plugin result = mPluginManager.getOneShotPlugin(""myAction"", TestPlugin.class);
        assertTrue(result == mockPlugin);
    }",method,
"    @Test
    public void testAddListener() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        verify(mMockPluginInstance).loadAll();
    }",method,
"    @Test
    public void testRemoveListener() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        mPluginManager.removePluginListener(mMockListener);
        verify(mMockPluginInstance).destroy();
    }",method,
"    @Test
    public void testNonDebuggable() {
        mPluginManager = new PluginManagerImpl(getContext(), mMockFactory, false,
                mMockExceptionHandler);
        resetExceptionHandler();
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        verify(mMockPluginInstance, Mockito.never()).loadAll();
        assertNull(mPluginManager.getOneShotPlugin(""myPlugin"", TestPlugin.class));
        verify(mMockPluginInstance, Mockito.never()).getPlugin();
    }",method,
"    @Test
    public void testExceptionHandler_foundPlugin() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        when(mMockPluginInstance.checkAndDisable(Mockito.any())).thenReturn(true);
        mPluginExceptionHandler.uncaughtException(Thread.currentThread(), new Throwable());
        verify(mMockPluginInstance, Mockito.atLeastOnce()).checkAndDisable(
                ArgumentCaptor.forClass(String.class).capture());
        verify(mMockPluginInstance, Mockito.never()).disableAll();
        verify(mMockExceptionHandler).uncaughtException(
                ArgumentCaptor.forClass(Thread.class).capture(),
                ArgumentCaptor.forClass(Throwable.class).capture());
    }",method,
"    @Test
    public void testExceptionHandler_noFoundPlugin() {
        mPluginManager.addPluginListener(""myAction"", mMockListener, TestPlugin.class);
        when(mMockPluginInstance.checkAndDisable(Mockito.any())).thenReturn(false);
        mPluginExceptionHandler.uncaughtException(Thread.currentThread(), new Throwable());
        verify(mMockPluginInstance, Mockito.atLeastOnce()).checkAndDisable(
                ArgumentCaptor.forClass(String.class).capture());
        verify(mMockPluginInstance).disableAll();
        verify(mMockExceptionHandler).uncaughtException(
                ArgumentCaptor.forClass(Thread.class).capture(),
                ArgumentCaptor.forClass(Throwable.class).capture());
    }",method,
"    @Test
    public void testDisableIntent() {
        NotificationManager nm = mock(NotificationManager.class);
        PackageManager pm = mock(PackageManager.class);
        mContext.addMockSystemService(Context.NOTIFICATION_SERVICE, nm);
        mContext.setMockPackageManager(pm);
        ComponentName testComponent = new ComponentName(getContext().getPackageName(),
                PluginManagerTest.class.getName());
        Intent intent = new Intent(PluginManagerImpl.DISABLE_PLUGIN);
        intent.setData(Uri.parse(""package://"" + testComponent.flattenToString()));
        mPluginManager.onReceive(mContext, intent);
        verify(nm).cancel(eq(testComponent.getClassName()), eq(SystemMessage.NOTE_PLUGIN));
        verify(pm).setComponentEnabledSetting(eq(testComponent),
                eq(PackageManager.COMPONENT_ENABLED_STATE_DISABLED),
                eq(PackageManager.DONT_KILL_APP));
    }
    private void resetExceptionHandler() {
        mPluginExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
        // Set back the real exception handler so the test can crash if it wants to.
        Thread.setDefaultUncaughtExceptionHandler(mRealExceptionHandler);
    }
    @ProvidesInterface(action = TestPlugin.ACTION, version = TestPlugin.VERSION)
    public static interface TestPlugin extends Plugin {
        public static final String ACTION = ""testAction"";
        public static final int VERSION = 1;
    }",method,
"public class GroupCreateSpan extends View {
    private int uid;
    private static TextPaint textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
    private static Paint backPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    private Drawable deleteDrawable;
    private RectF rect = new RectF();
    private ImageReceiver imageReceiver;
    private StaticLayout nameLayout;
    private AvatarDrawable avatarDrawable;
    private int textWidth;
    private float textX;
    private float progress;
    private boolean deleting;
    private long lastUpdateTime;
    private int[] colors = new int[6];
    public GroupCreateSpan(Context context, TLRPC.User user) {
        super(context);
        deleteDrawable = getResources().getDrawable(R.drawable.delete);
        textPaint.setTextSize(AndroidUtilities.dp(14));
        avatarDrawable = new AvatarDrawable();
        avatarDrawable.setTextSize(AndroidUtilities.dp(12));
        avatarDrawable.setInfo(user);
        imageReceiver = new ImageReceiver();
        imageReceiver.setRoundRadius(AndroidUtilities.dp(16));
        imageReceiver.setParentView(this);
        imageReceiver.setImageCoords(0, 0, AndroidUtilities.dp(32), AndroidUtilities.dp(32));
        uid = user.id;
        int maxNameWidth;
        if (AndroidUtilities.isTablet()) {
            maxNameWidth = AndroidUtilities.dp(530 - 32 - 18 - 57 * 2) / 2;
        } else {
            maxNameWidth = (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(32 + 18 + 57 * 2)) / 2;
        }
        CharSequence name = TextUtils.ellipsize(UserObject.getFirstName(user).replace('\n', ' '), textPaint, maxNameWidth, TextUtils.TruncateAt.END);
        nameLayout = new StaticLayout(name, textPaint, 1000, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        if (nameLayout.getLineCount() > 0) {
            textWidth = (int) Math.ceil(nameLayout.getLineWidth(0));
            textX = -nameLayout.getLineLeft(0);
        }
        TLRPC.FileLocation photo = null;
        if (user.photo != null) {
            photo = user.photo.photo_small;
        }
        imageReceiver.setImage(photo, null, ""50_50"", avatarDrawable, null, null, 0, null, 1);
        updateColors();
    }
    public void updateColors() {
        int color = Theme.getColor(Theme.key_avatar_backgroundGroupCreateSpanBlue);
        int back = Theme.getColor(Theme.key_groupcreate_spanBackground);
        int text = Theme.getColor(Theme.key_groupcreate_spanText);
        colors[0] = Color.red(back);
        colors[1] = Color.red(color);
        colors[2] = Color.green(back);
        colors[3] = Color.green(color);
        colors[4] = Color.blue(back);
        colors[5] = Color.blue(color);
        textPaint.setColor(text);
        deleteDrawable.setColorFilter(new PorterDuffColorFilter(text, PorterDuff.Mode.MULTIPLY));
        backPaint.setColor(back);
        avatarDrawable.setColor(AvatarDrawable.getColorForId(5));
    }
    public boolean isDeleting() {
        return deleting;
    }
    public void startDeleteAnimation() {
        if (deleting) {
            return;
        }
        deleting = true;
        lastUpdateTime = System.currentTimeMillis();
        invalidate();
    }
    public void cancelDeleteAnimation() {
        if (!deleting) {
            return;
        }
        deleting = false;
        lastUpdateTime = System.currentTimeMillis();
        invalidate();
    }
    public int getUid() {
        return uid;
    }
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        setMeasuredDimension(AndroidUtilities.dp(32 + 25) + textWidth, AndroidUtilities.dp(32));
    }
    @Override
    protected void onDraw(Canvas canvas) {
        if (deleting && progress != 1.0f || !deleting && progress != 0.0f) {
            long newTime = System.currentTimeMillis();
            long dt = newTime - lastUpdateTime;
            if (dt < 0 || dt > 17) {
                dt = 17;
            }
            if (deleting) {
                progress += dt / 120.0f;
                if (progress >= 1.0f) {
                    progress = 1.0f;
                }
            } else {
                progress -= dt / 120.0f;
                if (progress < 0.0f) {
                    progress = 0.0f;
                }
            }
            invalidate();
        }
        canvas.save();
        rect.set(0, 0, getMeasuredWidth(), AndroidUtilities.dp(32));
        backPaint.setColor(Color.argb(255, colors[0] + (int) ((colors[1] - colors[0]) * progress), colors[2] + (int) ((colors[3] - colors[2]) * progress), colors[4] + (int) ((colors[5] - colors[4]) * progress)));
        canvas.drawRoundRect(rect, AndroidUtilities.dp(16), AndroidUtilities.dp(16), backPaint);
        imageReceiver.draw(canvas);
        if (progress != 0) {
            backPaint.setColor(avatarDrawable.getColor());
            backPaint.setAlpha((int) (255 * progress));
            canvas.drawCircle(AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16), backPaint);
            canvas.save();
            canvas.rotate(45 * (1.0f - progress), AndroidUtilities.dp(16), AndroidUtilities.dp(16));
            deleteDrawable.setBounds(AndroidUtilities.dp(11), AndroidUtilities.dp(11), AndroidUtilities.dp(21), AndroidUtilities.dp(21));
            deleteDrawable.setAlpha((int) (255 * progress));
            deleteDrawable.draw(canvas);
            canvas.restore();
        }
        canvas.translate(textX + AndroidUtilities.dp(32 + 9), AndroidUtilities.dp(8));
        nameLayout.draw(canvas);
        canvas.restore();
    }
}",class,
"    public GroupCreateSpan(Context context, TLRPC.User user) {
        super(context);
        deleteDrawable = getResources().getDrawable(R.drawable.delete);
        textPaint.setTextSize(AndroidUtilities.dp(14));
        avatarDrawable = new AvatarDrawable();
        avatarDrawable.setTextSize(AndroidUtilities.dp(12));
        avatarDrawable.setInfo(user);
        imageReceiver = new ImageReceiver();
        imageReceiver.setRoundRadius(AndroidUtilities.dp(16));
        imageReceiver.setParentView(this);
        imageReceiver.setImageCoords(0, 0, AndroidUtilities.dp(32), AndroidUtilities.dp(32));
        uid = user.id;
        int maxNameWidth;
        if (AndroidUtilities.isTablet()) {
            maxNameWidth = AndroidUtilities.dp(530 - 32 - 18 - 57 * 2) / 2;
        } else {
            maxNameWidth = (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(32 + 18 + 57 * 2)) / 2;
        }
        CharSequence name = TextUtils.ellipsize(UserObject.getFirstName(user).replace('\n', ' '), textPaint, maxNameWidth, TextUtils.TruncateAt.END);
        nameLayout = new StaticLayout(name, textPaint, 1000, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        if (nameLayout.getLineCount() > 0) {
            textWidth = (int) Math.ceil(nameLayout.getLineWidth(0));
            textX = -nameLayout.getLineLeft(0);
        }
        TLRPC.FileLocation photo = null;
        if (user.photo != null) {
            photo = user.photo.photo_small;
        }
        imageReceiver.setImage(photo, null, ""50_50"", avatarDrawable, null, null, 0, null, 1);
        updateColors();
    }",method,
"        if (user.photo != null) {
            photo = user.photo.photo_small;
        }",method,
"    public void updateColors() {
        int color = Theme.getColor(Theme.key_avatar_backgroundGroupCreateSpanBlue);
        int back = Theme.getColor(Theme.key_groupcreate_spanBackground);
        int text = Theme.getColor(Theme.key_groupcreate_spanText);
        colors[0] = Color.red(back);
        colors[1] = Color.red(color);
        colors[2] = Color.green(back);
        colors[3] = Color.green(color);
        colors[4] = Color.blue(back);
        colors[5] = Color.blue(color);
        textPaint.setColor(text);
        deleteDrawable.setColorFilter(new PorterDuffColorFilter(text, PorterDuff.Mode.MULTIPLY));
        backPaint.setColor(back);
        avatarDrawable.setColor(AvatarDrawable.getColorForId(5));
    }",method,
"    public boolean isDeleting() {
        return deleting;
    }",method,
"    public void startDeleteAnimation() {
        if (deleting) {
            return;
        }
        deleting = true;
        lastUpdateTime = System.currentTimeMillis();
        invalidate();
    }",method,
"        if (deleting) {
            return;
        }",method,
"    public void cancelDeleteAnimation() {
        if (!deleting) {
            return;
        }
        deleting = false;
        lastUpdateTime = System.currentTimeMillis();
        invalidate();
    }",method,
"        if (!deleting) {
            return;
        }",method,
"    public int getUid() {
        return uid;
    }",method,
"    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        setMeasuredDimension(AndroidUtilities.dp(32 + 25) + textWidth, AndroidUtilities.dp(32));
    }",method,
"    @Override
    protected void onDraw(Canvas canvas) {
        if (deleting && progress != 1.0f || !deleting && progress != 0.0f) {
            long newTime = System.currentTimeMillis();
            long dt = newTime - lastUpdateTime;
            if (dt < 0 || dt > 17) {
                dt = 17;
            }
            if (deleting) {
                progress += dt / 120.0f;
                if (progress >= 1.0f) {
                    progress = 1.0f;
                }
            } else {
                progress -= dt / 120.0f;
                if (progress < 0.0f) {
                    progress = 0.0f;
                }
            }
            invalidate();
        }
        canvas.save();
        rect.set(0, 0, getMeasuredWidth(), AndroidUtilities.dp(32));
        backPaint.setColor(Color.argb(255, colors[0] + (int) ((colors[1] - colors[0]) * progress), colors[2] + (int) ((colors[3] - colors[2]) * progress), colors[4] + (int) ((colors[5] - colors[4]) * progress)));
        canvas.drawRoundRect(rect, AndroidUtilities.dp(16), AndroidUtilities.dp(16), backPaint);
        imageReceiver.draw(canvas);
        if (progress != 0) {
            backPaint.setColor(avatarDrawable.getColor());
            backPaint.setAlpha((int) (255 * progress));
            canvas.drawCircle(AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16), backPaint);
            canvas.save();
            canvas.rotate(45 * (1.0f - progress), AndroidUtilities.dp(16), AndroidUtilities.dp(16));
            deleteDrawable.setBounds(AndroidUtilities.dp(11), AndroidUtilities.dp(11), AndroidUtilities.dp(21), AndroidUtilities.dp(21));
            deleteDrawable.setAlpha((int) (255 * progress));
            deleteDrawable.draw(canvas);
            canvas.restore();
        }
        canvas.translate(textX + AndroidUtilities.dp(32 + 9), AndroidUtilities.dp(8));
        nameLayout.draw(canvas);
        canvas.restore();
    }",method,
"        if (deleting && progress != 1.0f || !deleting && progress != 0.0f) {
            long newTime = System.currentTimeMillis();
            long dt = newTime - lastUpdateTime;
            if (dt < 0 || dt > 17) {
                dt = 17;
            }
            if (deleting) {
                progress += dt / 120.0f;
                if (progress >= 1.0f) {
                    progress = 1.0f;
                }
            } else {
                progress -= dt / 120.0f;
                if (progress < 0.0f) {
                    progress = 0.0f;
                }
            }
            invalidate();
        }",method,
"            if (dt < 0 || dt > 17) {
                dt = 17;
            }",method,
"            if (deleting) {
                progress += dt / 120.0f;
                if (progress >= 1.0f) {
                    progress = 1.0f;
                }
            }",method,
"                if (progress >= 1.0f) {
                    progress = 1.0f;
                }",method,
"                if (progress < 0.0f) {
                    progress = 0.0f;
                }",method,
"        if (progress != 0) {
            backPaint.setColor(avatarDrawable.getColor());
            backPaint.setAlpha((int) (255 * progress));
            canvas.drawCircle(AndroidUtilities.dp(16), AndroidUtilities.dp(16), AndroidUtilities.dp(16), backPaint);
            canvas.save();
            canvas.rotate(45 * (1.0f - progress), AndroidUtilities.dp(16), AndroidUtilities.dp(16));
            deleteDrawable.setBounds(AndroidUtilities.dp(11), AndroidUtilities.dp(11), AndroidUtilities.dp(21), AndroidUtilities.dp(21));
            deleteDrawable.setAlpha((int) (255 * progress));
            deleteDrawable.draw(canvas);
            canvas.restore();
        }",method,
"public class StaticPseudoFunctionalStyleMethodOptions {
  private static final String PIPELINE_ELEMENT_NAME = ""pipelineElement"";
  private static final String FQN_ATTR = ""classFqn"";
  private static final String METHOD_ATTR = ""method"";
  private static final String STREAM_API_METHOD_ATTR = ""streamApiMethod"";
  private static final String LAMBDA_ROLE_ATTR = ""lambdaRole"";
  private static final String ACCEPTS_DEFAULT_ATTR = ""acceptsDefault"";
  private static final String DELETE_ATTR = ""toDelete"";
  private final List<PipelineElement> myElements;
  public StaticPseudoFunctionalStyleMethodOptions() {
    myElements = new ArrayList<>();
    restoreDefault(myElements);
  }
  private static void restoreDefault(final List<PipelineElement> elements) {
    elements.clear();
    String guavaIterables = ""com.google.common.collect.Iterables"";
    elements.add(new PipelineElement(guavaIterables, ""transform"", PseudoLambdaReplaceTemplate.MAP));
    elements.add(new PipelineElement(guavaIterables, ""filter"", PseudoLambdaReplaceTemplate.FILTER));
    elements.add(new PipelineElement(guavaIterables, ""find"", PseudoLambdaReplaceTemplate.FIND));
    elements.add(new PipelineElement(guavaIterables, ""all"", PseudoLambdaReplaceTemplate.ALL_MATCH));
    elements.add(new PipelineElement(guavaIterables, ""any"", PseudoLambdaReplaceTemplate.ANY_MATCH));
    String guavaLists = ""com.google.common.collect.Lists"";
    elements.add(new PipelineElement(guavaLists, ""transform"", PseudoLambdaReplaceTemplate.MAP));
  }
  @NotNull
  public Collection<PipelineElement> findElementsByMethodName(final @NotNull String methodName) {
    return ContainerUtil.filter(myElements, element -> methodName.equals(element.getMethodName()));
  }
  public void readExternal(final @NotNull Element xmlElement) {
    restoreDefault(myElements);
    for (Element element : xmlElement.getChildren(PIPELINE_ELEMENT_NAME)) {
      final String fqn = element.getAttributeValue(FQN_ATTR);
      final String method = element.getAttributeValue(METHOD_ATTR);
      final String streamApiMethod = element.getAttributeValue(STREAM_API_METHOD_ATTR);
      final PseudoLambdaReplaceTemplate.LambdaRole lambdaRole =
        PseudoLambdaReplaceTemplate.LambdaRole.valueOf(element.getAttributeValue(LAMBDA_ROLE_ATTR));
      final boolean acceptsDefault = Boolean.valueOf(element.getAttributeValue(ACCEPTS_DEFAULT_ATTR));
      final boolean toDelete = element.getAttribute(DELETE_ATTR) != null;
      final PipelineElement pipelineElement = new PipelineElement(fqn, method, new PseudoLambdaReplaceTemplate(streamApiMethod, lambdaRole, acceptsDefault));
      if (toDelete) {
        myElements.remove(pipelineElement);
      }
      else {
        myElements.add(pipelineElement);
      }
    }
  }
  public void writeExternal(final @NotNull Element xmlElement) {
    final List<PipelineElement> toRemoveElements = new ArrayList<>();
    restoreDefault(toRemoveElements);
    toRemoveElements.removeAll(myElements);
    for (PipelineElement element : toRemoveElements) {
      xmlElement.addContent(createXmlElement(element)
                              .setAttribute(DELETE_ATTR, """"));
    }
    final List<PipelineElement> defaultElements = new ArrayList<>();
    restoreDefault(defaultElements);
    for (PipelineElement element : myElements) {
      if (!defaultElements.contains(element)) {
        xmlElement.addContent(createXmlElement(element));
      }
    }
  }
  public Element createXmlElement(PipelineElement element) {
    final PseudoLambdaReplaceTemplate template = element.getTemplate();
    return new Element(PIPELINE_ELEMENT_NAME)
      .setAttribute(FQN_ATTR, element.getHandlerClass())
      .setAttribute(METHOD_ATTR, element.getMethodName())
      .setAttribute(STREAM_API_METHOD_ATTR, template.getStreamApiMethodName())
      .setAttribute(LAMBDA_ROLE_ATTR, template.getLambdaRole().toString())
      .setAttribute(ACCEPTS_DEFAULT_ATTR, String.valueOf(template.isAcceptDefaultValue()));
  }
  public JComponent createPanel() {
    final JBList list = new JBList(myElements);
    list.setCellRenderer(new ColoredListCellRenderer<PipelineElement>() {
      @Override
      protected void customizeCellRenderer(@NotNull JList list, PipelineElement element, int index, boolean selected, boolean hasFocus) {
        final String classFQName = element.getHandlerClass();
        final String[] split = classFQName.split(""\\."");
        final int classShortNameIndex = classFQName.length() - split[split.length - 1].length();
        append(classFQName.substring(0, classShortNameIndex));
        append(classFQName.substring(classShortNameIndex),
               SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES.derive(SimpleTextAttributes.STYLE_BOLD,
                                                                   JBColor.BLUE, null, null));
        append(""."" + element.getMethodName(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      }
    });
    return ToolbarDecorator.createDecorator(list).disableUpDownActions().setAddAction(new AnActionButtonRunnable() {
      @Override
      public void run(AnActionButton button) {
        final Project currentProject = CommonDataKeys.PROJECT.getData(button.getDataContext());
        if (currentProject == null) {
          return;
        }
        if (DumbService.isDumb(currentProject)) {
          return;
        }
        final AddMethodsDialog dlg = new AddMethodsDialog(currentProject, list, false);
        if (dlg.showAndGet()) {
          final PipelineElement newElement = dlg.getSelectedElement();
          if (myElements.contains(newElement)) {
            return;
          }
          myElements.add(newElement);
          ((DefaultListModel)list.getModel()).addElement(newElement);
        }
      }
    }).setRemoveAction(new AnActionButtonRunnable() {
      @Override
      public void run(AnActionButton button) {
        final int[] indices = list.getSelectedIndices();
        final List<PipelineElement> toRemove = new ArrayList<>(indices.length);
        for (int idx : indices) {
          toRemove.add(myElements.get(idx));
        }
        myElements.removeAll(toRemove);
        ListUtil.removeSelectedItems(list);
      }
    }).createPanel();
  }
  public static class PipelineElement {
    private final String myHandlerClass;
    private final String myMethodName;
    private final PseudoLambdaReplaceTemplate myTemplate;
    public PipelineElement(@NotNull String handlerClass,
                           @NotNull String methodName,
                           @NotNull PseudoLambdaReplaceTemplate template) {
      myHandlerClass = handlerClass;
      myMethodName = methodName;
      myTemplate = template;
    }
    public String getHandlerClass() {
      return myHandlerClass;
    }
    public String getMethodName() {
      return myMethodName;
    }
    public PseudoLambdaReplaceTemplate getTemplate() {
      return myTemplate;
    }
    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      PipelineElement element = (PipelineElement)o;
      if (!myHandlerClass.equals(element.myHandlerClass)) return false;
      if (!myMethodName.equals(element.myMethodName)) return false;
      if (!myTemplate.equals(element.myTemplate)) return false;
      return true;
    }
    @Override
    public int hashCode() {
      int result = myHandlerClass.hashCode();
      result = 31 * result + myMethodName.hashCode();
      result = 31 * result + myTemplate.hashCode();
      return result;
    }
  }
}",class,
"  public static class PipelineElement {
    private final String myHandlerClass;
    private final String myMethodName;
    private final PseudoLambdaReplaceTemplate myTemplate;
    public PipelineElement(@NotNull String handlerClass,
                           @NotNull String methodName,
                           @NotNull PseudoLambdaReplaceTemplate template) {
      myHandlerClass = handlerClass;
      myMethodName = methodName;
      myTemplate = template;
    }
    public String getHandlerClass() {
      return myHandlerClass;
    }
    public String getMethodName() {
      return myMethodName;
    }
    public PseudoLambdaReplaceTemplate getTemplate() {
      return myTemplate;
    }
    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      PipelineElement element = (PipelineElement)o;
      if (!myHandlerClass.equals(element.myHandlerClass)) return false;
      if (!myMethodName.equals(element.myMethodName)) return false;
      if (!myTemplate.equals(element.myTemplate)) return false;
      return true;
    }
    @Override
    public int hashCode() {
      int result = myHandlerClass.hashCode();
      result = 31 * result + myMethodName.hashCode();
      result = 31 * result + myTemplate.hashCode();
      return result;
    }
  }",class,
"  public StaticPseudoFunctionalStyleMethodOptions() {
    myElements = new ArrayList<>();
    restoreDefault(myElements);
  }",method,
"  private static void restoreDefault(final List<PipelineElement> elements) {
    elements.clear();
    String guavaIterables = ""com.google.common.collect.Iterables"";
    elements.add(new PipelineElement(guavaIterables, ""transform"", PseudoLambdaReplaceTemplate.MAP));
    elements.add(new PipelineElement(guavaIterables, ""filter"", PseudoLambdaReplaceTemplate.FILTER));
    elements.add(new PipelineElement(guavaIterables, ""find"", PseudoLambdaReplaceTemplate.FIND));
    elements.add(new PipelineElement(guavaIterables, ""all"", PseudoLambdaReplaceTemplate.ALL_MATCH));
    elements.add(new PipelineElement(guavaIterables, ""any"", PseudoLambdaReplaceTemplate.ANY_MATCH));
    String guavaLists = ""com.google.common.collect.Lists"";
    elements.add(new PipelineElement(guavaLists, ""transform"", PseudoLambdaReplaceTemplate.MAP));
  }",method,
"  @NotNull
  public Collection<PipelineElement> findElementsByMethodName(final @NotNull String methodName) {
    return ContainerUtil.filter(myElements, element -> methodName.equals(element.getMethodName()));
  }",method,
"  public void readExternal(final @NotNull Element xmlElement) {
    restoreDefault(myElements);
    for (Element element : xmlElement.getChildren(PIPELINE_ELEMENT_NAME)) {
      final String fqn = element.getAttributeValue(FQN_ATTR);
      final String method = element.getAttributeValue(METHOD_ATTR);
      final String streamApiMethod = element.getAttributeValue(STREAM_API_METHOD_ATTR);
      final PseudoLambdaReplaceTemplate.LambdaRole lambdaRole =
        PseudoLambdaReplaceTemplate.LambdaRole.valueOf(element.getAttributeValue(LAMBDA_ROLE_ATTR));
      final boolean acceptsDefault = Boolean.valueOf(element.getAttributeValue(ACCEPTS_DEFAULT_ATTR));
      final boolean toDelete = element.getAttribute(DELETE_ATTR) != null;
      final PipelineElement pipelineElement = new PipelineElement(fqn, method, new PseudoLambdaReplaceTemplate(streamApiMethod, lambdaRole, acceptsDefault));
      if (toDelete) {
        myElements.remove(pipelineElement);
      }
      else {
        myElements.add(pipelineElement);
      }
    }
  }",method,
"      if (toDelete) {
        myElements.remove(pipelineElement);
      }",method,
"  public void writeExternal(final @NotNull Element xmlElement) {
    final List<PipelineElement> toRemoveElements = new ArrayList<>();
    restoreDefault(toRemoveElements);
    toRemoveElements.removeAll(myElements);
    for (PipelineElement element : toRemoveElements) {
      xmlElement.addContent(createXmlElement(element)
                              .setAttribute(DELETE_ATTR, """"));
    }
    final List<PipelineElement> defaultElements = new ArrayList<>();
    restoreDefault(defaultElements);
    for (PipelineElement element : myElements) {
      if (!defaultElements.contains(element)) {
        xmlElement.addContent(createXmlElement(element));
      }
    }
  }",method,
"    for (PipelineElement element : toRemoveElements) {
      xmlElement.addContent(createXmlElement(element)
                              .setAttribute(DELETE_ATTR, """"));
    }",method,
"    for (PipelineElement element : myElements) {
      if (!defaultElements.contains(element)) {
        xmlElement.addContent(createXmlElement(element));
      }
    }",method,
"  public Element createXmlElement(PipelineElement element) {
    final PseudoLambdaReplaceTemplate template = element.getTemplate();
    return new Element(PIPELINE_ELEMENT_NAME)
      .setAttribute(FQN_ATTR, element.getHandlerClass())
      .setAttribute(METHOD_ATTR, element.getMethodName())
      .setAttribute(STREAM_API_METHOD_ATTR, template.getStreamApiMethodName())
      .setAttribute(LAMBDA_ROLE_ATTR, template.getLambdaRole().toString())
      .setAttribute(ACCEPTS_DEFAULT_ATTR, String.valueOf(template.isAcceptDefaultValue()));
  }",method,
"  public JComponent createPanel() {
    final JBList list = new JBList(myElements);
    list.setCellRenderer(new ColoredListCellRenderer<PipelineElement>() {
      @Override
      protected void customizeCellRenderer(@NotNull JList list, PipelineElement element, int index, boolean selected, boolean hasFocus) {
        final String classFQName = element.getHandlerClass();
        final String[] split = classFQName.split(""\\."");
        final int classShortNameIndex = classFQName.length() - split[split.length - 1].length();
        append(classFQName.substring(0, classShortNameIndex));
        append(classFQName.substring(classShortNameIndex),
               SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES.derive(SimpleTextAttributes.STYLE_BOLD,
                                                                   JBColor.BLUE, null, null));
        append(""."" + element.getMethodName(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      }
    });
    return ToolbarDecorator.createDecorator(list).disableUpDownActions().setAddAction(new AnActionButtonRunnable() {
      @Override
      public void run(AnActionButton button) {
        final Project currentProject = CommonDataKeys.PROJECT.getData(button.getDataContext());
        if (currentProject == null) {
          return;
        }
        if (DumbService.isDumb(currentProject)) {
          return;
        }
        final AddMethodsDialog dlg = new AddMethodsDialog(currentProject, list, false);
        if (dlg.showAndGet()) {
          final PipelineElement newElement = dlg.getSelectedElement();
          if (myElements.contains(newElement)) {
            return;
          }
          myElements.add(newElement);
          ((DefaultListModel)list.getModel()).addElement(newElement);
        }
      }
    }).setRemoveAction(new AnActionButtonRunnable() {
      @Override
      public void run(AnActionButton button) {
        final int[] indices = list.getSelectedIndices();
        final List<PipelineElement> toRemove = new ArrayList<>(indices.length);
        for (int idx : indices) {
          toRemove.add(myElements.get(idx));
        }
        myElements.removeAll(toRemove);
        ListUtil.removeSelectedItems(list);
      }
    }).createPanel();
  }",method,
"    list.setCellRenderer(new ColoredListCellRenderer<PipelineElement>() {
      @Override
      protected void customizeCellRenderer(@NotNull JList list, PipelineElement element, int index, boolean selected, boolean hasFocus) {
        final String classFQName = element.getHandlerClass();
        final String[] split = classFQName.split(""\\."");
        final int classShortNameIndex = classFQName.length() - split[split.length - 1].length();
        append(classFQName.substring(0, classShortNameIndex));
        append(classFQName.substring(classShortNameIndex),
               SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES.derive(SimpleTextAttributes.STYLE_BOLD,
                                                                   JBColor.BLUE, null, null));
        append(""."" + element.getMethodName(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      }
    }",method,
"      @Override
      protected void customizeCellRenderer(@NotNull JList list, PipelineElement element, int index, boolean selected, boolean hasFocus) {
        final String classFQName = element.getHandlerClass();
        final String[] split = classFQName.split(""\\."");
        final int classShortNameIndex = classFQName.length() - split[split.length - 1].length();
        append(classFQName.substring(0, classShortNameIndex));
        append(classFQName.substring(classShortNameIndex),
               SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES.derive(SimpleTextAttributes.STYLE_BOLD,
                                                                   JBColor.BLUE, null, null));
        append(""."" + element.getMethodName(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      }",method,
"      @Override
      public void run(AnActionButton button) {
        final Project currentProject = CommonDataKeys.PROJECT.getData(button.getDataContext());
        if (currentProject == null) {
          return;
        }
        if (DumbService.isDumb(currentProject)) {
          return;
        }
        final AddMethodsDialog dlg = new AddMethodsDialog(currentProject, list, false);
        if (dlg.showAndGet()) {
          final PipelineElement newElement = dlg.getSelectedElement();
          if (myElements.contains(newElement)) {
            return;
          }
          myElements.add(newElement);
          ((DefaultListModel)list.getModel()).addElement(newElement);
        }
      }",method,
"        if (currentProject == null) {
          return;
        }",method,
"      @Override
      public void run(AnActionButton button) {
        final int[] indices = list.getSelectedIndices();
        final List<PipelineElement> toRemove = new ArrayList<>(indices.length);
        for (int idx : indices) {
          toRemove.add(myElements.get(idx));
        }
        myElements.removeAll(toRemove);
        ListUtil.removeSelectedItems(list);
      }",method,
"        for (int idx : indices) {
          toRemove.add(myElements.get(idx));
        }",method,
"    public PipelineElement(@NotNull String handlerClass,
                           @NotNull String methodName,
                           @NotNull PseudoLambdaReplaceTemplate template) {
      myHandlerClass = handlerClass;
      myMethodName = methodName;
      myTemplate = template;
    }",method,
"    public String getHandlerClass() {
      return myHandlerClass;
    }",method,
"    public String getMethodName() {
      return myMethodName;
    }",method,
"    public PseudoLambdaReplaceTemplate getTemplate() {
      return myTemplate;
    }",method,
"    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      PipelineElement element = (PipelineElement)o;
      if (!myHandlerClass.equals(element.myHandlerClass)) return false;
      if (!myMethodName.equals(element.myMethodName)) return false;
      if (!myTemplate.equals(element.myTemplate)) return false;
      return true;
    }",method,
"    @Override
    public int hashCode() {
      int result = myHandlerClass.hashCode();
      result = 31 * result + myMethodName.hashCode();
      result = 31 * result + myTemplate.hashCode();
      return result;
    }",method,
"public class StartActivity extends BaseGameActivity {
	// ===========================================================
	// Constants
	// ===========================================================
	private static final int CAMERA_WIDTH = 480;
	private static final int CAMERA_HEIGHT = 320;
	// ===========================================================
	// Fields
	// ===========================================================
	private Camera mCamera;
	private Texture mTexture, mBatTexture;
	private TextureRegion mSplashTextureRegion;
	private TiledTextureRegion mBatTextureRegion;
	private Handler mHandler;
	// ===========================================================
	// Constructors
	// ===========================================================
	// ===========================================================
	// Getter & Setter
	// ===========================================================
	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================
	@Override
	public Engine onLoadEngine() {
		mHandler = new Handler();
		this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
		return new Engine(new EngineOptions(true, ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera));
	}
	@Override
	public void onLoadResources() {
		TextureRegionFactory.setAssetBasePath(""gfx/Splash/"");
		this.mTexture = new Texture(512, 1024, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.mSplashTextureRegion = TextureRegionFactory.createFromAsset(this.mTexture, this, ""Splashscreen.png"", 0, 0);
		this.mBatTexture = new Texture(256, 256, TextureOptions.DEFAULT);
		this.mBatTextureRegion = TextureRegionFactory.createTiledFromAsset(this.mBatTexture, this, ""bat_tiled.png"", 0, 0, 2, 2);
		//this.mBatTextureRegion = TextureRegionFactory.createTiledFromAsset(this.mTexture, this, ""bat_tiled.png"", 0, 513, 2, 2);
		this.mEngine.getTextureManager().loadTexture(this.mTexture);
		this.mEngine.getTextureManager().loadTexture(this.mBatTexture);
	}
	@Override
	public Scene onLoadScene() {
		this.mEngine.registerUpdateHandler(new FPSLogger());
		final Scene scene = new Scene(1);
		final int centerX = (CAMERA_WIDTH - this.mSplashTextureRegion.getWidth()) / 2;
		final int centerY = (CAMERA_HEIGHT - this.mSplashTextureRegion.getHeight()) / 2;
		final Sprite splash = new Sprite(centerX, centerY, this.mSplashTextureRegion);
		scene.getLastChild().attachChild(splash);
		final AnimatedSprite bat = new AnimatedSprite(350, 100, this.mBatTextureRegion);
		bat.animate(100);
		scene.getLastChild().attachChild(bat);
		return scene;
	}
	@Override
	public void onLoadComplete() {
		mHandler.postDelayed(mLaunchTask,5000);
	}
    private Runnable mLaunchTask = new Runnable() {
        public void run() {
    		Intent myIntent = new Intent(StartActivity.this, MainMenuActivity.class);
    		StartActivity.this.startActivity(myIntent);
    		StartActivity.this.finish();
        }
     };
	// ===========================================================
	// Methods
	// ===========================================================
	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
}",class,
"	@Override
	public Engine onLoadEngine() {
		mHandler = new Handler();
		this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
		return new Engine(new EngineOptions(true, ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera));
	}",method,
"	@Override
	public void onLoadResources() {
		TextureRegionFactory.setAssetBasePath(""gfx/Splash/"");
		this.mTexture = new Texture(512, 1024, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.mSplashTextureRegion = TextureRegionFactory.createFromAsset(this.mTexture, this, ""Splashscreen.png"", 0, 0);
		this.mBatTexture = new Texture(256, 256, TextureOptions.DEFAULT);
		this.mBatTextureRegion = TextureRegionFactory.createTiledFromAsset(this.mBatTexture, this, ""bat_tiled.png"", 0, 0, 2, 2);
		//this.mBatTextureRegion = TextureRegionFactory.createTiledFromAsset(this.mTexture, this, ""bat_tiled.png"", 0, 513, 2, 2);
		this.mEngine.getTextureManager().loadTexture(this.mTexture);
		this.mEngine.getTextureManager().loadTexture(this.mBatTexture);
	}",method,
"	@Override
	public Scene onLoadScene() {
		this.mEngine.registerUpdateHandler(new FPSLogger());
		final Scene scene = new Scene(1);
		final int centerX = (CAMERA_WIDTH - this.mSplashTextureRegion.getWidth()) / 2;
		final int centerY = (CAMERA_HEIGHT - this.mSplashTextureRegion.getHeight()) / 2;
		final Sprite splash = new Sprite(centerX, centerY, this.mSplashTextureRegion);
		scene.getLastChild().attachChild(splash);
		final AnimatedSprite bat = new AnimatedSprite(350, 100, this.mBatTextureRegion);
		bat.animate(100);
		scene.getLastChild().attachChild(bat);
		return scene;
	}",method,
"	@Override
	public void onLoadComplete() {
		mHandler.postDelayed(mLaunchTask,5000);
	}",method,
"        public void run() {
    		Intent myIntent = new Intent(StartActivity.this, MainMenuActivity.class);
    		StartActivity.this.startActivity(myIntent);
    		StartActivity.this.finish();
        }",method,
