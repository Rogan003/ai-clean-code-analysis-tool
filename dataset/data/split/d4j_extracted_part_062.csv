code_snippet,type,score
"  @Override
  protected boolean isEnabled(AnActionEvent e) {
    return super.isEnabled(e) && !isIgnoredNode(e);
  }",method,
"  @Override
  protected void perform(@NotNull Project project,
                         @NotNull ProjectSystemId projectSystemId,
                         @NotNull TaskData taskData,
                         @NotNull AnActionEvent e) {
    final ExternalSystemShortcutsManager shortcutsManager = ExternalProjectsManagerImpl.getInstance(project).getShortcutsManager();
    final String actionId = shortcutsManager.getActionId(taskData.getLinkedExternalProjectPath(), taskData.getName());
    if (actionId != null) {
      AnAction action = ActionManager.getInstance().getAction(actionId);
      if (action == null) {
        ExternalSystemNode<?> taskNode = ContainerUtil.getFirstItem(ExternalSystemDataKeys.SELECTED_NODES.getData(e.getDataContext()));
        assert taskNode != null;
        final String group;
        final ModuleNode moduleDataNode = taskNode.findParent(ModuleNode.class);
        if (moduleDataNode != null) {
          ModuleData moduleData = moduleDataNode.getData();
          group = moduleData != null ? moduleData.getInternalName() : null;
        }
        else {
          ProjectNode projectNode = taskNode.findParent(ProjectNode.class);
          ProjectData projectData = projectNode != null ? projectNode.getData() : null;
          group = projectData != null ? projectData.getInternalName() : null;
        }
        if (group != null) {
          ExternalSystemKeymapExtension.getOrRegisterAction(project, group, taskData);
        }
      }
      new EditKeymapsDialog(project, actionId).show();
    }
  }",method,
"    if (actionId != null) {
      AnAction action = ActionManager.getInstance().getAction(actionId);
      if (action == null) {
        ExternalSystemNode<?> taskNode = ContainerUtil.getFirstItem(ExternalSystemDataKeys.SELECTED_NODES.getData(e.getDataContext()));
        assert taskNode != null;
        final String group;
        final ModuleNode moduleDataNode = taskNode.findParent(ModuleNode.class);
        if (moduleDataNode != null) {
          ModuleData moduleData = moduleDataNode.getData();
          group = moduleData != null ? moduleData.getInternalName() : null;
        }
        else {
          ProjectNode projectNode = taskNode.findParent(ProjectNode.class);
          ProjectData projectData = projectNode != null ? projectNode.getData() : null;
          group = projectData != null ? projectData.getInternalName() : null;
        }
        if (group != null) {
          ExternalSystemKeymapExtension.getOrRegisterAction(project, group, taskData);
        }
      }
      new EditKeymapsDialog(project, actionId).show();
    }",method,
"      if (action == null) {
        ExternalSystemNode<?> taskNode = ContainerUtil.getFirstItem(ExternalSystemDataKeys.SELECTED_NODES.getData(e.getDataContext()));
        assert taskNode != null;
        final String group;
        final ModuleNode moduleDataNode = taskNode.findParent(ModuleNode.class);
        if (moduleDataNode != null) {
          ModuleData moduleData = moduleDataNode.getData();
          group = moduleData != null ? moduleData.getInternalName() : null;
        }
        else {
          ProjectNode projectNode = taskNode.findParent(ProjectNode.class);
          ProjectData projectData = projectNode != null ? projectNode.getData() : null;
          group = projectData != null ? projectData.getInternalName() : null;
        }
        if (group != null) {
          ExternalSystemKeymapExtension.getOrRegisterAction(project, group, taskData);
        }
      }",method,
"        if (moduleDataNode != null) {
          ModuleData moduleData = moduleDataNode.getData();
          group = moduleData != null ? moduleData.getInternalName() : null;
        }",method,
"        if (group != null) {
          ExternalSystemKeymapExtension.getOrRegisterAction(project, group, taskData);
        }",method,
"public class IteratorSerializer extends AbstractSerializer {
    private static IteratorSerializer _serializer;
    public static IteratorSerializer create() {
        if (_serializer == null)
            _serializer = new IteratorSerializer();
        return _serializer;
    }
    public void writeObject(Object obj, AbstractHessianOutput out)
            throws IOException {
        Iterator iter = (Iterator) obj;
        boolean hasEnd = out.writeListBegin(-1, null);
        while (iter.hasNext()) {
            Object value = iter.next();
            out.writeObject(value);
        }
        if (hasEnd)
            out.writeListEnd();
    }
}",class,
"    public static IteratorSerializer create() {
        if (_serializer == null)
            _serializer = new IteratorSerializer();
        return _serializer;
    }",method,
"    public void writeObject(Object obj, AbstractHessianOutput out)
            throws IOException {
        Iterator iter = (Iterator) obj;
        boolean hasEnd = out.writeListBegin(-1, null);
        while (iter.hasNext()) {
            Object value = iter.next();
            out.writeObject(value);
        }
        if (hasEnd)
            out.writeListEnd();
    }",method,
"public final class JsonStreamParser implements Iterator<JsonElement> {
  private final JsonReader parser;
  private final Object lock;
  public JsonStreamParser(String json) {
    this(new StringReader(json));      
  }
  public JsonStreamParser(Reader reader) {
    parser = new JsonReader(reader);
    parser.setLenient(true);
    lock = new Object();
  }
  public JsonElement next() throws JsonParseException {
    if (!hasNext()) {
      throw new NoSuchElementException();
    }
    try {
      return Streams.parse(parser);
    } catch (StackOverflowError e) {
      throw new JsonParseException(""Failed parsing JSON source to Json"", e);
    } catch (OutOfMemoryError e) {
      throw new JsonParseException(""Failed parsing JSON source to Json"", e);
    } catch (JsonParseException e) {
      throw e.getCause() instanceof EOFException ? new NoSuchElementException() : e;
    }
  }
  public boolean hasNext() {
    synchronized (lock) {
      try {
        return parser.peek() != JsonToken.END_DOCUMENT;
      } catch (MalformedJsonException e) {
        throw new JsonSyntaxException(e);
      } catch (IOException e) {
        throw new JsonIOException(e);
      }
    }
  }
  public void remove() {
    throw new UnsupportedOperationException();
  }
}",class,
"public final class JsonSyntaxException extends JsonParseException {
  private static final long serialVersionUID = 1L;
  public JsonSyntaxException(String msg) {
    super(msg);
  }
  public JsonSyntaxException(String msg, Throwable cause) {
    super(msg, cause);
  }
  public JsonSyntaxException(Throwable cause) {
    super(cause);
  }
}",class,
"  public JsonStreamParser(String json) {
    this(new StringReader(json));      
  }",method,
"  public JsonStreamParser(Reader reader) {
    parser = new JsonReader(reader);
    parser.setLenient(true);
    lock = new Object();
  }",method,
"  public JsonElement next() throws JsonParseException {
    if (!hasNext()) {
      throw new NoSuchElementException();
    }
    try {
      return Streams.parse(parser);
    } catch (StackOverflowError e) {
      throw new JsonParseException(""Failed parsing JSON source to Json"", e);
    } catch (OutOfMemoryError e) {
      throw new JsonParseException(""Failed parsing JSON source to Json"", e);
    } catch (JsonParseException e) {
      throw e.getCause() instanceof EOFException ? new NoSuchElementException() : e;
    }
  }",method,
"  public boolean hasNext() {
    synchronized (lock) {
      try {
        return parser.peek() != JsonToken.END_DOCUMENT;
      } catch (MalformedJsonException e) {
        throw new JsonSyntaxException(e);
      } catch (IOException e) {
        throw new JsonIOException(e);
      }
    }
  }",method,
"    synchronized (lock) {
      try {
        return parser.peek() != JsonToken.END_DOCUMENT;
      } catch (MalformedJsonException e) {
        throw new JsonSyntaxException(e);
      } catch (IOException e) {
        throw new JsonIOException(e);
      }
    }",method,
"  public void remove() {
    throw new UnsupportedOperationException();
  }",method,
"  public JsonSyntaxException(String msg) {
    super(msg);
  }",method,
"  public JsonSyntaxException(String msg, Throwable cause) {
    super(msg, cause);
  }",method,
"  public JsonSyntaxException(Throwable cause) {
    super(cause);
  }",method,
"  DEFAULT() {
    @Override public JsonElement serialize(Long value) {
      return new JsonPrimitive(value);
    }
  }",method,
"  STRING() {
    @Override public JsonElement serialize(Long value) {
      return new JsonPrimitive(String.valueOf(value));
    }
  }",method,
"public class SuperCacheActivity extends BaseActivity {
    @Bind(R.id.toolbar) Toolbar toolbar;
    @Bind(R.id.viewPager) ViewPager viewPager;
    @Bind(R.id.tab) TabLayout tab;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_super_cache);
        initToolBar(toolbar, true, ""强大的缓存"");
        NineGridView.setImageLoader(new GlideImageLoader());
        ArrayList<NewsTabFragment> fragments = new ArrayList<>();
        NewsTabFragment fragment1 = NewsTabFragment.newInstance();
        fragment1.setTitle(""Android"");
        fragments.add(fragment1);
        NewsTabFragment fragment2 = NewsTabFragment.newInstance();
        fragment2.setTitle(""iOS"");
        fragments.add(fragment2);
        NewsTabFragment fragment3 = NewsTabFragment.newInstance();
        fragment3.setTitle(""前端"");
        fragments.add(fragment3);
        MyPagerAdapter adapter = new MyPagerAdapter(getSupportFragmentManager(), fragments);
        viewPager.setAdapter(adapter);
        viewPager.setOffscreenPageLimit(fragments.size());
        tab.setupWithViewPager(viewPager);
    }
    @OnClick(R.id.fab)
    public void fab(View view) {
        WebActivity.runActivity(this, ""我的Github,欢迎star"", ""https://github.com/jeasonlzy"");
    }
    public class MyPagerAdapter extends FragmentPagerAdapter {
        private List<NewsTabFragment> fragments;
        public MyPagerAdapter(FragmentManager fm, List<NewsTabFragment> fragments) {
            super(fm);
            this.fragments = fragments;
        }
        @Override
        public CharSequence getPageTitle(int position) {
            return fragments.get(position).getTitle();
        }
        @Override
        public Fragment getItem(int position) {
            return fragments.get(position);
        }
        @Override
        public int getCount() {
            return fragments.size();
        }
    }
}",class,
"    public class MyPagerAdapter extends FragmentPagerAdapter {
        private List<NewsTabFragment> fragments;
        public MyPagerAdapter(FragmentManager fm, List<NewsTabFragment> fragments) {
            super(fm);
            this.fragments = fragments;
        }
        @Override
        public CharSequence getPageTitle(int position) {
            return fragments.get(position).getTitle();
        }
        @Override
        public Fragment getItem(int position) {
            return fragments.get(position);
        }
        @Override
        public int getCount() {
            return fragments.size();
        }
    }",class,
"    @Bind(R.id.toolbar) Toolbar toolbar;
    @Bind(R.id.viewPager) ViewPager viewPager;
    @Bind(R.id.tab) TabLayout tab;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_super_cache);
        initToolBar(toolbar, true, ""强大的缓存"");
        NineGridView.setImageLoader(new GlideImageLoader());
        ArrayList<NewsTabFragment> fragments = new ArrayList<>();
        NewsTabFragment fragment1 = NewsTabFragment.newInstance();
        fragment1.setTitle(""Android"");
        fragments.add(fragment1);
        NewsTabFragment fragment2 = NewsTabFragment.newInstance();
        fragment2.setTitle(""iOS"");
        fragments.add(fragment2);
        NewsTabFragment fragment3 = NewsTabFragment.newInstance();
        fragment3.setTitle(""前端"");
        fragments.add(fragment3);
        MyPagerAdapter adapter = new MyPagerAdapter(getSupportFragmentManager(), fragments);
        viewPager.setAdapter(adapter);
        viewPager.setOffscreenPageLimit(fragments.size());
        tab.setupWithViewPager(viewPager);
    }",method,
"    @OnClick(R.id.fab)
    public void fab(View view) {
        WebActivity.runActivity(this, ""我的Github,欢迎star"", ""https://github.com/jeasonlzy"");
    }",method,
"        public MyPagerAdapter(FragmentManager fm, List<NewsTabFragment> fragments) {
            super(fm);
            this.fragments = fragments;
        }",method,
"        @Override
        public CharSequence getPageTitle(int position) {
            return fragments.get(position).getTitle();
        }",method,
"        @Override
        public Fragment getItem(int position) {
            return fragments.get(position);
        }",method,
"        @Override
        public int getCount() {
            return fragments.size();
        }",method,
"public class SpringStatUtils {
    private final static Log LOG = LogFactory.getLog(SpringStatUtils.class);
    @SuppressWarnings(""unchecked"")
    public static List<Map<String, Object>> getMethodStatDataList(Object methodStat) {
        if (methodStat.getClass() == SpringStat.class) {
            return ((SpringStat) methodStat).getMethodStatDataList();
        }
        try {
            Method method = methodStat.getClass().getMethod(""getMethodStatDataList"");
            Object obj = method.invoke(methodStat);
            return (List<Map<String, Object>>) obj;
        } catch (Exception e) {
            LOG.error(""getMethodStatDataList error"", e);
            return null;
        }
    }
    @SuppressWarnings(""unchecked"")
    public static Map<String, Object> getMethodStatData(Object methodStat, String clazz, String methodSignature) {
        if (methodStat.getClass() == SpringStat.class) {
            return ((SpringStat) methodStat).getMethodStatData(clazz, methodSignature);
        }
        try {
            Method method = methodStat.getClass().getMethod(""getMethodStatData"", String.class, String.class);
            Object obj = method.invoke(methodStat, clazz, methodSignature);
            return (Map<String, Object>) obj;
        } catch (Exception e) {
            LOG.error(""getMethodStatDataList error"", e);
            return null;
        }
    }
    public static void reset(Object webStat) {
        if (webStat.getClass() == SpringStat.class) {
            ((SpringStat) webStat).reset();
            return;
        }
        try {
            Method method = webStat.getClass().getMethod(""reset"");
            method.invoke(webStat);
        } catch (Exception e) {
            LOG.error(""reset error"", e);
        }
    }
}",class,
"    @SuppressWarnings(""unchecked"")
    public static List<Map<String, Object>> getMethodStatDataList(Object methodStat) {
        if (methodStat.getClass() == SpringStat.class) {
            return ((SpringStat) methodStat).getMethodStatDataList();
        }
        try {
            Method method = methodStat.getClass().getMethod(""getMethodStatDataList"");
            Object obj = method.invoke(methodStat);
            return (List<Map<String, Object>>) obj;
        } catch (Exception e) {
            LOG.error(""getMethodStatDataList error"", e);
            return null;
        }
    }",method,
"    @SuppressWarnings(""unchecked"")
    public static Map<String, Object> getMethodStatData(Object methodStat, String clazz, String methodSignature) {
        if (methodStat.getClass() == SpringStat.class) {
            return ((SpringStat) methodStat).getMethodStatData(clazz, methodSignature);
        }
        try {
            Method method = methodStat.getClass().getMethod(""getMethodStatData"", String.class, String.class);
            Object obj = method.invoke(methodStat, clazz, methodSignature);
            return (Map<String, Object>) obj;
        } catch (Exception e) {
            LOG.error(""getMethodStatDataList error"", e);
            return null;
        }
    }",method,
"    public static void reset(Object webStat) {
        if (webStat.getClass() == SpringStat.class) {
            ((SpringStat) webStat).reset();
            return;
        }
        try {
            Method method = webStat.getClass().getMethod(""reset"");
            method.invoke(webStat);
        } catch (Exception e) {
            LOG.error(""reset error"", e);
        }
    }",method,
"public abstract class GroovyFix implements LocalQuickFix {
  public static final GroovyFix EMPTY_FIX = new GroovyFix() {
    @Override
    protected void doFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) throws IncorrectOperationException {
    }
    @NotNull
    @Override
    public String getFamilyName() {
      throw new UnsupportedOperationException();
    }
  };
  public static final GroovyFix[] EMPTY_ARRAY = new GroovyFix[0];
  @Override
  public void applyFix(@NotNull Project project,
                       @NotNull ProblemDescriptor descriptor) {
    final PsiElement problemElement = descriptor.getPsiElement();
    if (problemElement == null || !problemElement.isValid()) {
      return;
    }
    try {
      doFix(project, descriptor);
    } catch (IncorrectOperationException e) {
      final Class<? extends GroovyFix> aClass = getClass();
      final String className = aClass.getName();
      final Logger logger = Logger.getInstance(className);
      logger.error(e);
    }
  }
  protected abstract void doFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor)
      throws IncorrectOperationException;
  protected static void replaceExpression(GrExpression expression, String newExpression) {
    GrInspectionUtil.replaceExpression(expression, newExpression);
  }
  protected static void replaceStatement(GrStatement statement, String newStatement) {
    final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(statement.getProject());
    final GrStatement newCall = (GrStatement) factory.createTopElementFromText(newStatement);
    statement.replaceWithStatement(newCall);
  }
  protected static void replaceStatement(GrStatement oldStatement, GrStatement newStatement) throws IncorrectOperationException {
    if (newStatement instanceof GrBlockStatement) {
      GrBlockStatement blockStatement = (GrBlockStatement)newStatement;
      final GrOpenBlock openBlock = blockStatement.getBlock();
      final GrStatement[] statements = openBlock.getStatements();
      if (statements.length == 0) {
        oldStatement.removeStatement();
      }
      else {
        final PsiElement parent = oldStatement.getParent();
        if (parent instanceof GrStatementOwner) {
          GrStatementOwner statementOwner = (GrStatementOwner)parent;
          for (GrStatement statement : statements) {
            statementOwner.addStatementBefore(statement, oldStatement);
          }
          oldStatement.removeStatement();
        }
        else if (parent instanceof GrControlStatement) {
          oldStatement.replace(newStatement);
        }
      }
    }
    else {
      oldStatement.replaceWithStatement(newStatement);
    }
  }
}",class,
"    @Override
    protected void doFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) throws IncorrectOperationException {
    }",method,
"    @NotNull
    @Override
    public String getFamilyName() {
      throw new UnsupportedOperationException();
    }",method,
"  @Override
  public void applyFix(@NotNull Project project,
                       @NotNull ProblemDescriptor descriptor) {
    final PsiElement problemElement = descriptor.getPsiElement();
    if (problemElement == null || !problemElement.isValid()) {
      return;
    }
    try {
      doFix(project, descriptor);
    } catch (IncorrectOperationException e) {
      final Class<? extends GroovyFix> aClass = getClass();
      final String className = aClass.getName();
      final Logger logger = Logger.getInstance(className);
      logger.error(e);
    }
  }",method,
"  protected static void replaceExpression(GrExpression expression, String newExpression) {
    GrInspectionUtil.replaceExpression(expression, newExpression);
  }",method,
"  protected static void replaceStatement(GrStatement statement, String newStatement) {
    final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(statement.getProject());
    final GrStatement newCall = (GrStatement) factory.createTopElementFromText(newStatement);
    statement.replaceWithStatement(newCall);
  }",method,
"  protected static void replaceStatement(GrStatement oldStatement, GrStatement newStatement) throws IncorrectOperationException {
    if (newStatement instanceof GrBlockStatement) {
      GrBlockStatement blockStatement = (GrBlockStatement)newStatement;
      final GrOpenBlock openBlock = blockStatement.getBlock();
      final GrStatement[] statements = openBlock.getStatements();
      if (statements.length == 0) {
        oldStatement.removeStatement();
      }
      else {
        final PsiElement parent = oldStatement.getParent();
        if (parent instanceof GrStatementOwner) {
          GrStatementOwner statementOwner = (GrStatementOwner)parent;
          for (GrStatement statement : statements) {
            statementOwner.addStatementBefore(statement, oldStatement);
          }
          oldStatement.removeStatement();
        }
        else if (parent instanceof GrControlStatement) {
          oldStatement.replace(newStatement);
        }
      }
    }
    else {
      oldStatement.replaceWithStatement(newStatement);
    }
  }",method,
"    if (newStatement instanceof GrBlockStatement) {
      GrBlockStatement blockStatement = (GrBlockStatement)newStatement;
      final GrOpenBlock openBlock = blockStatement.getBlock();
      final GrStatement[] statements = openBlock.getStatements();
      if (statements.length == 0) {
        oldStatement.removeStatement();
      }
      else {
        final PsiElement parent = oldStatement.getParent();
        if (parent instanceof GrStatementOwner) {
          GrStatementOwner statementOwner = (GrStatementOwner)parent;
          for (GrStatement statement : statements) {
            statementOwner.addStatementBefore(statement, oldStatement);
          }
          oldStatement.removeStatement();
        }
        else if (parent instanceof GrControlStatement) {
          oldStatement.replace(newStatement);
        }
      }
    }",method,
"      if (statements.length == 0) {
        oldStatement.removeStatement();
      }",method,
"        if (parent instanceof GrStatementOwner) {
          GrStatementOwner statementOwner = (GrStatementOwner)parent;
          for (GrStatement statement : statements) {
            statementOwner.addStatementBefore(statement, oldStatement);
          }
          oldStatement.removeStatement();
        }",method,
"          for (GrStatement statement : statements) {
            statementOwner.addStatementBefore(statement, oldStatement);
          }",method,
"        else if (parent instanceof GrControlStatement) {
          oldStatement.replace(newStatement);
        }",method,
"public class TZlibTransport extends TIOStreamTransport {
    private TTransport transport_ = null;
    public static class Factory extends TTransportFactory {
        public Factory() {
        }
        @Override
        public TTransport getTransport(TTransport base) {
            return new TZlibTransport(base);
        }
    }
    public TZlibTransport(TTransport transport) {
        this(transport, Deflater.BEST_COMPRESSION);
    }
    public TZlibTransport(TTransport transport, int compressionLevel) {
        transport_ = transport;
        inputStream_ = new InflaterInputStream(new TTransportInputStream(transport_), new Inflater());
        outputStream_ = new DeflaterOutputStream(new TTransportOutputStream(transport_), new Deflater(compressionLevel, false), true);
    }
    @Override
    public boolean isOpen() {
        return transport_.isOpen();
    }
    @Override
    public void open() throws TTransportException {
        transport_.open();
    }
    @Override
    public void close() {
        super.close();
        if (transport_.isOpen()) {
            transport_.close();
        }
    }
}",class,
"    public static class Factory extends TTransportFactory {
        public Factory() {
        }
        @Override
        public TTransport getTransport(TTransport base) {
            return new TZlibTransport(base);
        }
    }",class,
"}
class TTransportInputStream extends InputStream {
    private TTransport transport = null;
    public TTransportInputStream(TTransport transport) {
        this.transport = transport;
    }
    @Override
    public int read() throws IOException {
        try {
            byte[] buf = new byte[1];
            transport.read(buf, 0, 1);
            return buf[0];
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }
    @Override
    public int read(byte b[], int off, int len) throws IOException {
        try {
            return transport.read(b, off, len);
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }
}",class,
"}
class TTransportOutputStream extends OutputStream {
    private TTransport transport = null;
    public TTransportOutputStream(TTransport transport) {
        this.transport = transport;
    }
    @Override
    public void write(final int b) throws IOException {
        try {
            transport.write(new byte[]{(byte) b});
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }
    @Override
    public void write(byte b[], int off, int len) throws IOException {
        try {
            transport.write(b, off, len);
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }
    @Override
    public void flush() throws IOException {
        try {
            transport.flush();
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }
}",class,
"        public Factory() {
        }",method,
"        @Override
        public TTransport getTransport(TTransport base) {
            return new TZlibTransport(base);
        }",method,
"    public TZlibTransport(TTransport transport) {
        this(transport, Deflater.BEST_COMPRESSION);
    }",method,
"    public TZlibTransport(TTransport transport, int compressionLevel) {
        transport_ = transport;
        inputStream_ = new InflaterInputStream(new TTransportInputStream(transport_), new Inflater());
        outputStream_ = new DeflaterOutputStream(new TTransportOutputStream(transport_), new Deflater(compressionLevel, false), true);
    }",method,
"    @Override
    public boolean isOpen() {
        return transport_.isOpen();
    }",method,
"    @Override
    public void open() throws TTransportException {
        transport_.open();
    }",method,
"    @Override
    public void close() {
        super.close();
        if (transport_.isOpen()) {
            transport_.close();
        }
    }",method,
"    public TTransportInputStream(TTransport transport) {
        this.transport = transport;
    }",method,
"    @Override
    public int read() throws IOException {
        try {
            byte[] buf = new byte[1];
            transport.read(buf, 0, 1);
            return buf[0];
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }",method,
"    @Override
    public int read(byte b[], int off, int len) throws IOException {
        try {
            return transport.read(b, off, len);
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }",method,
"    public TTransportOutputStream(TTransport transport) {
        this.transport = transport;
    }",method,
"    @Override
    public void write(final int b) throws IOException {
        try {
            transport.write(new byte[]{(byte) b});
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }",method,
"    @Override
    public void write(byte b[], int off, int len) throws IOException {
        try {
            transport.write(b, off, len);
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }",method,
"    @Override
    public void flush() throws IOException {
        try {
            transport.flush();
        } catch (TTransportException e) {
            throw new IOException(e);
        }
    }",method,
"  public void testParseSupported() throws Exception {
    for (TestHgVersion test : commonTests) {
      HgVersion version = HgVersion.parseVersionAndExtensionInfo(test.output, Collections.emptyList());
      assertEqualVersions(version, test);
      assertTrue(version.isSupported());
    }
  }",method,
"    for (TestHgVersion test : commonTests) {
      HgVersion version = HgVersion.parseVersionAndExtensionInfo(test.output, Collections.emptyList());
      assertEqualVersions(version, test);
      assertTrue(version.isSupported());
    }",method,
"  public void testParseUnsupported() throws Exception {
    TestHgVersion unsupportedVersion = new TestHgVersion(""Mercurial Distributed SCM (version 1.5.1)"", 1, 5, 1);
    HgVersion parsedVersion =
      HgVersion.parseVersionAndExtensionInfo(unsupportedVersion.output, Collections.emptyList());
    assertEqualVersions(parsedVersion, unsupportedVersion);
    assertFalse(parsedVersion.isSupported());
  }",method,
"public class ColorUtils {
	// ===========================================================
	// Constants
	// ===========================================================
	private static final float[] HSV_TO_COLOR = new float[3];
	private static final int HSV_TO_COLOR_HUE_INDEX = 0;
	private static final int HSV_TO_COLOR_SATURATION_INDEX = 1;
	private static final int HSV_TO_COLOR_VALUE_INDEX = 2;
	private static final int COLOR_FLOAT_TO_INT_FACTOR = 255;
	// ===========================================================
	// Fields
	// ===========================================================
	// ===========================================================
	// Constructors
	// ===========================================================
	// ===========================================================
	// Getter & Setter
	// ===========================================================
	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================
	public static int HSVToColor(final float pHue, final float pSaturation, final float pValue) {
		HSV_TO_COLOR[HSV_TO_COLOR_HUE_INDEX] = pHue;
		HSV_TO_COLOR[HSV_TO_COLOR_SATURATION_INDEX] = pSaturation;
		HSV_TO_COLOR[HSV_TO_COLOR_VALUE_INDEX] = pValue;
		return Color.HSVToColor(HSV_TO_COLOR);
	}
	public static int RGBToColor(final float pRed, final float pGreen, final float pBlue) {
		return Color.rgb((int)(pRed * COLOR_FLOAT_TO_INT_FACTOR), (int)(pGreen * COLOR_FLOAT_TO_INT_FACTOR), (int)(pBlue * COLOR_FLOAT_TO_INT_FACTOR));
	}
	// ===========================================================
	// Methods
	// ===========================================================
	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
}",class,
"public class DataUtils {
	// ===========================================================
	// Constants
	// ===========================================================
	// ===========================================================
	// Fields
	// ===========================================================
	// ===========================================================
	// Constructors
	// ===========================================================
	// ===========================================================
	// Getter & Setter
	// ===========================================================
	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================
	public static int unsignedByteToInt(final byte bByte) {
		return bByte & 0xFF;
	}
	// ===========================================================
	// Methods
	// ===========================================================
	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
}",class,
"	public static int HSVToColor(final float pHue, final float pSaturation, final float pValue) {
		HSV_TO_COLOR[HSV_TO_COLOR_HUE_INDEX] = pHue;
		HSV_TO_COLOR[HSV_TO_COLOR_SATURATION_INDEX] = pSaturation;
		HSV_TO_COLOR[HSV_TO_COLOR_VALUE_INDEX] = pValue;
		return Color.HSVToColor(HSV_TO_COLOR);
	}",method,
"	public static int RGBToColor(final float pRed, final float pGreen, final float pBlue) {
		return Color.rgb((int)(pRed * COLOR_FLOAT_TO_INT_FACTOR), (int)(pGreen * COLOR_FLOAT_TO_INT_FACTOR), (int)(pBlue * COLOR_FLOAT_TO_INT_FACTOR));
	}",method,
"	public static int unsignedByteToInt(final byte bByte) {
		return bByte & 0xFF;
	}",method,
"public class GetStoredScriptRequest extends MasterNodeReadRequest<GetStoredScriptRequest> {
    protected String id;
    GetStoredScriptRequest() {
        super();
    }
    public GetStoredScriptRequest(String id) {
        super();
        this.id = id;
    }
    public GetStoredScriptRequest(StreamInput in) throws IOException {
        super(in);
        if (in.getVersion().before(Version.V_6_0_0_alpha2)) {
            in.readString(); // read lang from previous versions
        }
        id = in.readString();
    }
    @Override
    public void writeTo(StreamOutput out) throws IOException {
        super.writeTo(out);
        if (out.getVersion().before(Version.V_6_0_0_alpha2)) {
            out.writeString(""""); // write an empty lang to previous versions
        }
        out.writeString(id);
    }
    @Override
    public ActionRequestValidationException validate() {
        ActionRequestValidationException validationException = null;
        if (id == null || id.isEmpty()) {
            validationException = addValidationError(""must specify id for stored script"", validationException);
        } else if (id.contains(""#"")) {
            validationException = addValidationError(""id cannot contain '#' for stored script"", validationException);
        }
        return validationException;
    }
    public String id() {
        return id;
    }
    public GetStoredScriptRequest id(String id) {
        this.id = id;
        return this;
    }
    @Override
    public void readFrom(StreamInput in) throws IOException {
        throw new UnsupportedOperationException(""usage of Streamable is to be replaced by Writeable"");
    }
    @Override
    public String toString() {
        return ""get script ["" + id + ""]"";
    }
}",class,
"    GetStoredScriptRequest() {
        super();
    }",method,
"    public GetStoredScriptRequest(String id) {
        super();
        this.id = id;
    }",method,
"    public GetStoredScriptRequest(StreamInput in) throws IOException {
        super(in);
        if (in.getVersion().before(Version.V_6_0_0_alpha2)) {
            in.readString(); // read lang from previous versions
        }
        id = in.readString();
    }",method,
"    @Override
    public void writeTo(StreamOutput out) throws IOException {
        super.writeTo(out);
        if (out.getVersion().before(Version.V_6_0_0_alpha2)) {
            out.writeString(""""); // write an empty lang to previous versions
        }
        out.writeString(id);
    }",method,
"    @Override
    public ActionRequestValidationException validate() {
        ActionRequestValidationException validationException = null;
        if (id == null || id.isEmpty()) {
            validationException = addValidationError(""must specify id for stored script"", validationException);
        } else if (id.contains(""#"")) {
            validationException = addValidationError(""id cannot contain '#' for stored script"", validationException);
        }
        return validationException;
    }",method,
"    public String id() {
        return id;
    }",method,
"    public GetStoredScriptRequest id(String id) {
        this.id = id;
        return this;
    }",method,
"    @Override
    public void readFrom(StreamInput in) throws IOException {
        throw new UnsupportedOperationException(""usage of Streamable is to be replaced by Writeable"");
    }",method,
"    @Override
    public String toString() {
        return ""get script ["" + id + ""]"";
    }",method,
"public class RuleKeyFieldLoader {
  private final int seed;
  public RuleKeyFieldLoader(int seed) {
    this.seed = seed;
  }
  void setFields(RuleKeyObjectSink builder, BuildRule buildRule, RuleKeyType ruleKeyType) {
    // ""."" is not a valid first character for a field name, nor a valid character for rule attribute
    // name and so the following fields will never collide with other stuff.
    builder.setReflectively("".cache_key_seed"", seed);
    builder.setReflectively("".target_name"", buildRule.getBuildTarget().getFullyQualifiedName());
    builder.setReflectively("".build_rule_type"", buildRule.getType());
    builder.setReflectively("".buckversion"", BuckVersion.getVersion());
    builder.setReflectively("".rule_key_type"", ruleKeyType);
    // We currently cache items using their full buck-out path, so make sure this is reflected in
    // the rule key.
    Path buckOutPath = buildRule.getProjectFilesystem().getBuckPaths().getConfiguredBuckOut();
    builder.setReflectively("".out"", buckOutPath.toString());
    // Add in any extra details to the rule key via the rule's `appendToRuleKey` method.
    buildRule.appendToRuleKey(builder);
    // We used to require build rules to piggyback on the `RuleKeyAppendable` type to add in
    // additional details, but have since switched to using a method in the build rule class, so
    // error out if we see the `RuleKeyAppendable` being used improperly.
    Preconditions.checkArgument(!(builder instanceof RuleKeyAppendable));
    AlterRuleKeys.amendKey(builder, buildRule);
  }
}",class,
"public class RuleKeyResult<R> {
  public final R result;
  public final Iterable<?> deps;
  public final Iterable<RuleKeyInput> inputs;
  RuleKeyResult(R result, Iterable<?> deps, Iterable<RuleKeyInput> inputs) {
    this.result = result;
    this.deps = deps;
    this.inputs = inputs;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleKeyResult<?> that = (RuleKeyResult<?>) o;
    if (!result.equals(that.result)) {
      return false;
    }
    if (!deps.equals(that.deps)) {
      return false;
    }
    return inputs.equals(that.inputs);
  }
  @Override
  public int hashCode() {
    int result1 = result.hashCode();
    result1 = 31 * result1 + deps.hashCode();
    result1 = 31 * result1 + inputs.hashCode();
    return result1;
  }
}",class,
"  public RuleKeyFieldLoader(int seed) {
    this.seed = seed;
  }",method,
"  void setFields(RuleKeyObjectSink builder, BuildRule buildRule, RuleKeyType ruleKeyType) {
    // ""."" is not a valid first character for a field name, nor a valid character for rule attribute
    // name and so the following fields will never collide with other stuff.
    builder.setReflectively("".cache_key_seed"", seed);
    builder.setReflectively("".target_name"", buildRule.getBuildTarget().getFullyQualifiedName());
    builder.setReflectively("".build_rule_type"", buildRule.getType());
    builder.setReflectively("".buckversion"", BuckVersion.getVersion());
    builder.setReflectively("".rule_key_type"", ruleKeyType);
    // We currently cache items using their full buck-out path, so make sure this is reflected in
    // the rule key.
    Path buckOutPath = buildRule.getProjectFilesystem().getBuckPaths().getConfiguredBuckOut();
    builder.setReflectively("".out"", buckOutPath.toString());
    // Add in any extra details to the rule key via the rule's `appendToRuleKey` method.
    buildRule.appendToRuleKey(builder);
    // We used to require build rules to piggyback on the `RuleKeyAppendable` type to add in
    // additional details, but have since switched to using a method in the build rule class, so
    // error out if we see the `RuleKeyAppendable` being used improperly.
    Preconditions.checkArgument(!(builder instanceof RuleKeyAppendable));
    AlterRuleKeys.amendKey(builder, buildRule);
  }",method,
"  RuleKeyResult(R result, Iterable<?> deps, Iterable<RuleKeyInput> inputs) {
    this.result = result;
    this.deps = deps;
    this.inputs = inputs;
  }",method,
"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleKeyResult<?> that = (RuleKeyResult<?>) o;
    if (!result.equals(that.result)) {
      return false;
    }
    if (!deps.equals(that.deps)) {
      return false;
    }
    return inputs.equals(that.inputs);
  }",method,
"    if (this == o) {
      return true;
    }",method,
"  @Override
  public int hashCode() {
    int result1 = result.hashCode();
    result1 = 31 * result1 + deps.hashCode();
    result1 = 31 * result1 + inputs.hashCode();
    return result1;
  }",method,
"public class DefaultDebugUIEnvironment implements DebugUIEnvironment {
  private final ExecutionEnvironment myExecutionEnvironment;
  private final DebugEnvironment myModelEnvironment;
  public DefaultDebugUIEnvironment(@NotNull ExecutionEnvironment environment,
                                   RunProfileState state,
                                   RemoteConnection remoteConnection,
                                   boolean pollConnection) {
    myExecutionEnvironment = environment;
    myModelEnvironment = new DefaultDebugEnvironment(environment, state, remoteConnection, pollConnection);
  }
  @Override
  public DebugEnvironment getEnvironment() {
    return myModelEnvironment;
  }
  @Nullable
  @Override
  public RunContentDescriptor getReuseContent() {
    return myExecutionEnvironment.getContentToReuse();
  }
  @Override
  public Icon getIcon() {
    return getRunProfile().getIcon();
  }
  @Override
  public void initActions(RunContentDescriptor content, DefaultActionGroup actionGroup) {
    Executor executor = myExecutionEnvironment.getExecutor();
    actionGroup.add(ActionManager.getInstance().getAction(IdeActions.ACTION_RERUN), Constraints.FIRST);
    actionGroup.add(new CloseAction(executor, content, myExecutionEnvironment.getProject()));
    actionGroup.add(new ContextHelpAction(executor.getHelpId()));
  }
  @Override
  @NotNull
  public RunProfile getRunProfile() {
    return myExecutionEnvironment.getRunProfile();
  }
}",class,
"  public DefaultDebugUIEnvironment(@NotNull ExecutionEnvironment environment,
                                   RunProfileState state,
                                   RemoteConnection remoteConnection,
                                   boolean pollConnection) {
    myExecutionEnvironment = environment;
    myModelEnvironment = new DefaultDebugEnvironment(environment, state, remoteConnection, pollConnection);
  }",method,
"  @Override
  public DebugEnvironment getEnvironment() {
    return myModelEnvironment;
  }",method,
"  @Nullable
  @Override
  public RunContentDescriptor getReuseContent() {
    return myExecutionEnvironment.getContentToReuse();
  }",method,
"  @Override
  public Icon getIcon() {
    return getRunProfile().getIcon();
  }",method,
"  @Override
  public void initActions(RunContentDescriptor content, DefaultActionGroup actionGroup) {
    Executor executor = myExecutionEnvironment.getExecutor();
    actionGroup.add(ActionManager.getInstance().getAction(IdeActions.ACTION_RERUN), Constraints.FIRST);
    actionGroup.add(new CloseAction(executor, content, myExecutionEnvironment.getProject()));
    actionGroup.add(new ContextHelpAction(executor.getHelpId()));
  }",method,
"  @Override
  @NotNull
  public RunProfile getRunProfile() {
    return myExecutionEnvironment.getRunProfile();
  }",method,
"public class JSONLexerTest_2 extends TestCase {
    public void test_0() throws Exception {
        VO vo = (VO) JSON.parseObject(""{\""@type\"":\""com.alibaba.json.bvt.parser.JSONLexerTest_2$VO\""}"", VO.class);
        Assert.assertNotNull(vo);
    }
    public void test_1() throws Exception {
        Exception error = null;
        try {
            JSON.parseObject(""{\""@type\"":\""com.alibaba.json.bvt.parser.JSONLexerTest_2$VO1\""}"", VO.class);
        } catch (JSONException ex) {
            error = ex;
        }
        Assert.assertNotNull(error);
    }
    public void test_2() throws Exception {
        Exception error = null;
        try {
            JSON.parseObject(""{\""@type\"":\""com.alibaba.json.bvt.parser.JSONLexerTest_2$A\""}"", VO.class);
        } catch (JSONException ex) {
            error = ex;
        }
        Assert.assertNotNull(error);
    }
    public void test_a() throws Exception {
        P a = JSON.parseObject(""{\""vo\"":{\""@type\"":\""com.alibaba.json.bvt.parser.JSONLexerTest_2$VO\""}}"", P.class);
        Assert.assertNotNull(a);
    }
    public void test_list() throws Exception {
        List<VO> list = JSON.parseObject(""[{\""@type\"":\""com.alibaba.json.bvt.parser.JSONLexerTest_2$VO\""}]"",
                                         new TypeReference<List<VO>>() {
                                         });
        Assert.assertNotNull(list);
        Assert.assertNotNull(list.get(0));
    }
    public void test_list_2() throws Exception {
        List<VO> list = JSON.parseObject(""[{\""@type\"":\""com.alibaba.json.bvt.parser.JSONLexerTest_2$VO\""},{}]"",
                                         new TypeReference<List<VO>>() {
                                         });
        Assert.assertNotNull(list);
        Assert.assertEquals(2, list.size());
        Assert.assertNotNull(list.get(0));
        Assert.assertNotNull(list.get(1));
    }
    public void test_error() throws Exception {
        Exception error = null;
        try {
            JSON.parseObject(""[{\""@type\"":\""com.alibaba.json.bvt.parser.JSONLexerTest_2$VO\""}[]"",
                             new TypeReference<List<VO>>() {
                             });
        } catch (Exception ex) {
            error = ex;
        }
        Assert.assertNotNull(error);
    }
    public static class P {
        private VO vo;
        public VO getVo() {
            return vo;
        }
        public void setVo(VO vo) {
            this.vo = vo;
        }
    }
    public static class VO {
        private int id;
        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }
    }
    public static class VO1 {
        private int id;
        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }
    }
    public static class A {
        private int id;
        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }
    }
}",class,
"    public static class P {
        private VO vo;
        public VO getVo() {
            return vo;
        }
        public void setVo(VO vo) {
            this.vo = vo;
        }
    }",class,
"    public static class VO {
        private int id;
        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }
    }",class,
"    public static class VO1 {
        private int id;
        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }
    }",class,
