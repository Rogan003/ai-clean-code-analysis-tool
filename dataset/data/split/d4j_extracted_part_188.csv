code_snippet,type,score
"public class MyActivity extends AppCompatActivity {
    private static final String TAG = ""MyActivity"";
    private ViewPager mViewPager;
    private FragmentStatePagerAdapter mFragmentStatePagerAdapter = new FragmentStatePagerAdapter(getSupportFragmentManager()) {
        @Override
        public int getCount() {
            return 2;
        }
        @Override
        public Fragment getItem(int position) {
            if (position == 0) {
                return new InstalledFragment();
            } else {
                return new ApkFragment();
            }
        }
        @Override
        public CharSequence getPageTitle(int position) {
            if (position == 0) {
                return ""已安装"";
            } else {
                return ""待安装"";
            }
        }
    };
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mFragmentStatePagerAdapter);
//        getPerms();
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
    private void getPerms() {
        final PackageManager pm = getPackageManager();
        final List<PackageInfo> pkgs = pm.getInstalledPackages(PackageManager.GET_PERMISSIONS);
        new Thread() {
            @Override
            public void run() {
                try {
                    StringBuilder sb = new StringBuilder();
                    Log.e(TAG, ""===========包权限start==========="");
                    Set<String> ps = new TreeSet<String>();
                    for (PackageInfo pkg : pkgs) {
                        if (pkg.permissions != null && pkg.permissions.length > 0) {
                            for (PermissionInfo permission : pkg.permissions) {
                                ps.add(permission.name);
                            }
                        }
                    }
                    for (String p : ps) {
                        PermissionInfo permission = pm.getPermissionInfo(p, 0);
                        PackageInfo pkg = pm.getPackageInfo(permission.packageName, 0);
                        String re = String.format(""<uses-permission android:name=\""%s\""/>"", permission.name);
                        String ms = String.format(""%s,%s,%s,%s,%s,%s,%s,%s"", permission.packageName, pkg.applicationInfo.loadLabel(pm), permission.name, permission.group, permission.protectionLevel, permission.loadLabel(pm), permission.loadDescription(pm), re);
                        sb.append(ms).append(""\r\n"");
                        Log.e(TAG, ""packageName=%s, name=%s group=%s protectionLevel=%s"", permission.packageName, permission.name, permission.group, permission.protectionLevel);
                    }
                    FileWriter w = null;
                    try {
                        w = new FileWriter(new File(Environment.getExternalStorageDirectory(), ""per.txt""));
                        w.write(sb.toString());
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        if (w != null) {
                            try {
                                w.close();
                            } catch (IOException e) {
                            }
                        }
                    }
                    Log.e(TAG, ""===========包权限end==========="");
                } catch (NameNotFoundException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }
}",class,
"        @Override
        public int getCount() {
            return 2;
        }",method,
"        @Override
        public Fragment getItem(int position) {
            if (position == 0) {
                return new InstalledFragment();
            } else {
                return new ApkFragment();
            }
        }",method,
"            if (position == 0) {
                return new InstalledFragment();
            }",method,
"        @Override
        public CharSequence getPageTitle(int position) {
            if (position == 0) {
                return ""已安装"";
            } else {
                return ""待安装"";
            }
        }",method,
"            if (position == 0) {
                return ""已安装"";
            }",method,
"    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mFragmentStatePagerAdapter);
//        getPerms();
    }",method,
"    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }",method,
"    private void getPerms() {
        final PackageManager pm = getPackageManager();
        final List<PackageInfo> pkgs = pm.getInstalledPackages(PackageManager.GET_PERMISSIONS);
        new Thread() {
            @Override
            public void run() {
                try {
                    StringBuilder sb = new StringBuilder();
                    Log.e(TAG, ""===========包权限start==========="");
                    Set<String> ps = new TreeSet<String>();
                    for (PackageInfo pkg : pkgs) {
                        if (pkg.permissions != null && pkg.permissions.length > 0) {
                            for (PermissionInfo permission : pkg.permissions) {
                                ps.add(permission.name);
                            }
                        }
                    }
                    for (String p : ps) {
                        PermissionInfo permission = pm.getPermissionInfo(p, 0);
                        PackageInfo pkg = pm.getPackageInfo(permission.packageName, 0);
                        String re = String.format(""<uses-permission android:name=\""%s\""/>"", permission.name);
                        String ms = String.format(""%s,%s,%s,%s,%s,%s,%s,%s"", permission.packageName, pkg.applicationInfo.loadLabel(pm), permission.name, permission.group, permission.protectionLevel, permission.loadLabel(pm), permission.loadDescription(pm), re);
                        sb.append(ms).append(""\r\n"");
                        Log.e(TAG, ""packageName=%s, name=%s group=%s protectionLevel=%s"", permission.packageName, permission.name, permission.group, permission.protectionLevel);
                    }
                    FileWriter w = null;
                    try {
                        w = new FileWriter(new File(Environment.getExternalStorageDirectory(), ""per.txt""));
                        w.write(sb.toString());
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        if (w != null) {
                            try {
                                w.close();
                            } catch (IOException e) {
                            }
                        }
                    }
                    Log.e(TAG, ""===========包权限end==========="");
                } catch (NameNotFoundException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }",method,
"        new Thread() {
            @Override
            public void run() {
                try {
                    StringBuilder sb = new StringBuilder();
                    Log.e(TAG, ""===========包权限start==========="");
                    Set<String> ps = new TreeSet<String>();
                    for (PackageInfo pkg : pkgs) {
                        if (pkg.permissions != null && pkg.permissions.length > 0) {
                            for (PermissionInfo permission : pkg.permissions) {
                                ps.add(permission.name);
                            }
                        }
                    }
                    for (String p : ps) {
                        PermissionInfo permission = pm.getPermissionInfo(p, 0);
                        PackageInfo pkg = pm.getPackageInfo(permission.packageName, 0);
                        String re = String.format(""<uses-permission android:name=\""%s\""/>"", permission.name);
                        String ms = String.format(""%s,%s,%s,%s,%s,%s,%s,%s"", permission.packageName, pkg.applicationInfo.loadLabel(pm), permission.name, permission.group, permission.protectionLevel, permission.loadLabel(pm), permission.loadDescription(pm), re);
                        sb.append(ms).append(""\r\n"");
                        Log.e(TAG, ""packageName=%s, name=%s group=%s protectionLevel=%s"", permission.packageName, permission.name, permission.group, permission.protectionLevel);
                    }
                    FileWriter w = null;
                    try {
                        w = new FileWriter(new File(Environment.getExternalStorageDirectory(), ""per.txt""));
                        w.write(sb.toString());
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        if (w != null) {
                            try {
                                w.close();
                            } catch (IOException e) {
                            }
                        }
                    }
                    Log.e(TAG, ""===========包权限end==========="");
                } catch (NameNotFoundException e) {
                    e.printStackTrace();
                }
            }
        }",method,
"            @Override
            public void run() {
                try {
                    StringBuilder sb = new StringBuilder();
                    Log.e(TAG, ""===========包权限start==========="");
                    Set<String> ps = new TreeSet<String>();
                    for (PackageInfo pkg : pkgs) {
                        if (pkg.permissions != null && pkg.permissions.length > 0) {
                            for (PermissionInfo permission : pkg.permissions) {
                                ps.add(permission.name);
                            }
                        }
                    }
                    for (String p : ps) {
                        PermissionInfo permission = pm.getPermissionInfo(p, 0);
                        PackageInfo pkg = pm.getPackageInfo(permission.packageName, 0);
                        String re = String.format(""<uses-permission android:name=\""%s\""/>"", permission.name);
                        String ms = String.format(""%s,%s,%s,%s,%s,%s,%s,%s"", permission.packageName, pkg.applicationInfo.loadLabel(pm), permission.name, permission.group, permission.protectionLevel, permission.loadLabel(pm), permission.loadDescription(pm), re);
                        sb.append(ms).append(""\r\n"");
                        Log.e(TAG, ""packageName=%s, name=%s group=%s protectionLevel=%s"", permission.packageName, permission.name, permission.group, permission.protectionLevel);
                    }
                    FileWriter w = null;
                    try {
                        w = new FileWriter(new File(Environment.getExternalStorageDirectory(), ""per.txt""));
                        w.write(sb.toString());
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        if (w != null) {
                            try {
                                w.close();
                            } catch (IOException e) {
                            }
                        }
                    }
                    Log.e(TAG, ""===========包权限end==========="");
                } catch (NameNotFoundException e) {
                    e.printStackTrace();
                }
            }",method,
"                    for (PackageInfo pkg : pkgs) {
                        if (pkg.permissions != null && pkg.permissions.length > 0) {
                            for (PermissionInfo permission : pkg.permissions) {
                                ps.add(permission.name);
                            }
                        }
                    }",method,
"                        if (pkg.permissions != null && pkg.permissions.length > 0) {
                            for (PermissionInfo permission : pkg.permissions) {
                                ps.add(permission.name);
                            }
                        }",method,
"                            for (PermissionInfo permission : pkg.permissions) {
                                ps.add(permission.name);
                            }",method,
"                    for (String p : ps) {
                        PermissionInfo permission = pm.getPermissionInfo(p, 0);
                        PackageInfo pkg = pm.getPackageInfo(permission.packageName, 0);
                        String re = String.format(""<uses-permission android:name=\""%s\""/>"", permission.name);
                        String ms = String.format(""%s,%s,%s,%s,%s,%s,%s,%s"", permission.packageName, pkg.applicationInfo.loadLabel(pm), permission.name, permission.group, permission.protectionLevel, permission.loadLabel(pm), permission.loadDescription(pm), re);
                        sb.append(ms).append(""\r\n"");
                        Log.e(TAG, ""packageName=%s, name=%s group=%s protectionLevel=%s"", permission.packageName, permission.name, permission.group, permission.protectionLevel);
                    }",method,
"                        if (w != null) {
                            try {
                                w.close();
                            } catch (IOException e) {
                            }
                        }",method,
"public class FeatureInfo implements Parcelable {
    public String name;
    public int version;
    public static final int GL_ES_VERSION_UNDEFINED = 0;
    public int reqGlEsVersion;
    public static final int FLAG_REQUIRED = 0x0001;
    public int flags;
    public FeatureInfo() {
    }
    public FeatureInfo(FeatureInfo orig) {
        name = orig.name;
        version = orig.version;
        reqGlEsVersion = orig.reqGlEsVersion;
        flags = orig.flags;
    }
    @Override
    public String toString() {
        if (name != null) {
            return ""FeatureInfo{""
                    + Integer.toHexString(System.identityHashCode(this))
                    + "" "" + name + "" v="" + version + "" fl=0x"" + Integer.toHexString(flags) + ""}"";
        } else {
            return ""FeatureInfo{""
                    + Integer.toHexString(System.identityHashCode(this))
                    + "" glEsVers="" + getGlEsVersion()
                    + "" fl=0x"" + Integer.toHexString(flags) + ""}"";
        }
    }
    @Override
    public int describeContents() {
        return 0;
    }
    @Override
    public void writeToParcel(Parcel dest, int parcelableFlags) {
        dest.writeString(name);
        dest.writeInt(version);
        dest.writeInt(reqGlEsVersion);
        dest.writeInt(flags);
    }
    public static final Creator<FeatureInfo> CREATOR = new Creator<FeatureInfo>() {
        @Override
        public FeatureInfo createFromParcel(Parcel source) {
            return new FeatureInfo(source);
        }
        @Override
        public FeatureInfo[] newArray(int size) {
            return new FeatureInfo[size];
        }
    };
    private FeatureInfo(Parcel source) {
        name = source.readString();
        version = source.readInt();
        reqGlEsVersion = source.readInt();
        flags = source.readInt();
    }
    public String getGlEsVersion() {
        int major = ((reqGlEsVersion & 0xffff0000) >> 16);
        int minor = reqGlEsVersion & 0x0000ffff;
        return String.valueOf(major)+"".""+String.valueOf(minor);
    }
}",class,
"    public FeatureInfo() {
    }",method,
"    public FeatureInfo(FeatureInfo orig) {
        name = orig.name;
        version = orig.version;
        reqGlEsVersion = orig.reqGlEsVersion;
        flags = orig.flags;
    }",method,
"    @Override
    public String toString() {
        if (name != null) {
            return ""FeatureInfo{""
                    + Integer.toHexString(System.identityHashCode(this))
                    + "" "" + name + "" v="" + version + "" fl=0x"" + Integer.toHexString(flags) + ""}"";
        } else {
            return ""FeatureInfo{""
                    + Integer.toHexString(System.identityHashCode(this))
                    + "" glEsVers="" + getGlEsVersion()
                    + "" fl=0x"" + Integer.toHexString(flags) + ""}"";
        }
    }",method,
"        if (name != null) {
            return ""FeatureInfo{""
                    + Integer.toHexString(System.identityHashCode(this))
                    + "" "" + name + "" v="" + version + "" fl=0x"" + Integer.toHexString(flags) + ""}"";
        }",method,
"    @Override
    public int describeContents() {
        return 0;
    }",method,
"    @Override
    public void writeToParcel(Parcel dest, int parcelableFlags) {
        dest.writeString(name);
        dest.writeInt(version);
        dest.writeInt(reqGlEsVersion);
        dest.writeInt(flags);
    }",method,
"        @Override
        public FeatureInfo createFromParcel(Parcel source) {
            return new FeatureInfo(source);
        }",method,
"        @Override
        public FeatureInfo[] newArray(int size) {
            return new FeatureInfo[size];
        }",method,
"    private FeatureInfo(Parcel source) {
        name = source.readString();
        version = source.readInt();
        reqGlEsVersion = source.readInt();
        flags = source.readInt();
    }",method,
"    public String getGlEsVersion() {
        int major = ((reqGlEsVersion & 0xffff0000) >> 16);
        int minor = reqGlEsVersion & 0x0000ffff;
        return String.valueOf(major)+"".""+String.valueOf(minor);
    }",method,
"public class EPAvailabilityListenerExtension implements PluginAware {
  public static final String EXTENSION_POINT_NAME = ""com.intellij.openapi.extensions.epAvailabilityListener"";
  private String myExtensionPointName;
  private String myListenerClass;
  private PluginDescriptor myPluginDescriptor;
  public EPAvailabilityListenerExtension() {
  }
  public EPAvailabilityListenerExtension(@NotNull String extensionPointName, @NotNull String listenerClass) {
    myExtensionPointName = extensionPointName;
    myListenerClass = listenerClass;
  }
  @NotNull
  public String getExtensionPointName() {
    return myExtensionPointName;
  }
  public void setExtensionPointName(@NotNull String extensionPointName) {
    myExtensionPointName = extensionPointName;
  }
  @NotNull
  public String getListenerClass() {
    return myListenerClass;
  }
  public void setListenerClass(@NotNull String listenerClass) {
    myListenerClass = listenerClass;
  }
  @Override
  public void setPluginDescriptor(PluginDescriptor pluginDescriptor) {
    myPluginDescriptor = pluginDescriptor;
  }
  public PluginDescriptor getPluginDescriptor() {
    return myPluginDescriptor;
  }
  public Class loadListenerClass() throws ClassNotFoundException {
    if (myPluginDescriptor != null && myPluginDescriptor.getPluginClassLoader() != null) {
      return Class.forName(getListenerClass(), true, myPluginDescriptor.getPluginClassLoader());
    }
    else {
      return Class.forName(getListenerClass());
    }
  }
}",class,
"  public EPAvailabilityListenerExtension() {
  }",method,
"  public EPAvailabilityListenerExtension(@NotNull String extensionPointName, @NotNull String listenerClass) {
    myExtensionPointName = extensionPointName;
    myListenerClass = listenerClass;
  }",method,
"  @NotNull
  public String getExtensionPointName() {
    return myExtensionPointName;
  }",method,
"  public void setExtensionPointName(@NotNull String extensionPointName) {
    myExtensionPointName = extensionPointName;
  }",method,
"  @NotNull
  public String getListenerClass() {
    return myListenerClass;
  }",method,
"  public void setListenerClass(@NotNull String listenerClass) {
    myListenerClass = listenerClass;
  }",method,
"  @Override
  public void setPluginDescriptor(PluginDescriptor pluginDescriptor) {
    myPluginDescriptor = pluginDescriptor;
  }",method,
"  public PluginDescriptor getPluginDescriptor() {
    return myPluginDescriptor;
  }",method,
"  public Class loadListenerClass() throws ClassNotFoundException {
    if (myPluginDescriptor != null && myPluginDescriptor.getPluginClassLoader() != null) {
      return Class.forName(getListenerClass(), true, myPluginDescriptor.getPluginClassLoader());
    }
    else {
      return Class.forName(getListenerClass());
    }
  }",method,
"import java.util.Set;
class Java8Private {
  public static void main(String[] args) {
    new Java8Private().foo();
  }
  private void foo() {
    final Map<Integer,Integer> map = new HashMap<Integer,Integer>();
    map.put(1, 2);
    //evaluate here  map.entrySet().stream().filter((a) -> (a.getKey()>0));
    <caret>new Inner(map).invoke();
    map.put(3, 5);
  }
  private void zoo(int a) {
    System.out.println(""DONE "" + a);
  }
  public class Inner extends MagicAccessorBridge {
    final Map<Integer,Integer> map;
    public Inner(Map<Integer, Integer> map) {
      this.map = map;
    }
    void invoke() {
      map.entrySet().stream().forEach((a) -> accessorZoo(Java8Private.this, a.getValue()));
    }
    // accessor
    void accessorZoo(Java8Private obj, int a) {
      obj.zoo(a);
    }
  }
}",class,
"  public class Inner extends MagicAccessorBridge {
    final Map<Integer,Integer> map;
    public Inner(Map<Integer, Integer> map) {
      this.map = map;
    }
    void invoke() {
      map.entrySet().stream().forEach((a) -> accessorZoo(Java8Private.this, a.getValue()));
    }
    // accessor
    void accessorZoo(Java8Private obj, int a) {
      obj.zoo(a);
    }
  }",class,
"}
class MagicAccessorBridge {
}",class,
"}class Sample {
  void a() {
    System.out.println("""");
  <caret>}
  private int foo() {
    return 1;
  }
}",class,
"}
class Sample {
  void a() {
      class Local {
      <caret>}
  }
  private int foo() {
    return 1;
  }
}",class,
"      class Local {
      <caret>}",class,
"}
class Sample {
  static {<caret>}
  int foo() {
    return 1;
  }
}",class,
"}
class Sample {
  int <caret>i = 0;
  int foo() {
    return 1;
  }
}",class,
"}
class Sample {
  pri<caret>vate int field;
  int foo() {
    return 1;
  }
}",class,
"}class Sample {
  public Sample() {
    <caret>super();
  }
  int foo() {
    return 1;
  }
}",class,
"}
class Sample {
  void a() {
    System.out.println(""<caret>"");
  }
  private int foo() {
    return 1;
  }
}",class,
"}
class Sample {
  void a() {
    System.out.println(""<caret>"");
  }
  int foo() {
    return 1;
  }
}",class,
"}
class Sample {
  void foo() {
    System.out.println(""hello <caret>world"");
  }
}",class,
"}public class Sample extends Base {
  public static void main(String[] args) {
    new Sample().foo();
  }
  void foo() {
    List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
    list.for<caret>Each(i -> {
      new Runnable() {
        int xxx = 0;
        @Override
        public void run() {
          this.xxx = 5; // this stays the same
        }
      }.run();
      this.a++;  // have to be qualified
      super.foo();  // have to be qualified
      a++;
      foo();
    });
    System.out.println(a);
  }
}",class,
"}
class Base {
  void foo() {
  }
}",class,
"  public static void main(String[] args) {
    new Java8Private().foo();
  }",method,
"  private void foo() {
    final Map<Integer,Integer> map = new HashMap<Integer,Integer>();
    map.put(1, 2);
    //evaluate here  map.entrySet().stream().filter((a) -> (a.getKey()>0));
    <caret>new Inner(map).invoke();
    map.put(3, 5);
  }",method,
"  private void zoo(int a) {
    System.out.println(""DONE "" + a);
  }",method,
"    public Inner(Map<Integer, Integer> map) {
      this.map = map;
    }",method,
"    void invoke() {
      map.entrySet().stream().forEach((a) -> accessorZoo(Java8Private.this, a.getValue()));
    }",method,
"    void accessorZoo(Java8Private obj, int a) {
      obj.zoo(a);
    }",method,
"  void a() {
    System.out.println("""");
  <caret>}",method,
"  private int foo() {
    return 1;
  }",method,
"  void a() {
      class Local {
      <caret>}
  }",method,
"  private int foo() {
    return 1;
  }",method,
"  int foo() {
    return 1;
  }",method,
"  int foo() {
    return 1;
  }",method,
"  int foo() {
    return 1;
  }",method,
"  public Sample() {
    <caret>super();
  }",method,
"  int foo() {
    return 1;
  }",method,
"  void a() {
    System.out.println(""<caret>"");
  }",method,
"  private int foo() {
    return 1;
  }",method,
"  void a() {
    System.out.println(""<caret>"");
  }",method,
"  int foo() {
    return 1;
  }",method,
"  void foo() {
    System.out.println(""hello <caret>world"");
  }",method,
"  public static void main(String[] args) {
    new Sample().foo();
  }",method,
"  void foo() {
    List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
    list.for<caret>Each(i -> {
      new Runnable() {
        int xxx = 0;
        @Override
        public void run() {
          this.xxx = 5; // this stays the same
        }
      }.run();
      this.a++;  // have to be qualified
      super.foo();  // have to be qualified
      a++;
      foo();
    });
    System.out.println(a);
  }",method,
"    list.for<caret>Each(i -> {
      new Runnable() {
        int xxx = 0;
        @Override
        public void run() {
          this.xxx = 5; // this stays the same
        }
      }",method,
"        @Override
        public void run() {
          this.xxx = 5; // this stays the same
        }",method,
"  void foo() {
  }",method,
"public class AndroidFindUsagesTestGenerated extends AbstractAndroidFindUsagesTest {
    public void testAllFilesPresentInFindUsages() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages""), Pattern.compile(""^([^\\.]+)$""), TargetBackend.ANY, false);
    }
    @TestMetadata(""fqNameInAttr"")
    public void testFqNameInAttr() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInAttr/"");
        doTest(fileName);
    }
    @TestMetadata(""fqNameInAttrFragment"")
    public void testFqNameInAttrFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInAttrFragment/"");
        doTest(fileName);
    }
    @TestMetadata(""fqNameInTag"")
    public void testFqNameInTag() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInTag/"");
        doTest(fileName);
    }
    @TestMetadata(""fqNameInTagFragment"")
    public void testFqNameInTagFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInTagFragment/"");
        doTest(fileName);
    }
    @TestMetadata(""multiFile"")
    public void testMultiFile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/multiFile/"");
        doTest(fileName);
    }
    @TestMetadata(""multiFileFragment"")
    public void testMultiFileFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/multiFileFragment/"");
        doTest(fileName);
    }
    @TestMetadata(""simple"")
    public void testSimple() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/simple/"");
        doTest(fileName);
    }
    @TestMetadata(""simpleFragment"")
    public void testSimpleFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/simpleFragment/"");
        doTest(fileName);
    }
    @TestMetadata(""simpleView"")
    public void testSimpleView() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/simpleView/"");
        doTest(fileName);
    }
    @TestMetadata(""wrongIdFormat"")
    public void testWrongIdFormat() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/wrongIdFormat/"");
        doTest(fileName);
    }
}",class,
"    public void testAllFilesPresentInFindUsages() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages""), Pattern.compile(""^([^\\.]+)$""), TargetBackend.ANY, false);
    }",method,
"    @TestMetadata(""fqNameInAttr"")
    public void testFqNameInAttr() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInAttr/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""fqNameInAttrFragment"")
    public void testFqNameInAttrFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInAttrFragment/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""fqNameInTag"")
    public void testFqNameInTag() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInTag/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""fqNameInTagFragment"")
    public void testFqNameInTagFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/fqNameInTagFragment/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""multiFile"")
    public void testMultiFile() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/multiFile/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""multiFileFragment"")
    public void testMultiFileFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/multiFileFragment/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""simple"")
    public void testSimple() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/simple/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""simpleFragment"")
    public void testSimpleFragment() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/simpleFragment/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""simpleView"")
    public void testSimpleView() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/simpleView/"");
        doTest(fileName);
    }",method,
"    @TestMetadata(""wrongIdFormat"")
    public void testWrongIdFormat() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata(""plugins/android-extensions/android-extensions-idea/testData/android/findUsages/wrongIdFormat/"");
        doTest(fileName);
    }",method,
"public class HasFieldsListImpl extends ArrayList<HasFields> implements HasFieldsList {
    private static final long serialVersionUID = -8635194387420305802L;
    @Override
    public Object getField(String name, Properties bindings) {
        int c = size();
        if (c > 0 && get(0) != null && get(0).fieldAlsoHasFields(name)) {
            HasFieldsListImpl l = new HasFieldsListImpl();
            for (int i = 0; i < size(); i++) {
                HasFields o = this.get(i);
                l.add(i, o == null ? null : (HasFields) o.getField(name, bindings));
            }
            return l;
        } else {
            Object[] r = new Object[this.size()];
            for (int i = 0; i < r.length; i++) {
                HasFields o = this.get(i);
                r[i] = o == null ? null : o.getField(name, bindings);
            }
            return r;
        }
    }
    @Override
    public int length() {
        return size();
    }
    @Override
    public boolean fieldAlsoHasFields(String name) {
        int c = size();
        return (c > 0 && get(0).fieldAlsoHasFields(name));
    }
    @Override
    public HasFieldsList getSubList(int fromIndex, int toIndex) {
        HasFieldsListImpl subList = new HasFieldsListImpl();
        subList.addAll(this.subList(fromIndex, toIndex));
        return subList;
    }
}",class,
"    @Override
    public Object getField(String name, Properties bindings) {
        int c = size();
        if (c > 0 && get(0) != null && get(0).fieldAlsoHasFields(name)) {
            HasFieldsListImpl l = new HasFieldsListImpl();
            for (int i = 0; i < size(); i++) {
                HasFields o = this.get(i);
                l.add(i, o == null ? null : (HasFields) o.getField(name, bindings));
            }
            return l;
        } else {
            Object[] r = new Object[this.size()];
            for (int i = 0; i < r.length; i++) {
                HasFields o = this.get(i);
                r[i] = o == null ? null : o.getField(name, bindings);
            }
            return r;
        }
    }",method,
"            for (int i = 0; i < r.length; i++) {
                HasFields o = this.get(i);
                r[i] = o == null ? null : o.getField(name, bindings);
            }",method,
"    @Override
    public int length() {
        return size();
    }",method,
"    @Override
    public boolean fieldAlsoHasFields(String name) {
        int c = size();
        return (c > 0 && get(0).fieldAlsoHasFields(name));
    }",method,
"    @Override
    public HasFieldsList getSubList(int fromIndex, int toIndex) {
        HasFieldsListImpl subList = new HasFieldsListImpl();
        subList.addAll(this.subList(fromIndex, toIndex));
        return subList;
    }",method,
"public final class DefaultHttp2HeadersFrame extends AbstractHttp2StreamFrame implements Http2HeadersFrame {
    private final Http2Headers headers;
    private final boolean endStream;
    private final int padding;
    public DefaultHttp2HeadersFrame(Http2Headers headers) {
        this(headers, false);
    }
    public DefaultHttp2HeadersFrame(Http2Headers headers, boolean endStream) {
        this(headers, endStream, 0);
    }
    public DefaultHttp2HeadersFrame(Http2Headers headers, boolean endStream, int padding) {
        this.headers = checkNotNull(headers, ""headers"");
        this.endStream = endStream;
        verifyPadding(padding);
        this.padding = padding;
    }
    @Override
    public DefaultHttp2HeadersFrame stream(Http2FrameStream stream) {
        super.stream(stream);
        return this;
    }
    @Override
    public String name() {
        return ""HEADERS"";
    }
    @Override
    public Http2Headers headers() {
        return headers;
    }
    @Override
    public boolean isEndStream() {
        return endStream;
    }
    @Override
    public int padding() {
        return padding;
    }
    @Override
    public String toString() {
        return StringUtil.simpleClassName(this) + ""(stream="" + stream() + "", headers="" + headers
               + "", endStream="" + endStream + "", padding="" + padding + ')';
    }
    @Override
    public boolean equals(Object o) {
        if (!(o instanceof DefaultHttp2HeadersFrame)) {
            return false;
        }
        DefaultHttp2HeadersFrame other = (DefaultHttp2HeadersFrame) o;
        return super.equals(other) && headers.equals(other.headers)
                && endStream == other.endStream && padding == other.padding;
    }
    @Override
    public int hashCode() {
        int hash = super.hashCode();
        hash = hash * 31 + headers.hashCode();
        hash = hash * 31 + (endStream ? 0 : 1);
        hash = hash * 31 + padding;
        return hash;
    }
}",class,
"    public DefaultHttp2HeadersFrame(Http2Headers headers) {
        this(headers, false);
    }",method,
"    public DefaultHttp2HeadersFrame(Http2Headers headers, boolean endStream) {
        this(headers, endStream, 0);
    }",method,
"    public DefaultHttp2HeadersFrame(Http2Headers headers, boolean endStream, int padding) {
        this.headers = checkNotNull(headers, ""headers"");
        this.endStream = endStream;
        verifyPadding(padding);
        this.padding = padding;
    }",method,
"    @Override
    public DefaultHttp2HeadersFrame stream(Http2FrameStream stream) {
        super.stream(stream);
        return this;
    }",method,
"    @Override
    public String name() {
        return ""HEADERS"";
    }",method,
