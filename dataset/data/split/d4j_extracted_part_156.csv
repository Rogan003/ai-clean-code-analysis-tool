code_snippet,type,score
"      @Override
      public void setItemPersistent(String key, String value, OnResultReceivedListener listener) {
      }",method,
"      @Override
      public void close() {
      }",method,
"  @Test
  public void testSetItem() throws Exception {
    module.setItem("""","""",callback);
    verify(callback,times(1)).invoke(any());
  }",method,
"  @Test
  public void testGetItem() throws Exception {
    module.getItem("""",callback);
    verify(callback,times(1)).invoke(any());
  }",method,
"  @Test
  public void testRemoveItem() throws Exception {
    module.removeItem("""",callback);
    verify(callback,times(1)).invoke(any());
  }",method,
"  @Test
  public void testLength() throws Exception {
    module.length(callback);
    verify(callback,times(1)).invoke(any());
  }",method,
"  @Test
  public void testGetAllKeys() throws Exception {
    module.getAllKeys(callback);
    verify(callback,times(1)).invoke(any());
  }",method,
"public class PortGroup extends UriResource {
    public static final int MIN_PORT_GROUP_NAME_LEN = 0;
    public static final int MAX_PORT_GROUP_NAME_LEN = 255;
    @ZoomField(name = ""id"")
    public UUID id;
    @ZoomField(name = ""tenant_id"")
    public String tenantId;
    @Size(min = MIN_PORT_GROUP_NAME_LEN, max = MAX_PORT_GROUP_NAME_LEN)
    @ZoomField(name = ""name"")
    public String name;
    @ZoomField(name = ""stateful"")
    public boolean stateful;
    @JsonIgnore
    @ZoomField(name = ""port_ids"")
    public List<UUID> portIds;
    @Override
    public URI getUri() {
        return absoluteUri(ResourceUris.PORT_GROUPS(), id);
    }
    public URI getPorts() {
        return relativeUri(ResourceUris.PORTS());
    }
    @JsonIgnore
    public void create() {
        if (null == id) {
            id = UUID.randomUUID();
        }
    }
    @JsonIgnore
    public void update(PortGroup from) {
        id = from.id;
        portIds = from.portIds;
    }
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .omitNullValues()
            .add(""id"", id)
            .add(""tenantId"", tenantId)
            .add(""name"", name)
            .add(""stateful"", stateful)
            .add(""portIds"", portIds)
            .toString();
    }
}",class,
"    @Override
    public URI getUri() {
        return absoluteUri(ResourceUris.PORT_GROUPS(), id);
    }",method,
"    public URI getPorts() {
        return relativeUri(ResourceUris.PORTS());
    }",method,
"    @JsonIgnore
    public void create() {
        if (null == id) {
            id = UUID.randomUUID();
        }
    }",method,
"        if (null == id) {
            id = UUID.randomUUID();
        }",method,
"    @JsonIgnore
    public void update(PortGroup from) {
        id = from.id;
        portIds = from.portIds;
    }",method,
"    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .omitNullValues()
            .add(""id"", id)
            .add(""tenantId"", tenantId)
            .add(""name"", name)
            .add(""stateful"", stateful)
            .add(""portIds"", portIds)
            .toString();
    }",method,
"public class ArrayCompositeDisposableTest {
    @Test
    public void normal() {
        ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
        Disposable d1 = Disposables.empty();
        Disposable d2 = Disposables.empty();
        assertTrue(acd.setResource(0, d1));
        assertTrue(acd.setResource(1, d2));
        Disposable d3 = Disposables.empty();
        Disposable d4 = Disposables.empty();
        acd.replaceResource(0, d3);
        acd.replaceResource(1, d4);
        assertFalse(d1.isDisposed());
        assertFalse(d2.isDisposed());
        acd.setResource(0, d1);
        acd.setResource(1, d2);
        assertTrue(d3.isDisposed());
        assertTrue(d4.isDisposed());
        assertFalse(acd.isDisposed());
        acd.dispose();
        acd.dispose();
        assertTrue(acd.isDisposed());
        assertTrue(d1.isDisposed());
        assertTrue(d2.isDisposed());
        Disposable d5 = Disposables.empty();
        Disposable d6 = Disposables.empty();
        assertFalse(acd.setResource(0, d5));
        acd.replaceResource(1, d6);
        assertTrue(d5.isDisposed());
        assertTrue(d6.isDisposed());
    }
    @Test
    public void disposeRace() {
        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.dispose();
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }
    }
    @Test
    public void replaceRace() {
        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.replaceResource(0, Disposables.empty());
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }
    }
    @Test
    public void setRace() {
        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.setResource(0, Disposables.empty());
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }
    }
}",class,
"    @Test
    public void normal() {
        ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
        Disposable d1 = Disposables.empty();
        Disposable d2 = Disposables.empty();
        assertTrue(acd.setResource(0, d1));
        assertTrue(acd.setResource(1, d2));
        Disposable d3 = Disposables.empty();
        Disposable d4 = Disposables.empty();
        acd.replaceResource(0, d3);
        acd.replaceResource(1, d4);
        assertFalse(d1.isDisposed());
        assertFalse(d2.isDisposed());
        acd.setResource(0, d1);
        acd.setResource(1, d2);
        assertTrue(d3.isDisposed());
        assertTrue(d4.isDisposed());
        assertFalse(acd.isDisposed());
        acd.dispose();
        acd.dispose();
        assertTrue(acd.isDisposed());
        assertTrue(d1.isDisposed());
        assertTrue(d2.isDisposed());
        Disposable d5 = Disposables.empty();
        Disposable d6 = Disposables.empty();
        assertFalse(acd.setResource(0, d5));
        acd.replaceResource(1, d6);
        assertTrue(d5.isDisposed());
        assertTrue(d6.isDisposed());
    }",method,
"    @Test
    public void disposeRace() {
        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.dispose();
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }
    }",method,
"        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.dispose();
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }",method,
"                @Override
                public void run() {
                    acd.dispose();
                }",method,
"    @Test
    public void replaceRace() {
        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.replaceResource(0, Disposables.empty());
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }
    }",method,
"        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.replaceResource(0, Disposables.empty());
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }",method,
"                @Override
                public void run() {
                    acd.replaceResource(0, Disposables.empty());
                }",method,
"    @Test
    public void setRace() {
        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.setResource(0, Disposables.empty());
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }
    }",method,
"        for (int i = 0; i < 100; i++) {
            final ArrayCompositeDisposable acd = new ArrayCompositeDisposable(2);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    acd.setResource(0, Disposables.empty());
                }
            };
            TestHelper.race(r, r, Schedulers.io());
        }",method,
"                @Override
                public void run() {
                    acd.setResource(0, Disposables.empty());
                }",method,
"public class GroovyTemplateAutoConfiguration {
	private static final Log logger = LogFactory
			.getLog(GroovyTemplateAutoConfiguration.class);
	@Configuration
	@ConditionalOnClass(GroovyMarkupConfigurer.class)
	public static class GroovyMarkupConfiguration {
		private final ApplicationContext applicationContext;
		private final GroovyTemplateProperties properties;
		private final MarkupTemplateEngine templateEngine;
		public GroovyMarkupConfiguration(ApplicationContext applicationContext,
				GroovyTemplateProperties properties,
				ObjectProvider<MarkupTemplateEngine> templateEngine) {
			this.applicationContext = applicationContext;
			this.properties = properties;
			this.templateEngine = templateEngine.getIfAvailable();
		}
		@PostConstruct
		public void checkTemplateLocationExists() {
			if (this.properties.isCheckTemplateLocation() && !isUsingGroovyAllJar()) {
				TemplateLocation location = new TemplateLocation(
						this.properties.getResourceLoaderPath());
				if (!location.exists(this.applicationContext)) {
					logger.warn(""Cannot find template location: "" + location
							+ "" (please add some templates, check your Groovy ""
							+ ""configuration, or set spring.groovy.template.""
							+ ""check-template-location=false)"");
				}
			}
		}
		private boolean isUsingGroovyAllJar() {
			try {
				ProtectionDomain domain = MarkupTemplateEngine.class
						.getProtectionDomain();
				CodeSource codeSource = domain.getCodeSource();
				if (codeSource != null
						&& codeSource.getLocation().toString().contains(""-all"")) {
					return true;
				}
				return false;
			}
			catch (Exception ex) {
				return false;
			}
		}
		@Bean
		@ConditionalOnMissingBean(GroovyMarkupConfig.class)
		@ConfigurationProperties(prefix = ""spring.groovy.template.configuration"")
		public GroovyMarkupConfigurer groovyMarkupConfigurer() {
			GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();
			configurer.setResourceLoaderPath(this.properties.getResourceLoaderPath());
			configurer.setCacheTemplates(this.properties.isCache());
			if (this.templateEngine != null) {
				configurer.setTemplateEngine(this.templateEngine);
			}
			return configurer;
		}
	}
	@Configuration
	@ConditionalOnClass({ Servlet.class, LocaleContextHolder.class,
			UrlBasedViewResolver.class })
	@ConditionalOnWebApplication(type = Type.SERVLET)
	@ConditionalOnProperty(name = ""spring.groovy.template.enabled"", matchIfMissing = true)
	public static class GroovyWebConfiguration {
		private final GroovyTemplateProperties properties;
		public GroovyWebConfiguration(GroovyTemplateProperties properties) {
			this.properties = properties;
		}
		@Bean
		@ConditionalOnMissingBean(name = ""groovyMarkupViewResolver"")
		public GroovyMarkupViewResolver groovyMarkupViewResolver() {
			GroovyMarkupViewResolver resolver = new GroovyMarkupViewResolver();
			this.properties.applyToViewResolver(resolver);
			return resolver;
		}
	}
}",class,
"	public static class GroovyMarkupConfiguration {
		private final ApplicationContext applicationContext;
		private final GroovyTemplateProperties properties;
		private final MarkupTemplateEngine templateEngine;
		public GroovyMarkupConfiguration(ApplicationContext applicationContext,
				GroovyTemplateProperties properties,
				ObjectProvider<MarkupTemplateEngine> templateEngine) {
			this.applicationContext = applicationContext;
			this.properties = properties;
			this.templateEngine = templateEngine.getIfAvailable();
		}
		@PostConstruct
		public void checkTemplateLocationExists() {
			if (this.properties.isCheckTemplateLocation() && !isUsingGroovyAllJar()) {
				TemplateLocation location = new TemplateLocation(
						this.properties.getResourceLoaderPath());
				if (!location.exists(this.applicationContext)) {
					logger.warn(""Cannot find template location: "" + location
							+ "" (please add some templates, check your Groovy ""
							+ ""configuration, or set spring.groovy.template.""
							+ ""check-template-location=false)"");
				}
			}
		}
		private boolean isUsingGroovyAllJar() {
			try {
				ProtectionDomain domain = MarkupTemplateEngine.class
						.getProtectionDomain();
				CodeSource codeSource = domain.getCodeSource();
				if (codeSource != null
						&& codeSource.getLocation().toString().contains(""-all"")) {
					return true;
				}
				return false;
			}
			catch (Exception ex) {
				return false;
			}
		}
		@Bean
		@ConditionalOnMissingBean(GroovyMarkupConfig.class)
		@ConfigurationProperties(prefix = ""spring.groovy.template.configuration"")
		public GroovyMarkupConfigurer groovyMarkupConfigurer() {
			GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();
			configurer.setResourceLoaderPath(this.properties.getResourceLoaderPath());
			configurer.setCacheTemplates(this.properties.isCache());
			if (this.templateEngine != null) {
				configurer.setTemplateEngine(this.templateEngine);
			}
			return configurer;
		}
	}",class,
"	public static class GroovyWebConfiguration {
		private final GroovyTemplateProperties properties;
		public GroovyWebConfiguration(GroovyTemplateProperties properties) {
			this.properties = properties;
		}
		@Bean
		@ConditionalOnMissingBean(name = ""groovyMarkupViewResolver"")
		public GroovyMarkupViewResolver groovyMarkupViewResolver() {
			GroovyMarkupViewResolver resolver = new GroovyMarkupViewResolver();
			this.properties.applyToViewResolver(resolver);
			return resolver;
		}
	}",class,
"		public GroovyMarkupConfiguration(ApplicationContext applicationContext,
				GroovyTemplateProperties properties,
				ObjectProvider<MarkupTemplateEngine> templateEngine) {
			this.applicationContext = applicationContext;
			this.properties = properties;
			this.templateEngine = templateEngine.getIfAvailable();
		}",method,
"		@PostConstruct
		public void checkTemplateLocationExists() {
			if (this.properties.isCheckTemplateLocation() && !isUsingGroovyAllJar()) {
				TemplateLocation location = new TemplateLocation(
						this.properties.getResourceLoaderPath());
				if (!location.exists(this.applicationContext)) {
					logger.warn(""Cannot find template location: "" + location
							+ "" (please add some templates, check your Groovy ""
							+ ""configuration, or set spring.groovy.template.""
							+ ""check-template-location=false)"");
				}
			}
		}",method,
"		private boolean isUsingGroovyAllJar() {
			try {
				ProtectionDomain domain = MarkupTemplateEngine.class
						.getProtectionDomain();
				CodeSource codeSource = domain.getCodeSource();
				if (codeSource != null
						&& codeSource.getLocation().toString().contains(""-all"")) {
					return true;
				}
				return false;
			}
			catch (Exception ex) {
				return false;
			}
		}",method,
"			catch (Exception ex) {
				return false;
			}",method,
"		@Bean
		@ConditionalOnMissingBean(GroovyMarkupConfig.class)
		@ConfigurationProperties(prefix = ""spring.groovy.template.configuration"")
		public GroovyMarkupConfigurer groovyMarkupConfigurer() {
			GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();
			configurer.setResourceLoaderPath(this.properties.getResourceLoaderPath());
			configurer.setCacheTemplates(this.properties.isCache());
			if (this.templateEngine != null) {
				configurer.setTemplateEngine(this.templateEngine);
			}
			return configurer;
		}",method,
"			if (this.templateEngine != null) {
				configurer.setTemplateEngine(this.templateEngine);
			}",method,
"		public GroovyWebConfiguration(GroovyTemplateProperties properties) {
			this.properties = properties;
		}",method,
"		@Bean
		@ConditionalOnMissingBean(name = ""groovyMarkupViewResolver"")
		public GroovyMarkupViewResolver groovyMarkupViewResolver() {
			GroovyMarkupViewResolver resolver = new GroovyMarkupViewResolver();
			this.properties.applyToViewResolver(resolver);
			return resolver;
		}",method,
"public abstract class AbstractRegionToKillRingTest extends LightPlatformCodeInsightTestCase {
  public void testNoSelection() {
    doTest(""this is a test string"");
  }
  public void testSingleLineSelection() {
    doTest(""this is a t<selection>est str</selection>ing"");
  }
  public void testMultiLineSelection() {
    doTest(
      ""this is the fir<selection>st string\n"" +
      ""this is the sec</selection>ond string""
    );
  }
  protected abstract void doTest(@NotNull String text);
  @NotNull
  protected static Pair<String, String> parse() {
    SelectionModel selectionModel = myEditor.getSelectionModel();
    if (!selectionModel.hasSelection()) {
      return new Pair<>(null, myEditor.getDocument().getText());
    }
    CharSequence text = myEditor.getDocument().getCharsSequence();
    String selectedText = text.subSequence(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd()).toString();
    StringBuilder nonSelectedText = new StringBuilder();
    nonSelectedText.append(text.subSequence(0, selectionModel.getSelectionStart()))
      .append(text.subSequence(selectionModel.getSelectionEnd(), text.length()));
    return new Pair<>(selectedText, nonSelectedText.toString());
  }
}",class,
"  public void testNoSelection() {
    doTest(""this is a test string"");
  }",method,
"  public void testSingleLineSelection() {
    doTest(""this is a t<selection>est str</selection>ing"");
  }",method,
"  public void testMultiLineSelection() {
    doTest(
      ""this is the fir<selection>st string\n"" +
      ""this is the sec</selection>ond string""
    );
  }",method,
"  @NotNull
  protected static Pair<String, String> parse() {
    SelectionModel selectionModel = myEditor.getSelectionModel();
    if (!selectionModel.hasSelection()) {
      return new Pair<>(null, myEditor.getDocument().getText());
    }
    CharSequence text = myEditor.getDocument().getCharsSequence();
    String selectedText = text.subSequence(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd()).toString();
    StringBuilder nonSelectedText = new StringBuilder();
    nonSelectedText.append(text.subSequence(0, selectionModel.getSelectionStart()))
      .append(text.subSequence(selectionModel.getSelectionEnd(), text.length()));
    return new Pair<>(selectedText, nonSelectedText.toString());
  }",method,
"public class MySqlShowColumnsStatement extends MySqlStatementImpl implements MySqlShowStatement {
    private boolean full;
    private SQLName table;
    private SQLName database;
    private SQLExpr like;
    private SQLExpr where;
    public boolean isFull() {
        return full;
    }
    public void setFull(boolean full) {
        this.full = full;
    }
    public SQLName getTable() {
        return table;
    }
    public void setTable(SQLName table) {
        if (table instanceof SQLPropertyExpr) {
            SQLPropertyExpr propExpr = (SQLPropertyExpr) table;
            this.setDatabase((SQLName) propExpr.getOwner());
            this.table = new SQLIdentifierExpr(propExpr.getName());
            return;
        }
        this.table = table;
    }
    public SQLName getDatabase() {
        return database;
    }
    public void setDatabase(SQLName database) {
        this.database = database;
    }
    public SQLExpr getLike() {
        return like;
    }
    public void setLike(SQLExpr like) {
        this.like = like;
    }
    public SQLExpr getWhere() {
        return where;
    }
    public void setWhere(SQLExpr where) {
        this.where = where;
    }
    public void accept0(MySqlASTVisitor visitor) {
        if (visitor.visit(this)) {
            acceptChild(visitor, table);
            acceptChild(visitor, database);
            acceptChild(visitor, like);
            acceptChild(visitor, where);
        }
        visitor.endVisit(this);
    }
    public List<SQLObject> getChildren() {
        List<SQLObject> children = new ArrayList<SQLObject>();
        if (table != null) {
            children.add(table);
        }
        if (database != null) {
            children.add(database);
        }
        if (like != null) {
            children.add(like);
        }
        if (where != null) {
            children.add(where);
        }
        return children;
    }
}",class,
"    public boolean isFull() {
        return full;
    }",method,
"    public void setFull(boolean full) {
        this.full = full;
    }",method,
"    public SQLName getTable() {
        return table;
    }",method,
"    public void setTable(SQLName table) {
        if (table instanceof SQLPropertyExpr) {
            SQLPropertyExpr propExpr = (SQLPropertyExpr) table;
            this.setDatabase((SQLName) propExpr.getOwner());
            this.table = new SQLIdentifierExpr(propExpr.getName());
            return;
        }
        this.table = table;
    }",method,
"        if (table instanceof SQLPropertyExpr) {
            SQLPropertyExpr propExpr = (SQLPropertyExpr) table;
            this.setDatabase((SQLName) propExpr.getOwner());
            this.table = new SQLIdentifierExpr(propExpr.getName());
            return;
        }",method,
"    public SQLName getDatabase() {
        return database;
    }",method,
"    public void setDatabase(SQLName database) {
        this.database = database;
    }",method,
"    public SQLExpr getLike() {
        return like;
    }",method,
"    public void setLike(SQLExpr like) {
        this.like = like;
    }",method,
"    public SQLExpr getWhere() {
        return where;
    }",method,
"    public void setWhere(SQLExpr where) {
        this.where = where;
    }",method,
"    public void accept0(MySqlASTVisitor visitor) {
        if (visitor.visit(this)) {
            acceptChild(visitor, table);
            acceptChild(visitor, database);
            acceptChild(visitor, like);
            acceptChild(visitor, where);
        }
        visitor.endVisit(this);
    }",method,
"    public List<SQLObject> getChildren() {
        List<SQLObject> children = new ArrayList<SQLObject>();
        if (table != null) {
            children.add(table);
        }
        if (database != null) {
            children.add(database);
        }
        if (like != null) {
            children.add(like);
        }
        if (where != null) {
            children.add(where);
        }
        return children;
    }",method,
"        if (table != null) {
            children.add(table);
        }",method,
"        if (database != null) {
            children.add(database);
        }",method,
"        if (like != null) {
            children.add(like);
        }",method,
"        if (where != null) {
            children.add(where);
        }",method,
"public class CallNode extends Node implements INameNode, IArgumentNode, BlockAcceptingNode {
    private final Node receiverNode;
    private Node argsNode;
    protected Node iterNode;
    private ByteList name;
    private final boolean isLazy;
    public CallNode(ISourcePosition position, Node receiverNode, String name, Node argsNode, 
            Node iterNode) {
        this(position, receiverNode, name, argsNode, iterNode, false);
    }
    @Deprecated
    public CallNode(ISourcePosition position, Node receiverNode, String name, Node argsNode,
                    Node iterNode, boolean isLazy) {
        this(position, receiverNode, StringSupport.stringAsByteList(name), argsNode, iterNode, isLazy);
    }
    public CallNode(ISourcePosition position, Node receiverNode, ByteList name, Node argsNode,
                    Node iterNode, boolean isLazy) {
        super(position, receiverNode.containsVariableAssignment() ||
                argsNode != null && argsNode.containsVariableAssignment() ||
                iterNode != null && iterNode.containsVariableAssignment());
        assert receiverNode != null : ""receiverNode is not null"";
        this.name = name;
        this.receiverNode = receiverNode;
        this.argsNode = argsNode;
        this.iterNode = iterNode;
        this.isLazy = isLazy;
        setNewline();
    }
    public NodeType getNodeType() {
        return NodeType.CALLNODE;
    }
    public <T> T accept(NodeVisitor<T> iVisitor) {
        return iVisitor.visitCallNode(this);
    }
    public Node getIterNode() {
        return iterNode;
    }
    public Node setIterNode(Node iterNode) {
        this.iterNode = iterNode;
        return this;
    }
    public Node getArgsNode() {
        return argsNode;
    }
    public Node setArgsNode(Node argsNode) {
        this.argsNode = argsNode;
        return argsNode;
    }
    public String getName() {
        return StringSupport.byteListAsString(name);
    }
    public ByteList getByteName() {
        return name;
    }
    public Node getReceiverNode() {
        return receiverNode;
    }
    public boolean isLazy() {
        return isLazy;
    }
    public List<Node> childNodes() {
        return Node.createList(receiverNode, argsNode, iterNode);
    }
    @Override
    protected String toStringInternal() {
        return isLazy ? ""lazy"" : null;
    }
}",class,
"    public CallNode(ISourcePosition position, Node receiverNode, String name, Node argsNode, 
            Node iterNode) {
        this(position, receiverNode, name, argsNode, iterNode, false);
    }",method,
"    @Deprecated
    public CallNode(ISourcePosition position, Node receiverNode, String name, Node argsNode,
                    Node iterNode, boolean isLazy) {
        this(position, receiverNode, StringSupport.stringAsByteList(name), argsNode, iterNode, isLazy);
    }",method,
"    public CallNode(ISourcePosition position, Node receiverNode, ByteList name, Node argsNode,
                    Node iterNode, boolean isLazy) {
        super(position, receiverNode.containsVariableAssignment() ||
                argsNode != null && argsNode.containsVariableAssignment() ||
                iterNode != null && iterNode.containsVariableAssignment());
        assert receiverNode != null : ""receiverNode is not null"";
        this.name = name;
        this.receiverNode = receiverNode;
        this.argsNode = argsNode;
        this.iterNode = iterNode;
        this.isLazy = isLazy;
        setNewline();
    }",method,
"    public NodeType getNodeType() {
        return NodeType.CALLNODE;
    }",method,
"    public <T> T accept(NodeVisitor<T> iVisitor) {
        return iVisitor.visitCallNode(this);
    }",method,
"    public Node getIterNode() {
        return iterNode;
    }",method,
"    public Node setIterNode(Node iterNode) {
        this.iterNode = iterNode;
        return this;
    }",method,
"    public Node getArgsNode() {
        return argsNode;
    }",method,
"    public Node setArgsNode(Node argsNode) {
        this.argsNode = argsNode;
        return argsNode;
    }",method,
"    public String getName() {
        return StringSupport.byteListAsString(name);
    }",method,
"    public ByteList getByteName() {
        return name;
    }",method,
"    public Node getReceiverNode() {
        return receiverNode;
    }",method,
"    public boolean isLazy() {
        return isLazy;
    }",method,
"    public List<Node> childNodes() {
        return Node.createList(receiverNode, argsNode, iterNode);
    }",method,
"    @Override
    protected String toStringInternal() {
        return isLazy ? ""lazy"" : null;
    }",method,
"public class VerificationParamsTest extends AndroidTestCase {
    private final static String VERIFICATION_URI_STRING = ""http://verification.uri/path"";
    private final static String ORIGINATING_URI_STRING = ""http://originating.uri/path"";
    private final static String REFERRER_STRING = ""http://referrer.uri/path"";
    private final static int INSTALLER_UID = 42;
    private final static Uri VERIFICATION_URI = Uri.parse(VERIFICATION_URI_STRING);
    private final static Uri ORIGINATING_URI = Uri.parse(ORIGINATING_URI_STRING);
    private final static Uri REFERRER = Uri.parse(REFERRER_STRING);
    private final static int ORIGINATING_UID = 10042;
    public void testParcel() throws Exception {
        VerificationParams expected = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        Parcel parcel = Parcel.obtain();
        expected.writeToParcel(parcel, 0);
        parcel.setDataPosition(0);
        VerificationParams actual = VerificationParams.CREATOR.createFromParcel(parcel);
        assertEquals(VERIFICATION_URI, actual.getVerificationURI());
        assertEquals(ORIGINATING_URI, actual.getOriginatingURI());
        assertEquals(REFERRER, actual.getReferrer());
        assertEquals(ORIGINATING_UID, actual.getOriginatingUid());
    }
    public void testEquals_Success() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertEquals(params1, params2);
    }
    public void testEquals_VerificationUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(""http://a.different.uri/""), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }",class,
"    public void testParcel() throws Exception {
        VerificationParams expected = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        Parcel parcel = Parcel.obtain();
        expected.writeToParcel(parcel, 0);
        parcel.setDataPosition(0);
        VerificationParams actual = VerificationParams.CREATOR.createFromParcel(parcel);
        assertEquals(VERIFICATION_URI, actual.getVerificationURI());
        assertEquals(ORIGINATING_URI, actual.getOriginatingURI());
        assertEquals(REFERRER, actual.getReferrer());
        assertEquals(ORIGINATING_UID, actual.getOriginatingUid());
    }
    public void testEquals_Success() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertEquals(params1, params2);
    }
    public void testEquals_VerificationUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(""http://a.different.uri/""), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_OriginatingUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(""http://a.different.uri/""),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_Referrer_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(""http://a.different.uri/""), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }",method,
"    public void testEquals_Success() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertEquals(params1, params2);
    }
    public void testEquals_VerificationUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(""http://a.different.uri/""), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_OriginatingUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(""http://a.different.uri/""),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_Referrer_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(""http://a.different.uri/""), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }",method,
"    public void testEquals_VerificationUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(""http://a.different.uri/""), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_OriginatingUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(""http://a.different.uri/""),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_Referrer_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(""http://a.different.uri/""), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }",method,
"    public void testEquals_OriginatingUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(""http://a.different.uri/""),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_Referrer_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(""http://a.different.uri/""), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }",method,
"    public void testEquals_Referrer_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(""http://a.different.uri/""), ORIGINATING_UID);
        assertFalse(params1.equals(params2));
    }
    public void testEquals_Originating_Uid_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), 12345);
        assertFalse(params1.equals(params2));
    }",method,
"    public void testEquals_Originating_Uid_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), 12345);
        assertFalse(params1.equals(params2));
    }",method,
"    public void testEquals_InstallerUid_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        params2.setInstallerUid(INSTALLER_UID);
        assertFalse(params1.equals(params2));
    }",method,
"    public void testHashCode_Success() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertEquals(params1.hashCode(), params2.hashCode());
    }",method,
"    public void testHashCode_VerificationUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(null, Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.hashCode() == params2.hashCode());
    }",method,
"    public void testHashCode_OriginatingUri_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(""http://a.different.uri/""),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        assertFalse(params1.hashCode() == params2.hashCode());
    }",method,
"    public void testHashCode_Referrer_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING), null,
                ORIGINATING_UID);
        assertFalse(params1.hashCode() == params2.hashCode());
    }",method,
"    public void testHashCode_Originating_Uid_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), 12345);
        assertFalse(params1.hashCode() == params2.hashCode());
    }",method,
"    public void testHashCode_InstallerUid_Failure() throws Exception {
        VerificationParams params1 = new VerificationParams(VERIFICATION_URI, ORIGINATING_URI,
                REFERRER, ORIGINATING_UID);
        VerificationParams params2 = new VerificationParams(
                Uri.parse(VERIFICATION_URI_STRING), Uri.parse(ORIGINATING_URI_STRING),
                Uri.parse(REFERRER_STRING), ORIGINATING_UID);
        params2.setInstallerUid(INSTALLER_UID);
        assertFalse(params1.hashCode() == params2.hashCode());
    }",method,
"public class LocalVariableTypeTableAttributeEditor
{
    private final LocalVariableTypeTableAttribute targetLocalVariableTypeTableAttribute;
    public LocalVariableTypeTableAttributeEditor(LocalVariableTypeTableAttribute targetLocalVariableTypeTableAttribute)
    {
        this.targetLocalVariableTypeTableAttribute = targetLocalVariableTypeTableAttribute;
    }
    public void addLocalVariableTypeInfo(LocalVariableTypeInfo localVariableTypeInfo)
    {
        targetLocalVariableTypeTableAttribute.localVariableTypeTable =
            (LocalVariableTypeInfo[])ArrayUtil.add(targetLocalVariableTypeTableAttribute.localVariableTypeTable,
                                                   targetLocalVariableTypeTableAttribute.u2localVariableTypeTableLength++,
                                                   localVariableTypeInfo);
    }
}",class,
"    public LocalVariableTypeTableAttributeEditor(LocalVariableTypeTableAttribute targetLocalVariableTypeTableAttribute)
    {
        this.targetLocalVariableTypeTableAttribute = targetLocalVariableTypeTableAttribute;
    }",method,
"    public void addLocalVariableTypeInfo(LocalVariableTypeInfo localVariableTypeInfo)
    {
        targetLocalVariableTypeTableAttribute.localVariableTypeTable =
            (LocalVariableTypeInfo[])ArrayUtil.add(targetLocalVariableTypeTableAttribute.localVariableTypeTable,
                                                   targetLocalVariableTypeTableAttribute.u2localVariableTypeTableLength++,
                                                   localVariableTypeInfo);
    }",method,
"public abstract class TProtocol {
  private TProtocol() {}
  protected TTransport trans_;
  protected TProtocol(TTransport trans) {
    trans_ = trans;
  }
  public TTransport getTransport() {
    return trans_;
  }
  public abstract void writeMessageBegin(TMessage message) throws TException;
  public abstract void writeMessageEnd() throws TException;
  public abstract void writeStructBegin(TStruct struct) throws TException;
  public abstract void writeStructEnd() throws TException;
  public abstract void writeFieldBegin(TField field) throws TException;
  public abstract void writeFieldEnd() throws TException;
  public abstract void writeFieldStop() throws TException;
  public abstract void writeMapBegin(TMap map) throws TException;
  public abstract void writeMapEnd() throws TException;
  public abstract void writeListBegin(TList list) throws TException;
  public abstract void writeListEnd() throws TException;
  public abstract void writeSetBegin(TSet set) throws TException;
  public abstract void writeSetEnd() throws TException;
  public abstract void writeBool(boolean b) throws TException;
  public void writeBool(Boolean b) throws TException {
      writeBool(b.booleanValue());
  }
  public abstract void writeByte(byte b) throws TException;
  public void writeByte(Byte b) throws TException {
      writeByte(b.byteValue());
  }
  public abstract void writeI16(short i16) throws TException;
  public void writeI16(Short i16) throws TException {
      writeI16(i16.shortValue());
  }
  public abstract void writeI32(int i32) throws TException;
  public void writeI32(Integer i32) throws TException {
      writeI32(i32.intValue());
  }
  public abstract void writeI64(long i64) throws TException;
  public void writeI64(Long i64) throws TException {
      writeI64(i64.longValue());
  }
  public abstract void writeDouble(double dub) throws TException;
  public void writeDouble(Double d) throws TException {
      writeDouble(d.doubleValue());
  }
  public abstract void writeString(String str) throws TException;
  public abstract void writeBinary(byte[] bin) throws TException;
  public abstract TMessage readMessageBegin() throws TException;
  public abstract void readMessageEnd() throws TException;
  public abstract TStruct readStructBegin() throws TException;
  public abstract void readStructEnd() throws TException;
  public abstract TField readFieldBegin() throws TException;
  public abstract void readFieldEnd() throws TException;
  public abstract TMap readMapBegin() throws TException;
  public abstract void readMapEnd() throws TException;
  public abstract TList readListBegin() throws TException;
  public abstract void readListEnd() throws TException;
  public abstract TSet readSetBegin() throws TException;
  public abstract void readSetEnd() throws TException;
  public abstract boolean readBool() throws TException;
  public abstract byte readByte() throws TException;
  public abstract short readI16() throws TException;
  public abstract int readI32() throws TException;
  public abstract long readI64() throws TException;
  public abstract double readDouble() throws TException;
  public abstract String readString() throws TException;
  public abstract byte[] readBinary() throws TException;
}",class,
  private TProtocol() {},method,
"  protected TProtocol(TTransport trans) {
    trans_ = trans;
  }",method,
"  public TTransport getTransport() {
    return trans_;
  }",method,
"  public void writeBool(Boolean b) throws TException {
      writeBool(b.booleanValue());
  }",method,
"  public void writeByte(Byte b) throws TException {
      writeByte(b.byteValue());
  }",method,
"  public void writeI16(Short i16) throws TException {
      writeI16(i16.shortValue());
  }",method,
"  public void writeI32(Integer i32) throws TException {
      writeI32(i32.intValue());
  }",method,
"  public void writeI64(Long i64) throws TException {
      writeI64(i64.longValue());
  }",method,
