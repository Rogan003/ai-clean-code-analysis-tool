code_snippet,type,score
"	@Override
	public Scene onLoadScene() {
		this.mEngine.registerUpdateHandler(new FPSLogger());
		final Scene scene = new Scene();
		scene.setBackground(new ColorBackground(0.0f, 0.0f, 0.0f));
		{
			final ParticleSystem particleSystem = new ParticleSystem(new PointParticleEmitter(-32, CAMERA_HEIGHT - 32), RATE_MIN, RATE_MAX, PARTICLES_MAX, this.mParticleTextureRegion);
			particleSystem.setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE);
			particleSystem.addParticleInitializer(new VelocityInitializer(35, 45, 0, -10));
			particleSystem.addParticleInitializer(new AccelerationInitializer(5, -11));
			particleSystem.addParticleInitializer(new RotationInitializer(0.0f, 360.0f));
			particleSystem.addParticleInitializer(new ColorInitializer(1.0f, 1.0f, 0.0f));
			particleSystem.addParticleModifier(new ScaleModifier(0.5f, 2.0f, 0, 5));
			particleSystem.addParticleModifier(new ExpireModifier(6.5f));
			particleSystem.addParticleModifier(new ColorModifier(1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 2.5f, 5.5f));
			particleSystem.addParticleModifier(new AlphaModifier(1.0f, 0.0f, 2.5f, 6.5f));
			scene.attachChild(particleSystem);
		}
		{
			final ParticleSystem particleSystem = new ParticleSystem(new PointParticleEmitter(CAMERA_WIDTH, CAMERA_HEIGHT - 32), RATE_MIN, RATE_MAX, PARTICLES_MAX, this.mParticleTextureRegion);
			particleSystem.setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE);
			particleSystem.addParticleInitializer(new VelocityInitializer(-35, -45, 0, -10));
			particleSystem.addParticleInitializer(new AccelerationInitializer(-5, -11));
			particleSystem.addParticleInitializer(new RotationInitializer(0.0f, 360.0f));
			particleSystem.addParticleInitializer(new ColorInitializer(0.0f, 1.0f, 0.0f));
			particleSystem.addParticleModifier(new ScaleModifier(0.5f, 2.0f, 0, 5));
			particleSystem.addParticleModifier(new ExpireModifier(6.5f));
			particleSystem.addParticleModifier(new ColorModifier(0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 2.5f, 5.5f));
			particleSystem.addParticleModifier(new AlphaModifier(1.0f, 0.0f, 2.5f, 6.5f));
			scene.attachChild(particleSystem);
		}
		{
			final ParticleSystem particleSystem = new ParticleSystem(new PointParticleEmitter(-32, 0), RATE_MIN, RATE_MAX, PARTICLES_MAX, this.mParticleTextureRegion);
			particleSystem.setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE);
			particleSystem.addParticleInitializer(new VelocityInitializer(35, 45, 0, 10));
			particleSystem.addParticleInitializer(new AccelerationInitializer(5, 11));
			particleSystem.addParticleInitializer(new RotationInitializer(0.0f, 360.0f));
			particleSystem.addParticleInitializer(new ColorInitializer(0.0f, 0.0f, 1.0f));
			particleSystem.addParticleModifier(new ScaleModifier(0.5f, 2.0f, 0, 5));
			particleSystem.addParticleModifier(new ExpireModifier(6.5f));
			particleSystem.addParticleModifier(new ColorModifier(0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 2.5f, 5.5f));
			particleSystem.addParticleModifier(new AlphaModifier(1.0f, 0.0f, 2.5f, 6.5f));
			scene.attachChild(particleSystem);
		}
		{
			final ParticleSystem particleSystem = new ParticleSystem(new PointParticleEmitter(CAMERA_WIDTH, 0), RATE_MIN, RATE_MAX, PARTICLES_MAX, this.mParticleTextureRegion);
			particleSystem.setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE);
			particleSystem.addParticleInitializer(new VelocityInitializer(-35, -45, 0, 10));
			particleSystem.addParticleInitializer(new AccelerationInitializer(-5, 11));
			particleSystem.addParticleInitializer(new RotationInitializer(0.0f, 360.0f));
			particleSystem.addParticleInitializer(new ColorInitializer(1.0f, 0.0f, 0.0f));
			particleSystem.addParticleModifier(new ScaleModifier(0.5f, 2.0f, 0, 5));
			particleSystem.addParticleModifier(new ExpireModifier(6.5f));
			particleSystem.addParticleModifier(new ColorModifier(1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.5f, 5.5f));
			particleSystem.addParticleModifier(new AlphaModifier(1.0f, 0.0f, 2.5f, 6.5f));
			scene.attachChild(particleSystem);
		}
		return scene;
	}",method,
"	@Override
	public void onLoadComplete() {
	}",method,
"public class AuditIncludesCommandIntegrationTest {
  @Rule public TemporaryPaths tmp = new TemporaryPaths();
  @Test
  public void includedExtensionFilesAreRecorded() throws IOException {
    ProjectWorkspace workspace =
        TestDataHelper.createProjectWorkspaceForScenario(this, ""audit_includes"", tmp);
    workspace.setUp();
    // Print all of the inputs to the rule.
    ProcessResult result = workspace.runBuckCommand(""audit"", ""includes"", ""BUCK"").assertSuccess();
    String newLine = System.lineSeparator();
    assertThat(
        result.getStdout(),
        MoreStringsForTests.equalToIgnoringPlatformNewlines(
            ""# BUCK""
                + newLine
                + newLine
                + workspace.getPath(""BUCK"")
                + newLine
                + workspace.getPath(""build_defs"")
                + newLine
                + workspace.getPath(""java_rules.bzl"")
                + newLine));
  }
  @Test
  public void includedExtensionFilesAreRecordedInJson() throws IOException {
    ProjectWorkspace workspace =
        TestDataHelper.createProjectWorkspaceForScenario(this, ""audit_includes"", tmp);
    workspace.setUp();
    // Print all of the inputs to the rule.
    ProcessResult result =
        workspace.runBuckCommand(""audit"", ""includes"", ""--json"", ""BUCK"").assertSuccess();
    ByteArrayOutputStream expectedOutput = new ByteArrayOutputStream();
    try (PrintStream sink = new PrintStream(expectedOutput);
        JsonGenerator generator = ObjectMappers.createGenerator(sink).useDefaultPrettyPrinter()) {
      ObjectMappers.WRITER.writeValue(
          generator,
          new Path[] {
            workspace.getPath(""BUCK""),
            workspace.getPath(""build_defs""),
            workspace.getPath(""java_rules.bzl"")
          });
    }
    assertEquals(expectedOutput.toString(), result.getStdout());
  }
  @Test
  public void transitiveIncludedExtensionFilesAreRecorded() throws IOException {
    ProjectWorkspace workspace =
        TestDataHelper.createProjectWorkspaceForScenario(this, ""audit_includes_transitive"", tmp);
    workspace.setUp();
    // Print all of the inputs to the rule.
    ProcessResult result = workspace.runBuckCommand(""audit"", ""includes"", ""BUCK"").assertSuccess();
    String newLine = System.lineSeparator();
    assertThat(
        result.getStdout(),
        MoreStringsForTests.equalToIgnoringPlatformNewlines(
            ""# BUCK""
                + newLine
                + newLine
                + workspace.getPath(""BUCK"")
                + newLine
                + workspace.getPath(""build_defs"")
                + newLine
                + workspace.getPath(""included_build_defs"")
                + newLine
                + workspace.getPath(""included_java_rules.bzl"")
                + newLine
                + workspace.getPath(""java_rules.bzl"")
                + newLine));
  }
}",class,
"  @Rule public TemporaryPaths tmp = new TemporaryPaths();
  @Test
  public void includedExtensionFilesAreRecorded() throws IOException {
    ProjectWorkspace workspace =
        TestDataHelper.createProjectWorkspaceForScenario(this, ""audit_includes"", tmp);
    workspace.setUp();
    // Print all of the inputs to the rule.
    ProcessResult result = workspace.runBuckCommand(""audit"", ""includes"", ""BUCK"").assertSuccess();
    String newLine = System.lineSeparator();
    assertThat(
        result.getStdout(),
        MoreStringsForTests.equalToIgnoringPlatformNewlines(
            ""# BUCK""
                + newLine
                + newLine
                + workspace.getPath(""BUCK"")
                + newLine
                + workspace.getPath(""build_defs"")
                + newLine
                + workspace.getPath(""java_rules.bzl"")
                + newLine));
  }",method,
"  @Test
  public void includedExtensionFilesAreRecordedInJson() throws IOException {
    ProjectWorkspace workspace =
        TestDataHelper.createProjectWorkspaceForScenario(this, ""audit_includes"", tmp);
    workspace.setUp();
    // Print all of the inputs to the rule.
    ProcessResult result =
        workspace.runBuckCommand(""audit"", ""includes"", ""--json"", ""BUCK"").assertSuccess();
    ByteArrayOutputStream expectedOutput = new ByteArrayOutputStream();
    try (PrintStream sink = new PrintStream(expectedOutput);
        JsonGenerator generator = ObjectMappers.createGenerator(sink).useDefaultPrettyPrinter()) {
      ObjectMappers.WRITER.writeValue(
          generator,
          new Path[] {
            workspace.getPath(""BUCK""),
            workspace.getPath(""build_defs""),
            workspace.getPath(""java_rules.bzl"")
          });
    }
    assertEquals(expectedOutput.toString(), result.getStdout());
  }",method,
"  @Test
  public void transitiveIncludedExtensionFilesAreRecorded() throws IOException {
    ProjectWorkspace workspace =
        TestDataHelper.createProjectWorkspaceForScenario(this, ""audit_includes_transitive"", tmp);
    workspace.setUp();
    // Print all of the inputs to the rule.
    ProcessResult result = workspace.runBuckCommand(""audit"", ""includes"", ""BUCK"").assertSuccess();
    String newLine = System.lineSeparator();
    assertThat(
        result.getStdout(),
        MoreStringsForTests.equalToIgnoringPlatformNewlines(
            ""# BUCK""
                + newLine
                + newLine
                + workspace.getPath(""BUCK"")
                + newLine
                + workspace.getPath(""build_defs"")
                + newLine
                + workspace.getPath(""included_build_defs"")
                + newLine
                + workspace.getPath(""included_java_rules.bzl"")
                + newLine
                + workspace.getPath(""java_rules.bzl"")
                + newLine));
  }",method,
"public class CatmullRomSplineMoveModifier extends CardinalSplineMoveModifier {
	// ===========================================================
	// Constants
	// ===========================================================
	// ===========================================================
	// Fields
	// ===========================================================
	// ===========================================================
	// Constructors
	// ===========================================================
	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig) {
		super(pDuration, pCatmullRomMoveModifierConfig);
	}
	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig, final IEaseFunction pEaseFunction) {
		super(pDuration, pCatmullRomMoveModifierConfig, pEaseFunction);
	}
	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig, final IEntityModifierListener pEntityModifierListener) {
		super(pDuration, pCatmullRomMoveModifierConfig, pEntityModifierListener);
	}
	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig, final IEntityModifierListener pEntityModifierListener, final IEaseFunction pEaseFunction) {
		super(pDuration, pCatmullRomMoveModifierConfig, pEntityModifierListener, pEaseFunction);
	}
	// ===========================================================
	// Getter & Setter
	// ===========================================================
	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================
	// ===========================================================
	// Methods
	// ===========================================================
	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
	public class CatmullRomMoveModifierConfig extends CardinalSplineMoveModifierConfig {
		// ===========================================================
		// Constants
		// ===========================================================
		private static final int CARDINALSPLINE_CATMULLROM_TENSION = 0;
		// ===========================================================
		// Fields
		// ===========================================================
		// ===========================================================
		// Constructors
		// ===========================================================
		public CatmullRomMoveModifierConfig(final int pControlPointCount) {
			super(pControlPointCount, CatmullRomMoveModifierConfig.CARDINALSPLINE_CATMULLROM_TENSION);
		}
		// ===========================================================
		// Getter & Setter
		// ===========================================================
		// ===========================================================
		// Methods for/from SuperClass/Interfaces
		// ===========================================================
		// ===========================================================
		// Methods
		// ===========================================================
		// ===========================================================
		// Inner and Anonymous Classes
		// ===========================================================
	}
}",class,
"	public class CatmullRomMoveModifierConfig extends CardinalSplineMoveModifierConfig {
		// ===========================================================
		// Constants
		// ===========================================================
		private static final int CARDINALSPLINE_CATMULLROM_TENSION = 0;
		// ===========================================================
		// Fields
		// ===========================================================
		// ===========================================================
		// Constructors
		// ===========================================================
		public CatmullRomMoveModifierConfig(final int pControlPointCount) {
			super(pControlPointCount, CatmullRomMoveModifierConfig.CARDINALSPLINE_CATMULLROM_TENSION);
		}
		// ===========================================================
		// Getter & Setter
		// ===========================================================
		// ===========================================================
		// Methods for/from SuperClass/Interfaces
		// ===========================================================
		// ===========================================================
		// Methods
		// ===========================================================
		// ===========================================================
		// Inner and Anonymous Classes
		// ===========================================================
	}",class,
"	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig) {
		super(pDuration, pCatmullRomMoveModifierConfig);
	}",method,
"	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig, final IEaseFunction pEaseFunction) {
		super(pDuration, pCatmullRomMoveModifierConfig, pEaseFunction);
	}",method,
"	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig, final IEntityModifierListener pEntityModifierListener) {
		super(pDuration, pCatmullRomMoveModifierConfig, pEntityModifierListener);
	}",method,
"	public CatmullRomSplineMoveModifier(final float pDuration, final CatmullRomMoveModifierConfig pCatmullRomMoveModifierConfig, final IEntityModifierListener pEntityModifierListener, final IEaseFunction pEaseFunction) {
		super(pDuration, pCatmullRomMoveModifierConfig, pEntityModifierListener, pEaseFunction);
	}",method,
"		public CatmullRomMoveModifierConfig(final int pControlPointCount) {
			super(pControlPointCount, CatmullRomMoveModifierConfig.CARDINALSPLINE_CATMULLROM_TENSION);
		}",method,
"public class divided_differences {
    private static void divided_diff(double[][] matrix, int sLength) {
        int i = 1, i2 = 2, j = 2, s2 = sLength;
        for (int z = 0; z < sLength - 1; z++, j++, s2 -= 1, i2++) {
            for (int y = 0; y < s2 - 1; y++, i += 2) {
                matrix[i][j] = (matrix[i + 1][j - 1] - matrix[i - 1][j - 1])
                        / (matrix[i + (i2 - 1)][0] - matrix[i - (i2 - 1)][0]);
            }
            i = i2;
        }
    }
    public static void main(String[] args) {
        Double[] commonValues = {1.0, 2.0, 3.0, 4.0};
        Double[] commonFunValues = {1.0, 8.0, 27.0, 64.0};
        int length = commonValues.length;
        double[][] mas = new double[(2 * length) - 1][length + 1];
        for (int i = 0, z = 0; i < length; i++, z += 2) {
            mas[z][0] = commonValues[i];
            mas[z][1] = commonFunValues[i];
        }
        divided_diff(mas, length);
        for (int q = 0; q < length * 2 - 1; q++) {
            System.out.println(Arrays.toString(mas[q]));
        }
    }
}",class,
"public class EulerTotient {
	public static int phi(int n) {
		if (n <= 0)
			return 0;
		int res = n;
		for (int i = 2; i * i <= n; i++){
			if (n % i == 0){
				do {
					n /= i;
				} while (n % i == 0);
				res -= res / i;
			}
		}
		if (n != 1) {
			res = res * (n-1) / n;
		}
		return res;
	}
	public static void main(String[] args) {
		int[] testCases = {
			1,       // denegerate case
			2,       // prime
			11,      // prime
			2*2,     // power of prime
			3*3*3,   // power of prime
			3*5,     // product of distinct primes
			2*2*3*3, // product of distinct primes
			5*23,    // product of distinct primes
			5*5*23,  // product of distinct primes
		};
		int[] expectedResults = {
			1,
			1,
			10,
			2,
			18,
			8,
			12,
			88,
			440,
		};
		for (int idx = 0; idx < testCases.length; idx++) {
			System.out.println(""phi("" + testCases[idx] + "") = "" + phi(testCases[idx]));
			System.out.println(""Expected: "" + expectedResults[idx]);
		}
	}
}",class,
"}
class exponent{
    public static int exponentBySquare(int num, int power){
        if(power==0)
            return 1;
        if(power==1)
            return num;
        int temp=exponentBySquare(num,power/2);
        temp*=temp;
        if(power%2==1){
            temp*=num;
        }
        return temp;
    }
    public static void main(String[] args){
        System.out.println(exponentBySquare(2,9));
    }
}",class,
"    private static void divided_diff(double[][] matrix, int sLength) {
        int i = 1, i2 = 2, j = 2, s2 = sLength;
        for (int z = 0; z < sLength - 1; z++, j++, s2 -= 1, i2++) {
            for (int y = 0; y < s2 - 1; y++, i += 2) {
                matrix[i][j] = (matrix[i + 1][j - 1] - matrix[i - 1][j - 1])
                        / (matrix[i + (i2 - 1)][0] - matrix[i - (i2 - 1)][0]);
            }
            i = i2;
        }
    }",method,
"        for (int z = 0; z < sLength - 1; z++, j++, s2 -= 1, i2++) {
            for (int y = 0; y < s2 - 1; y++, i += 2) {
                matrix[i][j] = (matrix[i + 1][j - 1] - matrix[i - 1][j - 1])
                        / (matrix[i + (i2 - 1)][0] - matrix[i - (i2 - 1)][0]);
            }
            i = i2;
        }",method,
"            for (int y = 0; y < s2 - 1; y++, i += 2) {
                matrix[i][j] = (matrix[i + 1][j - 1] - matrix[i - 1][j - 1])
                        / (matrix[i + (i2 - 1)][0] - matrix[i - (i2 - 1)][0]);
            }",method,
"    public static void main(String[] args) {
        Double[] commonValues = {1.0, 2.0, 3.0, 4.0};
        Double[] commonFunValues = {1.0, 8.0, 27.0, 64.0};
        int length = commonValues.length;
        double[][] mas = new double[(2 * length) - 1][length + 1];
        for (int i = 0, z = 0; i < length; i++, z += 2) {
            mas[z][0] = commonValues[i];
            mas[z][1] = commonFunValues[i];
        }
        divided_diff(mas, length);
        for (int q = 0; q < length * 2 - 1; q++) {
            System.out.println(Arrays.toString(mas[q]));
        }
    }",method,
"        for (int i = 0, z = 0; i < length; i++, z += 2) {
            mas[z][0] = commonValues[i];
            mas[z][1] = commonFunValues[i];
        }",method,
"        for (int q = 0; q < length * 2 - 1; q++) {
            System.out.println(Arrays.toString(mas[q]));
        }",method,
"	public static int phi(int n) {
		if (n <= 0)
			return 0;
		int res = n;
		for (int i = 2; i * i <= n; i++){
			if (n % i == 0){
				do {
					n /= i;
				} while (n % i == 0);
				res -= res / i;
			}
		}
		if (n != 1) {
			res = res * (n-1) / n;
		}
		return res;
	}",method,
"		for (int i = 2; i * i <= n; i++){
			if (n % i == 0){
				do {
					n /= i;
				} while (n % i == 0);
				res -= res / i;
			}
		}",method,
"			if (n % i == 0){
				do {
					n /= i;
				} while (n % i == 0);
				res -= res / i;
			}",method,
"		if (n != 1) {
			res = res * (n-1) / n;
		}",method,
"	public static void main(String[] args) {
		int[] testCases = {
			1,       // denegerate case
			2,       // prime
			11,      // prime
			2*2,     // power of prime
			3*3*3,   // power of prime
			3*5,     // product of distinct primes
			2*2*3*3, // product of distinct primes
			5*23,    // product of distinct primes
			5*5*23,  // product of distinct primes
		};
		int[] expectedResults = {
			1,
			1,
			10,
			2,
			18,
			8,
			12,
			88,
			440,
		};
		for (int idx = 0; idx < testCases.length; idx++) {
			System.out.println(""phi("" + testCases[idx] + "") = "" + phi(testCases[idx]));
			System.out.println(""Expected: "" + expectedResults[idx]);
		}
	}",method,
"		for (int idx = 0; idx < testCases.length; idx++) {
			System.out.println(""phi("" + testCases[idx] + "") = "" + phi(testCases[idx]));
			System.out.println(""Expected: "" + expectedResults[idx]);
		}",method,
"    public static int exponentBySquare(int num, int power){
        if(power==0)
            return 1;
        if(power==1)
            return num;
        int temp=exponentBySquare(num,power/2);
        temp*=temp;
        if(power%2==1){
            temp*=num;
        }
        return temp;
    }",method,
"        if(power%2==1){
            temp*=num;
        }",method,
"    public static void main(String[] args){
        System.out.println(exponentBySquare(2,9));
    }",method,
"public class EndpointEnablementProviderTests {
	@Test
	public void defaultEnablementDisabled() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED);
		validate(enablement, false, ""endpoint 'foo' is disabled by default"");
	}
	@Test
	public void defaultEnablementDisabledWithGeneralEnablement() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, ""endpoints.default.enabled=true"");
		validate(enablement, false, ""endpoint 'foo' is disabled by default"");
	}
	@Test
	public void defaultEnablementDisabledWithGeneralTechEnablement() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, EndpointExposure.WEB,
				""endpoints.default.web.enabled=true"");
		validate(enablement, false, ""endpoint 'foo' (web) is disabled by default"");
	}
	@Test
	public void defaultEnablementDisabledWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, ""endpoints.foo.enabled=true"");
		validate(enablement, true, ""found property endpoints.foo.enabled"");
	}
	@Test
	public void defaultEnablementDisabledWithTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, EndpointExposure.WEB,
				""endpoints.foo.web.enabled=true"");
		validate(enablement, true, ""found property endpoints.foo.web.enabled"");
	}
	@Test
	public void defaultEnablementDisabledWithIrrelevantTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, EndpointExposure.WEB,
				""endpoints.foo.jmx.enabled=true"");
		validate(enablement, false, ""endpoint 'foo' (web) is disabled by default"");
	}
	@Test
	public void defaultEnablementEnabled() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED);
		validate(enablement, true, ""endpoint 'bar' is enabled by default"");
	}
	@Test
	public void defaultEnablementEnabledWithGeneralDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, ""endpoints.default.enabled=false"");
		validate(enablement, true, ""endpoint 'bar' is enabled by default"");
	}
	@Test
	public void defaultEnablementEnabledWithGeneralTechDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, EndpointExposure.JMX,
				""endpoints.default.jmx.enabled=false"");
		validate(enablement, true, ""endpoint 'bar' (jmx) is enabled by default"");
	}
	@Test
	public void defaultEnablementEnabledWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, ""endpoints.bar.enabled=false"");
		validate(enablement, false, ""found property endpoints.bar.enabled"");
	}
	@Test
	public void defaultEnablementEnabledWithTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, EndpointExposure.JMX,
				""endpoints.bar.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.bar.jmx.enabled"");
	}
	@Test
	public void defaultEnablementEnabledWithIrrelevantTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, EndpointExposure.JMX,
				""endpoints.bar.web.enabled=false"");
		validate(enablement, true, ""endpoint 'bar' (jmx) is enabled by default"");
	}
	@Test
	public void defaultEnablementNeutral() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL);
		validate(enablement, true, ""endpoint 'biz' is enabled (default)"");
	}
	@Test
	public void defaultEnablementNeutralWeb() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.WEB);
		validate(enablement, false, ""endpoint 'default' (web) is disabled by default"");
	}
	@Test
	public void defaultEnablementNeutralJmx() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX);
		validate(enablement, true,
				""endpoint 'biz' (jmx) is enabled (default for jmx endpoints)"");
	}
	@Test
	public void defaultEnablementNeutralWithGeneralDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, ""endpoints.default.enabled=false"");
		validate(enablement, false, ""found property endpoints.default.enabled"");
	}
	@Test
	public void defaultEnablementNeutralJmxWithTechDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.default.jmx.enabled"");
	}
	@Test
	public void defaultEnablementNeutralTechTakesPrecedence() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=true"", ""endpoints.default.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.default.jmx.enabled"");
	}
	@Test
	public void defaultEnablementNeutralWebWithTechEnablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.WEB,
				""endpoints.default.web.enabled=true"");
		validate(enablement, true, ""found property endpoints.default.web.enabled"");
	}
	@Test
	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.web.enabled=false"");
		validate(enablement, true,
				""endpoint 'biz' (jmx) is enabled (default for jmx endpoints)"");
	}
	@Test
	public void defaultEnablementNeutralWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, ""endpoints.biz.enabled=false"");
		validate(enablement, false, ""found property endpoints.biz.enabled"");
	}
	@Test
	public void defaultEnablementNeutralWebWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.WEB,
				""endpoints.biz.web.enabled=true"");
		validate(enablement, true, ""found property endpoints.biz.web.enabled"");
	}
	@Test
	public void defaultEnablementNeutralJmxWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.biz.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.biz.jmx.enabled"");
	}
	@Test
	public void defaultEnablementNeutralTechTakesPrecedenceOnEverything() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=false"", ""endpoints.default.jmx.enabled=false"",
				""endpoints.biz.enabled=false"", ""endpoints.biz.jmx.enabled=true"");
		validate(enablement, true, ""found property endpoints.biz.jmx.enabled"");
	}
	@Test
	public void defaultEnablementNeutralSpecificTakesPrecedenceOnDefaults() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=false"", ""endpoints.default.jmx.enabled=false"",
				""endpoints.biz.enabled=true"");
		validate(enablement, true, ""found property endpoints.biz.enabled"");
	}
	@Test
	public void defaultEnablementNeutralDefaultTechTakesPrecedenceOnGeneralDefault() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=false"", ""endpoints.default.jmx.enabled=true"");
		validate(enablement, true, ""found property endpoints.default.jmx.enabled"");
	}
	private EndpointEnablement getEndpointEnablement(String id,
			DefaultEnablement defaultEnablement, String... environment) {
		return getEndpointEnablement(id, defaultEnablement, null, environment);
	}
	private EndpointEnablement getEndpointEnablement(String id,
			DefaultEnablement defaultEnablement, EndpointExposure exposure,
			String... environment) {
		MockEnvironment env = new MockEnvironment();
		TestPropertyValues.of(environment).applyTo(env);
		EndpointEnablementProvider provider = new EndpointEnablementProvider(env);
		if (exposure != null) {
			return provider.getEndpointEnablement(id, defaultEnablement, exposure);
		}
		return provider.getEndpointEnablement(id, defaultEnablement);
	}
	private void validate(EndpointEnablement enablement, boolean enabled,
			String... messages) {
		assertThat(enablement).isNotNull();
		assertThat(enablement.isEnabled()).isEqualTo(enabled);
		if (!ObjectUtils.isEmpty(messages)) {
			assertThat(enablement.getReason()).contains(messages);
		}
	}
}",class,
"	@Test
	public void defaultEnablementDisabled() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED);
		validate(enablement, false, ""endpoint 'foo' is disabled by default"");
	}",method,
"	@Test
	public void defaultEnablementDisabledWithGeneralEnablement() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, ""endpoints.default.enabled=true"");
		validate(enablement, false, ""endpoint 'foo' is disabled by default"");
	}",method,
"	@Test
	public void defaultEnablementDisabledWithGeneralTechEnablement() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, EndpointExposure.WEB,
				""endpoints.default.web.enabled=true"");
		validate(enablement, false, ""endpoint 'foo' (web) is disabled by default"");
	}",method,
"	@Test
	public void defaultEnablementDisabledWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, ""endpoints.foo.enabled=true"");
		validate(enablement, true, ""found property endpoints.foo.enabled"");
	}",method,
"	@Test
	public void defaultEnablementDisabledWithTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, EndpointExposure.WEB,
				""endpoints.foo.web.enabled=true"");
		validate(enablement, true, ""found property endpoints.foo.web.enabled"");
	}",method,
"	@Test
	public void defaultEnablementDisabledWithIrrelevantTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""foo"",
				DefaultEnablement.DISABLED, EndpointExposure.WEB,
				""endpoints.foo.jmx.enabled=true"");
		validate(enablement, false, ""endpoint 'foo' (web) is disabled by default"");
	}",method,
"	@Test
	public void defaultEnablementEnabled() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED);
		validate(enablement, true, ""endpoint 'bar' is enabled by default"");
	}",method,
"	@Test
	public void defaultEnablementEnabledWithGeneralDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, ""endpoints.default.enabled=false"");
		validate(enablement, true, ""endpoint 'bar' is enabled by default"");
	}",method,
"	@Test
	public void defaultEnablementEnabledWithGeneralTechDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, EndpointExposure.JMX,
				""endpoints.default.jmx.enabled=false"");
		validate(enablement, true, ""endpoint 'bar' (jmx) is enabled by default"");
	}",method,
"	@Test
	public void defaultEnablementEnabledWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, ""endpoints.bar.enabled=false"");
		validate(enablement, false, ""found property endpoints.bar.enabled"");
	}",method,
"	@Test
	public void defaultEnablementEnabledWithTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, EndpointExposure.JMX,
				""endpoints.bar.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.bar.jmx.enabled"");
	}",method,
"	@Test
	public void defaultEnablementEnabledWithIrrelevantTechOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""bar"",
				DefaultEnablement.ENABLED, EndpointExposure.JMX,
				""endpoints.bar.web.enabled=false"");
		validate(enablement, true, ""endpoint 'bar' (jmx) is enabled by default"");
	}",method,
"	@Test
	public void defaultEnablementNeutral() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL);
		validate(enablement, true, ""endpoint 'biz' is enabled (default)"");
	}",method,
"	@Test
	public void defaultEnablementNeutralWeb() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.WEB);
		validate(enablement, false, ""endpoint 'default' (web) is disabled by default"");
	}",method,
"	@Test
	public void defaultEnablementNeutralJmx() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX);
		validate(enablement, true,
				""endpoint 'biz' (jmx) is enabled (default for jmx endpoints)"");
	}",method,
"	@Test
	public void defaultEnablementNeutralWithGeneralDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, ""endpoints.default.enabled=false"");
		validate(enablement, false, ""found property endpoints.default.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralJmxWithTechDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.default.jmx.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralTechTakesPrecedence() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=true"", ""endpoints.default.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.default.jmx.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralWebWithTechEnablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.WEB,
				""endpoints.default.web.enabled=true"");
		validate(enablement, true, ""found property endpoints.default.web.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.web.enabled=false"");
		validate(enablement, true,
				""endpoint 'biz' (jmx) is enabled (default for jmx endpoints)"");
	}",method,
"	@Test
	public void defaultEnablementNeutralWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, ""endpoints.biz.enabled=false"");
		validate(enablement, false, ""found property endpoints.biz.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralWebWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.WEB,
				""endpoints.biz.web.enabled=true"");
		validate(enablement, true, ""found property endpoints.biz.web.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralJmxWithOverride() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.biz.jmx.enabled=false"");
		validate(enablement, false, ""found property endpoints.biz.jmx.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralTechTakesPrecedenceOnEverything() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=false"", ""endpoints.default.jmx.enabled=false"",
				""endpoints.biz.enabled=false"", ""endpoints.biz.jmx.enabled=true"");
		validate(enablement, true, ""found property endpoints.biz.jmx.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralSpecificTakesPrecedenceOnDefaults() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=false"", ""endpoints.default.jmx.enabled=false"",
				""endpoints.biz.enabled=true"");
		validate(enablement, true, ""found property endpoints.biz.enabled"");
	}",method,
"	@Test
	public void defaultEnablementNeutralDefaultTechTakesPrecedenceOnGeneralDefault() {
		EndpointEnablement enablement = getEndpointEnablement(""biz"",
				DefaultEnablement.NEUTRAL, EndpointExposure.JMX,
				""endpoints.default.enabled=false"", ""endpoints.default.jmx.enabled=true"");
		validate(enablement, true, ""found property endpoints.default.jmx.enabled"");
	}",method,
"	private EndpointEnablement getEndpointEnablement(String id,
			DefaultEnablement defaultEnablement, String... environment) {
		return getEndpointEnablement(id, defaultEnablement, null, environment);
	}",method,
"	private EndpointEnablement getEndpointEnablement(String id,
			DefaultEnablement defaultEnablement, EndpointExposure exposure,
			String... environment) {
		MockEnvironment env = new MockEnvironment();
		TestPropertyValues.of(environment).applyTo(env);
		EndpointEnablementProvider provider = new EndpointEnablementProvider(env);
		if (exposure != null) {
			return provider.getEndpointEnablement(id, defaultEnablement, exposure);
		}
		return provider.getEndpointEnablement(id, defaultEnablement);
	}",method,
"		if (exposure != null) {
			return provider.getEndpointEnablement(id, defaultEnablement, exposure);
		}",method,
"	private void validate(EndpointEnablement enablement, boolean enabled,
			String... messages) {
		assertThat(enablement).isNotNull();
		assertThat(enablement.isEnabled()).isEqualTo(enabled);
		if (!ObjectUtils.isEmpty(messages)) {
			assertThat(enablement.getReason()).contains(messages);
		}
	}",method,
"public class AarGeneratorBuilder {
  private ResourceContainer primary;
  private Artifact manifest;
  private Artifact rTxt;
  private Artifact classes;
  private Artifact aarOut;
  private boolean throwOnResourceConflict;
  private final RuleContext ruleContext;
  private final SpawnAction.Builder builder;
  public AarGeneratorBuilder(RuleContext ruleContext) {
    this.ruleContext = ruleContext;
    this.builder = new SpawnAction.Builder();
  }
  public AarGeneratorBuilder withPrimary(ResourceContainer primary) {
    this.primary = primary;
    return this;
  }
  public AarGeneratorBuilder withManifest(Artifact manifest) {
    this.manifest = manifest;
    return this;
  }
  public AarGeneratorBuilder withRtxt(Artifact rTxt) {
    this.rTxt = rTxt;
    return this;
  }
  public AarGeneratorBuilder withClasses(Artifact classes) {
    this.classes = classes;
    return this;
  }
  public AarGeneratorBuilder setAAROut(Artifact aarOut) {
    this.aarOut = aarOut;
    return this;
  }
  public AarGeneratorBuilder setThrowOnResourceConflict(boolean throwOnResourceConflict) {
    this.throwOnResourceConflict = throwOnResourceConflict;
    return this;
  }
  public void build(ActionConstructionContext context) {
    List<Artifact> outs = new ArrayList<>();
    List<Artifact> ins = new ArrayList<>();
    List<String> args = new ArrayList<>();
    // Set the busybox tool
    args.add(""--tool"");
    args.add(""GENERATE_AAR"");
    // Deliminate between the tool and the tool arguments.
    args.add(""--"");
    args.add(""--mainData"");
    addPrimaryResourceContainer(ins, args, primary);
    if (manifest != null) {
      args.add(""--manifest"");
      args.add(manifest.getExecPathString());
      ins.add(manifest);
    }
    if (rTxt != null) {
      args.add(""--rtxt"");
      args.add(rTxt.getExecPathString());
      ins.add(rTxt);
    }
    if (classes != null) {
      args.add(""--classes"");
      args.add(classes.getExecPathString());
      ins.add(classes);
    }
    args.add(""--aarOutput"");
    args.add(aarOut.getExecPathString());
    outs.add(aarOut);
    if (throwOnResourceConflict) {
      args.add(""--throwOnResourceConflict"");
    }
    ParamFileInfo.Builder paramFileInfo = ParamFileInfo.builder(ParameterFileType.SHELL_QUOTED);
    // Some flags (e.g. --mainData) may specify lists (or lists of lists) separated by special
    // characters (colon, semicolon, hashmark, ampersand) that don't work on Windows, and quoting
    // semantics are very complicated (more so than in Bash), so let's just always use a parameter
    // file.
    // TODO(laszlocsomor), TODO(corysmith): restructure the Android BusyBux's flags by deprecating
    // list-type and list-of-list-type flags that use such problematic separators in favor of
    // multi-value flags (to remove one level of listing) and by changing all list separators to a
    // platform-safe character (= comma).
    paramFileInfo.setUseAlways(OS.getCurrent() == OS.WINDOWS);
    ruleContext.registerAction(
        this.builder
            .useDefaultShellEnvironment()
            .addInputs(ImmutableList.<Artifact>copyOf(ins))
            .addOutputs(ImmutableList.<Artifact>copyOf(outs))
            .addCommandLine(CommandLine.of(args), paramFileInfo.build())
            .setExecutable(
                ruleContext.getExecutablePrerequisite(""$android_resources_busybox"", Mode.HOST))
            .setProgressMessage(""Building AAR package for %s"", ruleContext.getLabel())
            .setMnemonic(""AARGenerator"")
            .build(context));
  }
  private void addPrimaryResourceContainer(List<Artifact> inputs, List<String> args,
      ResourceContainer container) {
    Iterables.addAll(inputs, container.getArtifacts());
    inputs.add(container.getManifest());
    // no R.txt, because it will be generated from this action.
    args.add(String.format(""%s:%s:%s"",
        convertRoots(container, ResourceType.RESOURCES),
        convertRoots(container, ResourceType.ASSETS),
        container.getManifest().getExecPathString()
    ));
  }
  private static String convertRoots(ResourceContainer container, ResourceType resourceType) {
    return Joiner.on(""#"").join(
        Iterators.transform(
            container.getRoots(resourceType).iterator(), Functions.toStringFunction()));
  }
}",class,
"  public AarGeneratorBuilder(RuleContext ruleContext) {
    this.ruleContext = ruleContext;
    this.builder = new SpawnAction.Builder();
  }",method,
"  public AarGeneratorBuilder withPrimary(ResourceContainer primary) {
    this.primary = primary;
    return this;
  }",method,
"  public AarGeneratorBuilder withManifest(Artifact manifest) {
    this.manifest = manifest;
    return this;
  }",method,
"  public AarGeneratorBuilder withRtxt(Artifact rTxt) {
    this.rTxt = rTxt;
    return this;
  }",method,
"  public AarGeneratorBuilder withClasses(Artifact classes) {
    this.classes = classes;
    return this;
  }",method,
"  public AarGeneratorBuilder setAAROut(Artifact aarOut) {
    this.aarOut = aarOut;
    return this;
  }",method,
"  public AarGeneratorBuilder setThrowOnResourceConflict(boolean throwOnResourceConflict) {
    this.throwOnResourceConflict = throwOnResourceConflict;
    return this;
  }",method,
"  public void build(ActionConstructionContext context) {
    List<Artifact> outs = new ArrayList<>();
    List<Artifact> ins = new ArrayList<>();
    List<String> args = new ArrayList<>();
    // Set the busybox tool
    args.add(""--tool"");
    args.add(""GENERATE_AAR"");
    // Deliminate between the tool and the tool arguments.
    args.add(""--"");
    args.add(""--mainData"");
    addPrimaryResourceContainer(ins, args, primary);
    if (manifest != null) {
      args.add(""--manifest"");
      args.add(manifest.getExecPathString());
      ins.add(manifest);
    }
    if (rTxt != null) {
      args.add(""--rtxt"");
      args.add(rTxt.getExecPathString());
      ins.add(rTxt);
    }
    if (classes != null) {
      args.add(""--classes"");
      args.add(classes.getExecPathString());
      ins.add(classes);
    }
    args.add(""--aarOutput"");
    args.add(aarOut.getExecPathString());
    outs.add(aarOut);
    if (throwOnResourceConflict) {
      args.add(""--throwOnResourceConflict"");
    }
    ParamFileInfo.Builder paramFileInfo = ParamFileInfo.builder(ParameterFileType.SHELL_QUOTED);
    // Some flags (e.g. --mainData) may specify lists (or lists of lists) separated by special
    // characters (colon, semicolon, hashmark, ampersand) that don't work on Windows, and quoting
    // semantics are very complicated (more so than in Bash), so let's just always use a parameter
    // file.
    // TODO(laszlocsomor), TODO(corysmith): restructure the Android BusyBux's flags by deprecating
    // list-type and list-of-list-type flags that use such problematic separators in favor of
    // multi-value flags (to remove one level of listing) and by changing all list separators to a
    // platform-safe character (= comma).
    paramFileInfo.setUseAlways(OS.getCurrent() == OS.WINDOWS);
    ruleContext.registerAction(
        this.builder
            .useDefaultShellEnvironment()
            .addInputs(ImmutableList.<Artifact>copyOf(ins))
            .addOutputs(ImmutableList.<Artifact>copyOf(outs))
            .addCommandLine(CommandLine.of(args), paramFileInfo.build())
            .setExecutable(
                ruleContext.getExecutablePrerequisite(""$android_resources_busybox"", Mode.HOST))
            .setProgressMessage(""Building AAR package for %s"", ruleContext.getLabel())
            .setMnemonic(""AARGenerator"")
            .build(context));
  }",method,
"    if (manifest != null) {
      args.add(""--manifest"");
      args.add(manifest.getExecPathString());
      ins.add(manifest);
    }",method,
"    if (rTxt != null) {
      args.add(""--rtxt"");
      args.add(rTxt.getExecPathString());
      ins.add(rTxt);
    }",method,
"    if (classes != null) {
      args.add(""--classes"");
      args.add(classes.getExecPathString());
      ins.add(classes);
    }",method,
"    if (throwOnResourceConflict) {
      args.add(""--throwOnResourceConflict"");
    }",method,
"  private void addPrimaryResourceContainer(List<Artifact> inputs, List<String> args,
      ResourceContainer container) {
    Iterables.addAll(inputs, container.getArtifacts());
    inputs.add(container.getManifest());
    // no R.txt, because it will be generated from this action.
    args.add(String.format(""%s:%s:%s"",
        convertRoots(container, ResourceType.RESOURCES),
        convertRoots(container, ResourceType.ASSETS),
        container.getManifest().getExecPathString()
    ));
  }",method,
"  private static String convertRoots(ResourceContainer container, ResourceType resourceType) {
    return Joiner.on(""#"").join(
        Iterators.transform(
            container.getRoots(resourceType).iterator(), Functions.toStringFunction()));
  }",method,
"public class BinaryBasePlugin implements Plugin<Project> {
    @Override
    public void apply(final Project target) {
        target.getPluginManager().apply(ComponentBasePlugin.class);
    }
    @SuppressWarnings(""UnusedDeclaration"")
    static class Rules extends RuleSource {
        @Model
        void binaries(BinaryContainer binaries) {
        }
        @ComponentType
        void registerBaseBinarySpec(TypeBuilder<BinarySpec> builder) {
            builder.defaultImplementation(BaseBinarySpec.class);
            builder.internalView(BinarySpecInternal.class);
        }
        @Mutate
        void copyBinaryTasksToTaskContainer(TaskContainer tasks, BinaryContainer binaries) {
            for (BinarySpec binary : binaries) {
                tasks.addAll(binary.getTasks());
                Task buildTask = binary.getBuildTask();
                if (buildTask != null) {
                    tasks.add(buildTask);
                }
            }
        }
        @Finalize
        public void defineBuildLifecycleTask(@Each BinarySpecInternal binary, ITaskFactory taskFactory) {
            if (binary.isLegacyBinary()) {
                return;
            }
            TaskInternal binaryLifecycleTask = taskFactory.create(binary.getProjectScopedName(), DefaultTask.class);
            binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
            binaryLifecycleTask.setDescription(String.format(""Assembles %s."", binary));
            binary.setBuildTask(binaryLifecycleTask);
        }
        @Finalize
        void addSourceSetsOwnedByBinariesToTheirInputs(@Each BinarySpecInternal binary) {
            if (binary.isLegacyBinary()) {
                return;
            }
            binary.getInputs().addAll(binary.getSources().values());
        }
    }
}",class,
"    static class Rules extends RuleSource {
        @Model
        void binaries(BinaryContainer binaries) {
        }
        @ComponentType
        void registerBaseBinarySpec(TypeBuilder<BinarySpec> builder) {
            builder.defaultImplementation(BaseBinarySpec.class);
            builder.internalView(BinarySpecInternal.class);
        }
        @Mutate
        void copyBinaryTasksToTaskContainer(TaskContainer tasks, BinaryContainer binaries) {
            for (BinarySpec binary : binaries) {
                tasks.addAll(binary.getTasks());
                Task buildTask = binary.getBuildTask();
                if (buildTask != null) {
                    tasks.add(buildTask);
                }
            }
        }
        @Finalize
        public void defineBuildLifecycleTask(@Each BinarySpecInternal binary, ITaskFactory taskFactory) {
            if (binary.isLegacyBinary()) {
                return;
            }
            TaskInternal binaryLifecycleTask = taskFactory.create(binary.getProjectScopedName(), DefaultTask.class);
            binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
            binaryLifecycleTask.setDescription(String.format(""Assembles %s."", binary));
            binary.setBuildTask(binaryLifecycleTask);
        }
        @Finalize
        void addSourceSetsOwnedByBinariesToTheirInputs(@Each BinarySpecInternal binary) {
            if (binary.isLegacyBinary()) {
                return;
            }
            binary.getInputs().addAll(binary.getSources().values());
        }
    }",class,
"    @Override
    public void apply(final Project target) {
        target.getPluginManager().apply(ComponentBasePlugin.class);
    }",method,
"        @Model
        void binaries(BinaryContainer binaries) {
        }",method,
"        @ComponentType
        void registerBaseBinarySpec(TypeBuilder<BinarySpec> builder) {
            builder.defaultImplementation(BaseBinarySpec.class);
            builder.internalView(BinarySpecInternal.class);
        }",method,
"        @Mutate
        void copyBinaryTasksToTaskContainer(TaskContainer tasks, BinaryContainer binaries) {
            for (BinarySpec binary : binaries) {
                tasks.addAll(binary.getTasks());
                Task buildTask = binary.getBuildTask();
                if (buildTask != null) {
                    tasks.add(buildTask);
                }
            }
        }",method,
"            for (BinarySpec binary : binaries) {
                tasks.addAll(binary.getTasks());
                Task buildTask = binary.getBuildTask();
                if (buildTask != null) {
                    tasks.add(buildTask);
                }
            }",method,
"                if (buildTask != null) {
                    tasks.add(buildTask);
                }",method,
"        @Finalize
        public void defineBuildLifecycleTask(@Each BinarySpecInternal binary, ITaskFactory taskFactory) {
            if (binary.isLegacyBinary()) {
                return;
            }
            TaskInternal binaryLifecycleTask = taskFactory.create(binary.getProjectScopedName(), DefaultTask.class);
            binaryLifecycleTask.setGroup(LifecycleBasePlugin.BUILD_GROUP);
            binaryLifecycleTask.setDescription(String.format(""Assembles %s."", binary));
            binary.setBuildTask(binaryLifecycleTask);
        }",method,
"        @Finalize
        void addSourceSetsOwnedByBinariesToTheirInputs(@Each BinarySpecInternal binary) {
            if (binary.isLegacyBinary()) {
                return;
            }
            binary.getInputs().addAll(binary.getSources().values());
        }",method,
"import java.io.Reader;
class EscapePreprocessor extends FilterReader {
  private final TIntArrayList myQueuedChars;
  private final TIntIntHashMap myLengthMap;
  private int myOffset;
  public EscapePreprocessor(Reader reader, int startOffset, TIntIntHashMap map) {
    super(reader);
    myOffset = startOffset;
    myQueuedChars = new TIntArrayList();
    myLengthMap = map;
  }
  @Override
  public int read(char cbuf[], int off, int len) throws IOException {
    final int i = read();
    if (i == -1) {
      return -1;
    }
    cbuf[off] = (char)i; // not really efficient, but acceptable since we're usually not having to deal with megabytes of RNC files...
    return 1;
  }
  @Override
  public int read() throws IOException {
    if (myQueuedChars.size() > 0) {
      return consume();
    }
    final int i = super.read();
    if (i == -1) {
      return -1;
    }
    myOffset++;
    switch (i) {
      case '\r':
        assert false : ""Unexpected newline character"";  // IDEA document's are supposed to newlines normalized to \n
        if (peek() == '\n') {
          consume();
          myLengthMap.put(myOffset - 1, 2);
        }
      case '\n':
        return '\u0000';
      case '\\':
        int n = 0;
        int x;
        while ((x = peek()) == 'x') {
          n++;
        }
        if (n > 0 && x == '{') {
          n++;
        } else {
          return i;
        }
        int value = 0;
        while (isHexChar((char)(x = peek()))) {
          n++;
          value <<= 4;
          value |= Character.digit(x, 16);
        }
        if (x == '}') {
          n++;
        }
        consume(n);
        myLengthMap.put(myOffset - 1, n);
        myOffset += n;
        if (value <= 0xFFFF) {
          return value;
        }
        myQueuedChars.add(Utf16.surrogate2(value));
        return Utf16.surrogate1(value);
    }
    return i;
  }
  private static boolean isHexChar(char i) {
    if (Character.isDigit(i)) return true;
    final char c = Character.toLowerCase(i);
    return c >= 'a' && c <= 'f';
  }
  private int consume() {
    if (myQueuedChars.size() > 0) {
      myOffset++;
      return myQueuedChars.remove(0);
    }
    return -1;
  }
  private void consume(int n) {
    myQueuedChars.remove(0, n);
  }
  private int peek() throws IOException {
    final int i = super.read();
    if (i == -1) {
      return -1;
    }
    myQueuedChars.add(i);
    return i;
  }
}",class,
"  public EscapePreprocessor(Reader reader, int startOffset, TIntIntHashMap map) {
    super(reader);
    myOffset = startOffset;
    myQueuedChars = new TIntArrayList();
    myLengthMap = map;
  }",method,
"  @Override
  public int read(char cbuf[], int off, int len) throws IOException {
    final int i = read();
    if (i == -1) {
      return -1;
    }
    cbuf[off] = (char)i; // not really efficient, but acceptable since we're usually not having to deal with megabytes of RNC files...
    return 1;
  }",method,
"    if (i == -1) {
      return -1;
    }",method,
"  @Override
  public int read() throws IOException {
    if (myQueuedChars.size() > 0) {
      return consume();
    }
    final int i = super.read();
    if (i == -1) {
      return -1;
    }
    myOffset++;
    switch (i) {
      case '\r':
        assert false : ""Unexpected newline character"";  // IDEA document's are supposed to newlines normalized to \n
        if (peek() == '\n') {
          consume();
          myLengthMap.put(myOffset - 1, 2);
        }
      case '\n':
        return '\u0000';
      case '\\':
        int n = 0;
        int x;
        while ((x = peek()) == 'x') {
          n++;
        }
        if (n > 0 && x == '{') {
          n++;
        } else {
          return i;
        }
        int value = 0;
        while (isHexChar((char)(x = peek()))) {
          n++;
          value <<= 4;
          value |= Character.digit(x, 16);
        }
        if (x == '}') {
          n++;
        }
        consume(n);
        myLengthMap.put(myOffset - 1, n);
        myOffset += n;
        if (value <= 0xFFFF) {
          return value;
        }
        myQueuedChars.add(Utf16.surrogate2(value));
        return Utf16.surrogate1(value);
    }
    return i;
  }",method,
"    if (i == -1) {
      return -1;
    }",method,
"    switch (i) {
      case '\r':
        assert false : ""Unexpected newline character"";  // IDEA document's are supposed to newlines normalized to \n
        if (peek() == '\n') {
          consume();
          myLengthMap.put(myOffset - 1, 2);
        }
      case '\n':
        return '\u0000';
      case '\\':
        int n = 0;
        int x;
        while ((x = peek()) == 'x') {
          n++;
        }
        if (n > 0 && x == '{') {
          n++;
        } else {
          return i;
        }
        int value = 0;
        while (isHexChar((char)(x = peek()))) {
          n++;
          value <<= 4;
          value |= Character.digit(x, 16);
        }
        if (x == '}') {
          n++;
        }
        consume(n);
        myLengthMap.put(myOffset - 1, n);
        myOffset += n;
        if (value <= 0xFFFF) {
          return value;
        }
        myQueuedChars.add(Utf16.surrogate2(value));
        return Utf16.surrogate1(value);
    }",method,
"        if (n > 0 && x == '{') {
          n++;
        }",method,
"        if (x == '}') {
          n++;
        }",method,
"        if (value <= 0xFFFF) {
          return value;
        }",method,
"  private static boolean isHexChar(char i) {
    if (Character.isDigit(i)) return true;
    final char c = Character.toLowerCase(i);
    return c >= 'a' && c <= 'f';
  }",method,
"  private int consume() {
    if (myQueuedChars.size() > 0) {
      myOffset++;
      return myQueuedChars.remove(0);
    }
    return -1;
  }",method,
"  private void consume(int n) {
    myQueuedChars.remove(0, n);
  }",method,
"  private int peek() throws IOException {
    final int i = super.read();
    if (i == -1) {
      return -1;
    }
    myQueuedChars.add(i);
    return i;
  }",method,
