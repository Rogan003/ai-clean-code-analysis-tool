code_snippet,type,score
"  public boolean isEmpty() {
    return referencedClasses.isEmpty() && referencedMethods.isEmpty() && referencedFields.isEmpty();
  }",method,
"  public void addConstructorRemovedClass(String clazz) {
    hasConstructorRemovedClasses.add(clazz);
  }",method,
"  public boolean classHasConstructorRemoved(String clazz) {
    return hasConstructorRemovedClasses.contains(clazz);
  }",method,
"  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(referencedClasses.asList().toString() + ""\n"");
    builder.append(referencedFields.toString() + ""\n"");
    builder.append(referencedMethods.toString());
    return builder.toString();
  }",method,
"final class BookmarkAdapter extends BaseAdapter {
  private final Context context;
  private final List<String[]> titleURLs;
  BookmarkAdapter(Context context, List<String[]> titleURLs) {
    this.context = context;
    this.titleURLs = titleURLs;
  }
  @Override
  public int getCount() {
    return titleURLs.size();
  }
  @Override
  public Object getItem(int index) {
    return titleURLs.get(index);
  }
  @Override
  public long getItemId(int index) {
    return index;
  }
  @Override
  public View getView(int index, View view, ViewGroup viewGroup) {
    View layout;
    if (view instanceof LinearLayout) {
      layout = view;
    } else {
      LayoutInflater factory = LayoutInflater.from(context);
      layout = factory.inflate(R.layout.bookmark_picker_list_item, viewGroup, false);
    }
    String[] titleURL = titleURLs.get(index);
    ((TextView) layout.findViewById(R.id.bookmark_title)).setText(titleURL[0]);
    ((TextView) layout.findViewById(R.id.bookmark_url)).setText(titleURL[1]);
    return layout;
  }
}",class,
"  BookmarkAdapter(Context context, List<String[]> titleURLs) {
    this.context = context;
    this.titleURLs = titleURLs;
  }",method,
"  @Override
  public int getCount() {
    return titleURLs.size();
  }",method,
"  @Override
  public Object getItem(int index) {
    return titleURLs.get(index);
  }",method,
"  @Override
  public long getItemId(int index) {
    return index;
  }",method,
"  @Override
  public View getView(int index, View view, ViewGroup viewGroup) {
    View layout;
    if (view instanceof LinearLayout) {
      layout = view;
    } else {
      LayoutInflater factory = LayoutInflater.from(context);
      layout = factory.inflate(R.layout.bookmark_picker_list_item, viewGroup, false);
    }
    String[] titleURL = titleURLs.get(index);
    ((TextView) layout.findViewById(R.id.bookmark_title)).setText(titleURL[0]);
    ((TextView) layout.findViewById(R.id.bookmark_url)).setText(titleURL[1]);
    return layout;
  }",method,
"    if (view instanceof LinearLayout) {
      layout = view;
    }",method,
"public class GenericDomValueReference<T> extends PsiReferenceBase<XmlElement> implements EmptyResolveMessageProvider, ResolvingHint {
  private final GenericDomValue<T> myGenericValue;
  public GenericDomValueReference(GenericDomValue<T> domValue) {
    super(DomUtil.getValueElement(domValue));
    myGenericValue = domValue;
    assert DomUtil.hasXml(domValue);
    setRangeInElement(createTextRange());
  }
  protected final PsiManager getPsiManager() {
    return PsiManager.getInstance(myGenericValue.getManager().getProject());
  }
  protected TextRange createTextRange() {
    if (myGenericValue instanceof GenericAttributeValue) {
      final GenericAttributeValue genericAttributeValue = (GenericAttributeValue)myGenericValue;
      final XmlAttributeValue attributeValue = genericAttributeValue.getXmlAttributeValue();
      if (attributeValue == null) {
        return TextRange.from(0, genericAttributeValue.getXmlAttribute().getTextLength());
      }
      final int length = attributeValue.getTextLength();
      return length < 2 ? TextRange.from(0, length) : new TextRange(1, length - 1);
    }
    final XmlTag tag = myGenericValue.getXmlTag();
    assert tag != null;
    return XmlTagUtil.getTrimmedValueRange(tag);
  }
  protected final GenericDomValue<T> getGenericValue() {
    return myGenericValue;
  }
  @Override
  public boolean isSoft() {
    return true;
  }
  @Nullable
  protected PsiElement resolveInner(T o) {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      return ((ResolvingConverter<T>)converter).resolve(o, getConvertContext());
    }
    if (o instanceof PsiElement) {
      return (PsiElement)o;
    }
    if (o instanceof DomElement) {
      DomTarget target = DomTarget.getTarget((DomElement)o);
      return target == null ? null : PomService.convertToPsi(target);
    }
    if (o instanceof MergedObject) {
      final List<T> list = ((MergedObject<T>)o).getImplementations();
      for (final T o1 : list) {
        final PsiElement psiElement = resolveInner(o1);
        if (psiElement != null) {
          return psiElement;
        }
      }
    }
    return o != null ? getElement() : null;
  }
  @Override
  public boolean isReferenceTo(final PsiElement element) {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      T value = myGenericValue.getValue();
      if (value instanceof DomElement && element instanceof PomTargetPsiElementImpl) {
        PomTarget target = ((PomTargetPsiElementImpl)element).getTarget();
        if (target instanceof DomTarget) {
          if (value.equals(((DomTarget)target).getDomElement())) {
            return true;
          }
        }
      }
      return ((ResolvingConverter<T>)converter).isReferenceTo(element, getStringValue(), value, getConvertContext());
    }
    return super.isReferenceTo(element);
  }
  private String getStringValue() {
    return myGenericValue.getStringValue();
  }
  public Converter<T> getConverter() {
    return WrappingConverter.getDeepestConverter(myGenericValue.getConverter(), myGenericValue);
  }
  @Override
  @Nullable
  public PsiElement resolve() {
    final T value = myGenericValue.getValue();
    return value == null ? null : resolveInner(value);
  }
  @Override
  @NotNull
  public String getCanonicalText() {
    return StringUtil.notNullize(getStringValue());
  }
  @Override
  @NotNull
  public String getUnresolvedMessagePattern() {
    final ConvertContext context = getConvertContext();
    return getConverter().getErrorMessage(getStringValue(), context);
  }
  public final ConvertContext getConvertContext() {
    return ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(myGenericValue));
  }
  @Override
  public PsiElement handleElementRename(final String newElementName) throws IncorrectOperationException {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      ((ResolvingConverter)converter).handleElementRename(myGenericValue, getConvertContext(), newElementName);
      return myGenericValue.getXmlTag();
    }
    return super.handleElementRename(newElementName);
  }
  @Override
  public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      ((ResolvingConverter)converter).bindReference(myGenericValue, getConvertContext(), element);
      return myGenericValue.getXmlTag();
    }
    if (element instanceof XmlTag) {
      DomElement domElement = myGenericValue.getManager().getDomElement((XmlTag) element);
      if (domElement != null) {
        myGenericValue.setValue((T)domElement);
      } else {
        myGenericValue.setStringValue(((XmlTag)element).getName());
      }
      return myGenericValue.getXmlTag();
    }
    return null;
  }
  @Override
  @NotNull
  public Object[] getVariants() {
    final Converter<T> converter = getConverter();
    if (converter instanceof EnumConverter || converter == ResolvingConverter.BOOLEAN_CONVERTER) {
      if (DomCompletionContributor.isSchemaEnumerated(getElement())) return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    if (converter instanceof ResolvingConverter) {
      final ResolvingConverter<T> resolvingConverter = (ResolvingConverter<T>)converter;
      ArrayList<Object> result = new ArrayList<>();
      final ConvertContext convertContext = getConvertContext();
      for (T variant: resolvingConverter.getVariants(convertContext)) {
        LookupElement lookupElement = resolvingConverter.createLookupElement(variant);
        if (lookupElement != null) {
          result.add(lookupElement);
          continue;
        }
        String name = converter.toString(variant, convertContext);
        if (name != null) {
          result.add(ElementPresentationManager.getInstance().createVariant(variant, name, ((ResolvingConverter)converter).getPsiElement(variant)));
        }
      }
      for (final String string : resolvingConverter.getAdditionalVariants(convertContext)) {
        result.add(LookupValueFactory.createLookupValue(string, null));
      }
      return result.toArray();
    }
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  @Override
  public boolean canResolveTo(Class<? extends PsiElement> elementClass) {
    Converter<T> converter = getConverter();
    return !(converter instanceof ResolvingConverter) || ((ResolvingConverter)converter).canResolveTo(elementClass);
  }
}",class,
"  public GenericDomValueReference(GenericDomValue<T> domValue) {
    super(DomUtil.getValueElement(domValue));
    myGenericValue = domValue;
    assert DomUtil.hasXml(domValue);
    setRangeInElement(createTextRange());
  }",method,
"  protected final PsiManager getPsiManager() {
    return PsiManager.getInstance(myGenericValue.getManager().getProject());
  }",method,
"  protected TextRange createTextRange() {
    if (myGenericValue instanceof GenericAttributeValue) {
      final GenericAttributeValue genericAttributeValue = (GenericAttributeValue)myGenericValue;
      final XmlAttributeValue attributeValue = genericAttributeValue.getXmlAttributeValue();
      if (attributeValue == null) {
        return TextRange.from(0, genericAttributeValue.getXmlAttribute().getTextLength());
      }
      final int length = attributeValue.getTextLength();
      return length < 2 ? TextRange.from(0, length) : new TextRange(1, length - 1);
    }
    final XmlTag tag = myGenericValue.getXmlTag();
    assert tag != null;
    return XmlTagUtil.getTrimmedValueRange(tag);
  }",method,
"    if (myGenericValue instanceof GenericAttributeValue) {
      final GenericAttributeValue genericAttributeValue = (GenericAttributeValue)myGenericValue;
      final XmlAttributeValue attributeValue = genericAttributeValue.getXmlAttributeValue();
      if (attributeValue == null) {
        return TextRange.from(0, genericAttributeValue.getXmlAttribute().getTextLength());
      }
      final int length = attributeValue.getTextLength();
      return length < 2 ? TextRange.from(0, length) : new TextRange(1, length - 1);
    }",method,
"      if (attributeValue == null) {
        return TextRange.from(0, genericAttributeValue.getXmlAttribute().getTextLength());
      }",method,
"  protected final GenericDomValue<T> getGenericValue() {
    return myGenericValue;
  }",method,
"  @Override
  public boolean isSoft() {
    return true;
  }",method,
"  @Nullable
  protected PsiElement resolveInner(T o) {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      return ((ResolvingConverter<T>)converter).resolve(o, getConvertContext());
    }
    if (o instanceof PsiElement) {
      return (PsiElement)o;
    }
    if (o instanceof DomElement) {
      DomTarget target = DomTarget.getTarget((DomElement)o);
      return target == null ? null : PomService.convertToPsi(target);
    }
    if (o instanceof MergedObject) {
      final List<T> list = ((MergedObject<T>)o).getImplementations();
      for (final T o1 : list) {
        final PsiElement psiElement = resolveInner(o1);
        if (psiElement != null) {
          return psiElement;
        }
      }
    }
    return o != null ? getElement() : null;
  }",method,
"    if (converter instanceof ResolvingConverter) {
      return ((ResolvingConverter<T>)converter).resolve(o, getConvertContext());
    }",method,
"    if (o instanceof PsiElement) {
      return (PsiElement)o;
    }",method,
"    if (o instanceof DomElement) {
      DomTarget target = DomTarget.getTarget((DomElement)o);
      return target == null ? null : PomService.convertToPsi(target);
    }",method,
"    if (o instanceof MergedObject) {
      final List<T> list = ((MergedObject<T>)o).getImplementations();
      for (final T o1 : list) {
        final PsiElement psiElement = resolveInner(o1);
        if (psiElement != null) {
          return psiElement;
        }
      }
    }",method,
"      for (final T o1 : list) {
        final PsiElement psiElement = resolveInner(o1);
        if (psiElement != null) {
          return psiElement;
        }
      }",method,
"        if (psiElement != null) {
          return psiElement;
        }",method,
"  @Override
  public boolean isReferenceTo(final PsiElement element) {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      T value = myGenericValue.getValue();
      if (value instanceof DomElement && element instanceof PomTargetPsiElementImpl) {
        PomTarget target = ((PomTargetPsiElementImpl)element).getTarget();
        if (target instanceof DomTarget) {
          if (value.equals(((DomTarget)target).getDomElement())) {
            return true;
          }
        }
      }
      return ((ResolvingConverter<T>)converter).isReferenceTo(element, getStringValue(), value, getConvertContext());
    }
    return super.isReferenceTo(element);
  }",method,
"    if (converter instanceof ResolvingConverter) {
      T value = myGenericValue.getValue();
      if (value instanceof DomElement && element instanceof PomTargetPsiElementImpl) {
        PomTarget target = ((PomTargetPsiElementImpl)element).getTarget();
        if (target instanceof DomTarget) {
          if (value.equals(((DomTarget)target).getDomElement())) {
            return true;
          }
        }
      }
      return ((ResolvingConverter<T>)converter).isReferenceTo(element, getStringValue(), value, getConvertContext());
    }",method,
"      if (value instanceof DomElement && element instanceof PomTargetPsiElementImpl) {
        PomTarget target = ((PomTargetPsiElementImpl)element).getTarget();
        if (target instanceof DomTarget) {
          if (value.equals(((DomTarget)target).getDomElement())) {
            return true;
          }
        }
      }",method,
"        if (target instanceof DomTarget) {
          if (value.equals(((DomTarget)target).getDomElement())) {
            return true;
          }
        }",method,
"  private String getStringValue() {
    return myGenericValue.getStringValue();
  }",method,
"  public Converter<T> getConverter() {
    return WrappingConverter.getDeepestConverter(myGenericValue.getConverter(), myGenericValue);
  }",method,
"  @Override
  @Nullable
  public PsiElement resolve() {
    final T value = myGenericValue.getValue();
    return value == null ? null : resolveInner(value);
  }",method,
"  @Override
  @NotNull
  public String getCanonicalText() {
    return StringUtil.notNullize(getStringValue());
  }",method,
"  @Override
  @NotNull
  public String getUnresolvedMessagePattern() {
    final ConvertContext context = getConvertContext();
    return getConverter().getErrorMessage(getStringValue(), context);
  }",method,
"  public final ConvertContext getConvertContext() {
    return ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(myGenericValue));
  }",method,
"  @Override
  public PsiElement handleElementRename(final String newElementName) throws IncorrectOperationException {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      ((ResolvingConverter)converter).handleElementRename(myGenericValue, getConvertContext(), newElementName);
      return myGenericValue.getXmlTag();
    }
    return super.handleElementRename(newElementName);
  }",method,
"    if (converter instanceof ResolvingConverter) {
      ((ResolvingConverter)converter).handleElementRename(myGenericValue, getConvertContext(), newElementName);
      return myGenericValue.getXmlTag();
    }",method,
"  @Override
  public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException {
    final Converter<T> converter = getConverter();
    if (converter instanceof ResolvingConverter) {
      ((ResolvingConverter)converter).bindReference(myGenericValue, getConvertContext(), element);
      return myGenericValue.getXmlTag();
    }
    if (element instanceof XmlTag) {
      DomElement domElement = myGenericValue.getManager().getDomElement((XmlTag) element);
      if (domElement != null) {
        myGenericValue.setValue((T)domElement);
      } else {
        myGenericValue.setStringValue(((XmlTag)element).getName());
      }
      return myGenericValue.getXmlTag();
    }
    return null;
  }",method,
"    if (converter instanceof ResolvingConverter) {
      ((ResolvingConverter)converter).bindReference(myGenericValue, getConvertContext(), element);
      return myGenericValue.getXmlTag();
    }",method,
"    if (element instanceof XmlTag) {
      DomElement domElement = myGenericValue.getManager().getDomElement((XmlTag) element);
      if (domElement != null) {
        myGenericValue.setValue((T)domElement);
      } else {
        myGenericValue.setStringValue(((XmlTag)element).getName());
      }
      return myGenericValue.getXmlTag();
    }",method,
"      if (domElement != null) {
        myGenericValue.setValue((T)domElement);
      }",method,
"  @Override
  @NotNull
  public Object[] getVariants() {
    final Converter<T> converter = getConverter();
    if (converter instanceof EnumConverter || converter == ResolvingConverter.BOOLEAN_CONVERTER) {
      if (DomCompletionContributor.isSchemaEnumerated(getElement())) return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    if (converter instanceof ResolvingConverter) {
      final ResolvingConverter<T> resolvingConverter = (ResolvingConverter<T>)converter;
      ArrayList<Object> result = new ArrayList<>();
      final ConvertContext convertContext = getConvertContext();
      for (T variant: resolvingConverter.getVariants(convertContext)) {
        LookupElement lookupElement = resolvingConverter.createLookupElement(variant);
        if (lookupElement != null) {
          result.add(lookupElement);
          continue;
        }
        String name = converter.toString(variant, convertContext);
        if (name != null) {
          result.add(ElementPresentationManager.getInstance().createVariant(variant, name, ((ResolvingConverter)converter).getPsiElement(variant)));
        }
      }
      for (final String string : resolvingConverter.getAdditionalVariants(convertContext)) {
        result.add(LookupValueFactory.createLookupValue(string, null));
      }
      return result.toArray();
    }
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }",method,
"    if (converter instanceof EnumConverter || converter == ResolvingConverter.BOOLEAN_CONVERTER) {
      if (DomCompletionContributor.isSchemaEnumerated(getElement())) return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }",method,
"    if (converter instanceof ResolvingConverter) {
      final ResolvingConverter<T> resolvingConverter = (ResolvingConverter<T>)converter;
      ArrayList<Object> result = new ArrayList<>();
      final ConvertContext convertContext = getConvertContext();
      for (T variant: resolvingConverter.getVariants(convertContext)) {
        LookupElement lookupElement = resolvingConverter.createLookupElement(variant);
        if (lookupElement != null) {
          result.add(lookupElement);
          continue;
        }
        String name = converter.toString(variant, convertContext);
        if (name != null) {
          result.add(ElementPresentationManager.getInstance().createVariant(variant, name, ((ResolvingConverter)converter).getPsiElement(variant)));
        }
      }
      for (final String string : resolvingConverter.getAdditionalVariants(convertContext)) {
        result.add(LookupValueFactory.createLookupValue(string, null));
      }
      return result.toArray();
    }",method,
"        if (lookupElement != null) {
          result.add(lookupElement);
          continue;
        }",method,
"        if (name != null) {
          result.add(ElementPresentationManager.getInstance().createVariant(variant, name, ((ResolvingConverter)converter).getPsiElement(variant)));
        }",method,
"  @Override
  public boolean canResolveTo(Class<? extends PsiElement> elementClass) {
    Converter<T> converter = getConverter();
    return !(converter instanceof ResolvingConverter) || ((ResolvingConverter)converter).canResolveTo(elementClass);
  }",method,
"public class TransformUncorrelatedInPredicateSubqueryToSemiJoin
        implements PlanOptimizer
{
    @Override
    public PlanNode optimize(PlanNode plan, Session session, Map<Symbol, Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)
    {
        return rewriteWith(new InPredicateRewriter(idAllocator), plan, null);
    }
    private static class InPredicateRewriter
            extends SimplePlanRewriter<Void>
    {
        private final PlanNodeIdAllocator idAllocator;
        public InPredicateRewriter(PlanNodeIdAllocator idAllocator)
        {
            this.idAllocator = requireNonNull(idAllocator, ""idAllocator is null"");
        }
        @Override
        public PlanNode visitApply(ApplyNode node, RewriteContext<Void> context)
        {
            if (!node.getCorrelation().isEmpty()) {
                return context.defaultRewrite(node);
            }
            if (node.getSubqueryAssignments().size() != 1) {
                return context.defaultRewrite(node);
            }
            Expression expression = getOnlyElement(node.getSubqueryAssignments().getExpressions());
            if (!(expression instanceof InPredicate)) {
                return context.defaultRewrite(node);
            }
            PlanNode input = context.rewrite(node.getInput());
            PlanNode subquery = context.rewrite(node.getSubquery());
            InPredicate inPredicate = (InPredicate) expression;
            Symbol semiJoinSymbol = getOnlyElement(node.getSubqueryAssignments().getSymbols());
            return new SemiJoinNode(idAllocator.getNextId(),
                    input,
                    subquery,
                    Symbol.from(inPredicate.getValue()),
                    Symbol.from(inPredicate.getValueList()),
                    semiJoinSymbol,
                    Optional.empty(),
                    Optional.empty(),
                    Optional.empty());
        }
    }
}",class,
"    private static class InPredicateRewriter
            extends SimplePlanRewriter<Void>
    {
        private final PlanNodeIdAllocator idAllocator;
        public InPredicateRewriter(PlanNodeIdAllocator idAllocator)
        {
            this.idAllocator = requireNonNull(idAllocator, ""idAllocator is null"");
        }
        @Override
        public PlanNode visitApply(ApplyNode node, RewriteContext<Void> context)
        {
            if (!node.getCorrelation().isEmpty()) {
                return context.defaultRewrite(node);
            }
            if (node.getSubqueryAssignments().size() != 1) {
                return context.defaultRewrite(node);
            }
            Expression expression = getOnlyElement(node.getSubqueryAssignments().getExpressions());
            if (!(expression instanceof InPredicate)) {
                return context.defaultRewrite(node);
            }
            PlanNode input = context.rewrite(node.getInput());
            PlanNode subquery = context.rewrite(node.getSubquery());
            InPredicate inPredicate = (InPredicate) expression;
            Symbol semiJoinSymbol = getOnlyElement(node.getSubqueryAssignments().getSymbols());
            return new SemiJoinNode(idAllocator.getNextId(),
                    input,
                    subquery,
                    Symbol.from(inPredicate.getValue()),
                    Symbol.from(inPredicate.getValueList()),
                    semiJoinSymbol,
                    Optional.empty(),
                    Optional.empty(),
                    Optional.empty());
        }
    }",class,
"    @Override
    public PlanNode optimize(PlanNode plan, Session session, Map<Symbol, Type> types, SymbolAllocator symbolAllocator, PlanNodeIdAllocator idAllocator)
    {
        return rewriteWith(new InPredicateRewriter(idAllocator), plan, null);
    }",method,
"        public InPredicateRewriter(PlanNodeIdAllocator idAllocator)
        {
            this.idAllocator = requireNonNull(idAllocator, ""idAllocator is null"");
        }",method,
"        @Override
        public PlanNode visitApply(ApplyNode node, RewriteContext<Void> context)
        {
            if (!node.getCorrelation().isEmpty()) {
                return context.defaultRewrite(node);
            }
            if (node.getSubqueryAssignments().size() != 1) {
                return context.defaultRewrite(node);
            }
            Expression expression = getOnlyElement(node.getSubqueryAssignments().getExpressions());
            if (!(expression instanceof InPredicate)) {
                return context.defaultRewrite(node);
            }
            PlanNode input = context.rewrite(node.getInput());
            PlanNode subquery = context.rewrite(node.getSubquery());
            InPredicate inPredicate = (InPredicate) expression;
            Symbol semiJoinSymbol = getOnlyElement(node.getSubqueryAssignments().getSymbols());
            return new SemiJoinNode(idAllocator.getNextId(),
                    input,
                    subquery,
                    Symbol.from(inPredicate.getValue()),
                    Symbol.from(inPredicate.getValueList()),
                    semiJoinSymbol,
                    Optional.empty(),
                    Optional.empty(),
                    Optional.empty());
        }",method,
"public class FastJsonHttpMessageConverterTest extends TestCase {
	@SuppressWarnings(""deprecation"")
	public void test_read() throws Exception {
		FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
		converter.setCharset(Charset.forName(""UTF-8""));
		Assert.assertEquals(Charset.forName(""UTF-8""), converter.getCharset());
		converter.setFeatures(SerializerFeature.BrowserCompatible);
		Assert.assertEquals(1, converter.getFeatures().length);
		Assert.assertEquals(SerializerFeature.BrowserCompatible,
				converter.getFeatures()[0]);
		Assert.assertNull(converter.getDateFormat());
		converter.setDateFormat(""yyyyMMdd"");
		converter.setFilters(serializeFilter);
		Assert.assertEquals(1, converter.getFilters().length);
		Assert.assertEquals(serializeFilter, converter.getFilters()[0]);
		converter.addSerializeFilter(serializeFilter);
		Assert.assertEquals(2, converter.getFilters().length);
		converter.addSerializeFilter(null);
		converter.setSupportedMediaTypes(Arrays
				.asList(new MediaType[] { MediaType.APPLICATION_JSON_UTF8 }));
		Assert.assertEquals(1, converter.getSupportedMediaTypes().size());
		Method method = FastJsonHttpMessageConverter.class.getDeclaredMethod(
				""supports"", Class.class);
		method.setAccessible(true);
		method.invoke(converter, int.class);
		HttpInputMessage input = new HttpInputMessage() {
			public HttpHeaders getHeaders() {
				// TODO Auto-generated method stub
				return null;
			}
			public InputStream getBody() throws IOException {
				return new ByteArrayInputStream(""{\""id\"":123}"".getBytes(Charset
						.forName(""UTF-8"")));
			}
		};
		VO vo = (VO) converter.read(VO.class, input);
		Assert.assertEquals(123, vo.getId());
		final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
		HttpOutputMessage out = new HttpOutputMessage() {
			public HttpHeaders getHeaders() {
				return new HttpHeaders();
			}
			public OutputStream getBody() throws IOException {
				return byteOut;
			}
		};
		converter.write(vo, MediaType.TEXT_PLAIN, out);
		byte[] bytes = byteOut.toByteArray();
		Assert.assertEquals(""{\""id\"":\""123\""}"", new String(bytes, ""UTF-8""));
	}
	public void test_1() throws Exception {
		FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
		Assert.assertNotNull(converter.getFastJsonConfig());
		converter.setFastJsonConfig(new FastJsonConfig());
		converter.canRead(VO.class, MediaType.APPLICATION_JSON_UTF8);
		converter.canWrite(VO.class, MediaType.APPLICATION_JSON_UTF8);
		converter.canRead(VO.class, VO.class, MediaType.APPLICATION_JSON_UTF8);
		converter.canWrite(VO.class, VO.class, MediaType.APPLICATION_JSON_UTF8);
		HttpInputMessage input = new HttpInputMessage() {
			public HttpHeaders getHeaders() {
				// TODO Auto-generated method stub
				return null;
			}
			public InputStream getBody() throws IOException {
				return new ByteArrayInputStream(""{\""id\"":123}"".getBytes(Charset
						.forName(""UTF-8"")));
			}
		};
		VO vo = (VO) converter.read(VO.class, VO.class, input);
		Assert.assertEquals(123, vo.getId());
		final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
		HttpOutputMessage out = new HttpOutputMessage() {
			public HttpHeaders getHeaders() {
				return new HttpHeaders();
			}
			public OutputStream getBody() throws IOException {
				return byteOut;
			}
		};
		converter.write(vo, VO.class, MediaType.TEXT_PLAIN, out);
		byte[] bytes = byteOut.toByteArray();
		Assert.assertEquals(""{\""id\"":123}"", new String(bytes, ""UTF-8""));
		converter.setSupportedMediaTypes(Collections
				.singletonList(MediaType.APPLICATION_JSON));
		converter.write(vo, VO.class, null, out);
		converter.write(vo, VO.class, MediaType.ALL, out);
		HttpOutputMessage out2 = new HttpOutputMessage() {
			public HttpHeaders getHeaders() {
				return new HttpHeaders() {
					private static final long serialVersionUID = 1L;
					@Override
					public MediaType getContentType() {
						return MediaType.APPLICATION_JSON;
					}
					@Override
					public long getContentLength() {
						return 1;
					}
				};
			}
			public OutputStream getBody() throws IOException {
				return byteOut;
			}
		};
		converter.write(vo, VO.class, MediaType.ALL, out2);
	}
	private SerializeFilter serializeFilter = new ValueFilter() {
		@Override
		public Object process(Object object, String name, Object value) {
			if (value == null) {
				return """";
			}
			if (value instanceof Number) {
				return String.valueOf(value);
			}
			return value;
		}
	};
	public static class VO {
		private int id;
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
	}
}",class,
"	public static class VO {
		private int id;
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
	}",class,
"	@SuppressWarnings(""deprecation"")
	public void test_read() throws Exception {
		FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
		converter.setCharset(Charset.forName(""UTF-8""));
		Assert.assertEquals(Charset.forName(""UTF-8""), converter.getCharset());
		converter.setFeatures(SerializerFeature.BrowserCompatible);
		Assert.assertEquals(1, converter.getFeatures().length);
		Assert.assertEquals(SerializerFeature.BrowserCompatible,
				converter.getFeatures()[0]);
		Assert.assertNull(converter.getDateFormat());
		converter.setDateFormat(""yyyyMMdd"");
		converter.setFilters(serializeFilter);
		Assert.assertEquals(1, converter.getFilters().length);
		Assert.assertEquals(serializeFilter, converter.getFilters()[0]);
		converter.addSerializeFilter(serializeFilter);
		Assert.assertEquals(2, converter.getFilters().length);
		converter.addSerializeFilter(null);
		converter.setSupportedMediaTypes(Arrays
				.asList(new MediaType[] { MediaType.APPLICATION_JSON_UTF8 }));
		Assert.assertEquals(1, converter.getSupportedMediaTypes().size());
		Method method = FastJsonHttpMessageConverter.class.getDeclaredMethod(
				""supports"", Class.class);
		method.setAccessible(true);
		method.invoke(converter, int.class);
		HttpInputMessage input = new HttpInputMessage() {
			public HttpHeaders getHeaders() {
				// TODO Auto-generated method stub
				return null;
			}
			public InputStream getBody() throws IOException {
				return new ByteArrayInputStream(""{\""id\"":123}"".getBytes(Charset
						.forName(""UTF-8"")));
			}
		};
		VO vo = (VO) converter.read(VO.class, input);
		Assert.assertEquals(123, vo.getId());
		final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
		HttpOutputMessage out = new HttpOutputMessage() {
			public HttpHeaders getHeaders() {
				return new HttpHeaders();
			}
			public OutputStream getBody() throws IOException {
				return byteOut;
			}
		};
		converter.write(vo, MediaType.TEXT_PLAIN, out);
		byte[] bytes = byteOut.toByteArray();
		Assert.assertEquals(""{\""id\"":\""123\""}"", new String(bytes, ""UTF-8""));
	}",method,
"			public HttpHeaders getHeaders() {
				// TODO Auto-generated method stub
				return null;
			}",method,
"			public InputStream getBody() throws IOException {
				return new ByteArrayInputStream(""{\""id\"":123}"".getBytes(Charset
						.forName(""UTF-8"")));
			}",method,
"			public HttpHeaders getHeaders() {
				return new HttpHeaders();
			}",method,
"			public OutputStream getBody() throws IOException {
				return byteOut;
			}",method,
"	public void test_1() throws Exception {
		FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
		Assert.assertNotNull(converter.getFastJsonConfig());
		converter.setFastJsonConfig(new FastJsonConfig());
		converter.canRead(VO.class, MediaType.APPLICATION_JSON_UTF8);
		converter.canWrite(VO.class, MediaType.APPLICATION_JSON_UTF8);
		converter.canRead(VO.class, VO.class, MediaType.APPLICATION_JSON_UTF8);
		converter.canWrite(VO.class, VO.class, MediaType.APPLICATION_JSON_UTF8);
		HttpInputMessage input = new HttpInputMessage() {
			public HttpHeaders getHeaders() {
				// TODO Auto-generated method stub
				return null;
			}
			public InputStream getBody() throws IOException {
				return new ByteArrayInputStream(""{\""id\"":123}"".getBytes(Charset
						.forName(""UTF-8"")));
			}
		};
		VO vo = (VO) converter.read(VO.class, VO.class, input);
		Assert.assertEquals(123, vo.getId());
		final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
		HttpOutputMessage out = new HttpOutputMessage() {
			public HttpHeaders getHeaders() {
				return new HttpHeaders();
			}
			public OutputStream getBody() throws IOException {
				return byteOut;
			}
		};
		converter.write(vo, VO.class, MediaType.TEXT_PLAIN, out);
		byte[] bytes = byteOut.toByteArray();
		Assert.assertEquals(""{\""id\"":123}"", new String(bytes, ""UTF-8""));
		converter.setSupportedMediaTypes(Collections
				.singletonList(MediaType.APPLICATION_JSON));
		converter.write(vo, VO.class, null, out);
		converter.write(vo, VO.class, MediaType.ALL, out);
		HttpOutputMessage out2 = new HttpOutputMessage() {
			public HttpHeaders getHeaders() {
				return new HttpHeaders() {
					private static final long serialVersionUID = 1L;
					@Override
					public MediaType getContentType() {
						return MediaType.APPLICATION_JSON;
					}
					@Override
					public long getContentLength() {
						return 1;
					}
				};
			}
			public OutputStream getBody() throws IOException {
				return byteOut;
			}
		};
		converter.write(vo, VO.class, MediaType.ALL, out2);
	}",method,
"			public HttpHeaders getHeaders() {
				// TODO Auto-generated method stub
				return null;
			}",method,
"			public InputStream getBody() throws IOException {
				return new ByteArrayInputStream(""{\""id\"":123}"".getBytes(Charset
						.forName(""UTF-8"")));
			}",method,
"			public HttpHeaders getHeaders() {
				return new HttpHeaders();
			}",method,
"			public OutputStream getBody() throws IOException {
				return byteOut;
			}",method,
"			public HttpHeaders getHeaders() {
				return new HttpHeaders() {
					private static final long serialVersionUID = 1L;
					@Override
					public MediaType getContentType() {
						return MediaType.APPLICATION_JSON;
					}
					@Override
					public long getContentLength() {
						return 1;
					}
				};
			}",method,
"				return new HttpHeaders() {
					private static final long serialVersionUID = 1L;
					@Override
					public MediaType getContentType() {
						return MediaType.APPLICATION_JSON;
					}
					@Override
					public long getContentLength() {
						return 1;
					}
				}",method,
"					@Override
					public MediaType getContentType() {
						return MediaType.APPLICATION_JSON;
					}",method,
"					@Override
					public long getContentLength() {
						return 1;
					}",method,
"			public OutputStream getBody() throws IOException {
				return byteOut;
			}",method,
"		@Override
		public Object process(Object object, String name, Object value) {
			if (value == null) {
				return """";
			}
			if (value instanceof Number) {
				return String.valueOf(value);
			}
			return value;
		}",method,
"			if (value == null) {
				return """";
			}",method,
"			if (value instanceof Number) {
				return String.valueOf(value);
			}",method,
"		public int getId() {
			return id;
		}",method,
"		public void setId(int id) {
			this.id = id;
		}",method,
"public final class CompilerMessageImpl implements CompilerMessage {
  private final Project myProject;
  private final CompilerMessageCategory myCategory;
  @Nullable private Navigatable myNavigatable;
  private final String myMessage;
  private final VirtualFile myFile;
  private final int myRow;
  private final int myColumn;
  public CompilerMessageImpl(Project project, CompilerMessageCategory category, String message) {
    this(project, category, message, null, -1, -1, null);
  }
  public CompilerMessageImpl(Project project,
                             @NotNull CompilerMessageCategory category,
                             String message,
                             @Nullable final VirtualFile file,
                             int row,
                             int column,
                             @Nullable final Navigatable navigatable) {
    myProject = project;
    myCategory = category;
    myNavigatable = navigatable;
    myMessage = message == null ? """" : message;
    myRow = row;
    myColumn = column;
    myFile = file;
  }
  @NotNull
  @Override
  public CompilerMessageCategory getCategory() {
    return myCategory;
  }
  @Override
  public String getMessage() {
    return myMessage;
  }
  @Override
  public Navigatable getNavigatable() {
    if (myNavigatable != null) {
      return myNavigatable;
    }
    final VirtualFile virtualFile = getVirtualFile();
    if (virtualFile != null && virtualFile.isValid()) {
      final int line = getLine() - 1; // editor lines are zero-based
      if (line >= 0) {
        return myNavigatable = new OpenFileDescriptor(myProject, virtualFile, line, Math.max(0, getColumn()-1));
      }
    }
    return null;
  }
  @Override
  public VirtualFile getVirtualFile() {
    return myFile;
  }
  @Override
  public String getExportTextPrefix() {
    if (getLine() >= 0) {
      return CompilerBundle.message(""compiler.results.export.text.prefix"", getLine());
    }
    return """";
  }
  @Override
  public String getRenderTextPrefix() {
    if (getLine() >= 0) {
      return ""("" + getLine() + "", "" + getColumn() + "")"";
    }
    return """";
  }
  public int getLine() {
    return myRow;
  }
  public int getColumn() {
    return myColumn;
  }
  public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof CompilerMessage)) return false;
    final CompilerMessageImpl compilerMessage = (CompilerMessageImpl)o;
    if (myColumn != compilerMessage.myColumn) return false;
    if (myRow != compilerMessage.myRow) return false;
    if (!myCategory.equals(compilerMessage.myCategory)) return false;
    if (myFile != null ? !myFile.equals(compilerMessage.myFile) : compilerMessage.myFile != null) return false;
    if (!myMessage.equals(compilerMessage.myMessage)) return false;
    return true;
  }
  public int hashCode() {
    int result;
    result = myCategory.hashCode();
    result = 29 * result + myMessage.hashCode();
    result = 29 * result + (myFile != null ? myFile.hashCode() : 0);
    result = 29 * result + myRow;
    result = 29 * result + myColumn;
    return result;
  }
  public String toString() {
    return myMessage;
  }
}",class,
"  public CompilerMessageImpl(Project project, CompilerMessageCategory category, String message) {
    this(project, category, message, null, -1, -1, null);
  }",method,
"  public CompilerMessageImpl(Project project,
                             @NotNull CompilerMessageCategory category,
                             String message,
                             @Nullable final VirtualFile file,
                             int row,
                             int column,
                             @Nullable final Navigatable navigatable) {
    myProject = project;
    myCategory = category;
    myNavigatable = navigatable;
    myMessage = message == null ? """" : message;
    myRow = row;
    myColumn = column;
    myFile = file;
  }",method,
"  @NotNull
  @Override
  public CompilerMessageCategory getCategory() {
    return myCategory;
  }",method,
"  @Override
  public String getMessage() {
    return myMessage;
  }",method,
"  @Override
  public Navigatable getNavigatable() {
    if (myNavigatable != null) {
      return myNavigatable;
    }
    final VirtualFile virtualFile = getVirtualFile();
    if (virtualFile != null && virtualFile.isValid()) {
      final int line = getLine() - 1; // editor lines are zero-based
      if (line >= 0) {
        return myNavigatable = new OpenFileDescriptor(myProject, virtualFile, line, Math.max(0, getColumn()-1));
      }
    }
    return null;
  }",method,
"    if (myNavigatable != null) {
      return myNavigatable;
    }",method,
"      if (line >= 0) {
        return myNavigatable = new OpenFileDescriptor(myProject, virtualFile, line, Math.max(0, getColumn()-1));
      }",method,
"  @Override
  public VirtualFile getVirtualFile() {
    return myFile;
  }",method,
"  @Override
  public String getExportTextPrefix() {
    if (getLine() >= 0) {
      return CompilerBundle.message(""compiler.results.export.text.prefix"", getLine());
    }
    return """";
  }",method,
"  @Override
  public String getRenderTextPrefix() {
    if (getLine() >= 0) {
      return ""("" + getLine() + "", "" + getColumn() + "")"";
    }
    return """";
  }",method,
"  public int getLine() {
    return myRow;
  }",method,
"  public int getColumn() {
    return myColumn;
  }",method,
"  public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof CompilerMessage)) return false;
    final CompilerMessageImpl compilerMessage = (CompilerMessageImpl)o;
    if (myColumn != compilerMessage.myColumn) return false;
    if (myRow != compilerMessage.myRow) return false;
    if (!myCategory.equals(compilerMessage.myCategory)) return false;
    if (myFile != null ? !myFile.equals(compilerMessage.myFile) : compilerMessage.myFile != null) return false;
    if (!myMessage.equals(compilerMessage.myMessage)) return false;
    return true;
  }",method,
"  public int hashCode() {
    int result;
    result = myCategory.hashCode();
    result = 29 * result + myMessage.hashCode();
    result = 29 * result + (myFile != null ? myFile.hashCode() : 0);
    result = 29 * result + myRow;
    result = 29 * result + myColumn;
    return result;
  }",method,
"  public String toString() {
    return myMessage;
  }",method,
"public class LanguageLevelProjectExtensionImpl extends LanguageLevelProjectExtension {
  private static final String LANGUAGE_LEVEL = ""languageLevel"";
  private static final String DEFAULT_ATTRIBUTE = ""default"";
  private final Project myProject;
  private LanguageLevel myLanguageLevel;
  private LanguageLevel myCurrentLevel;
  public LanguageLevelProjectExtensionImpl(final Project project) {
    myProject = project;
    setDefault(project.isDefault() ? true : null);
  }
  public static LanguageLevelProjectExtensionImpl getInstanceImpl(Project project) {
    return (LanguageLevelProjectExtensionImpl)getInstance(project);
  }
  private void readExternal(final Element element) {
    String level = element.getAttributeValue(LANGUAGE_LEVEL);
    if (level == null) {
      myLanguageLevel = null;
    }
    else {
      myLanguageLevel = LanguageLevel.valueOf(level);
    }
    String aDefault = element.getAttributeValue(DEFAULT_ATTRIBUTE);
    setDefault(aDefault == null ? null : Boolean.parseBoolean(aDefault));
  }
  private void writeExternal(final Element element) {
    if (myLanguageLevel != null) {
      element.setAttribute(LANGUAGE_LEVEL, myLanguageLevel.name());
    }
    if (!myProject.isDefault()) {
      Boolean aBoolean = getDefault();
      if (aBoolean != null) {
        element.setAttribute(DEFAULT_ATTRIBUTE, Boolean.toString(aBoolean));
      }
    }
  }
  @Override
  @NotNull
  public LanguageLevel getLanguageLevel() {
    return getLanguageLevelOrDefault();
  }
  @NotNull
  private LanguageLevel getLanguageLevelOrDefault() {
    return ObjectUtils.chooseNotNull(myLanguageLevel, LanguageLevel.HIGHEST);
  }
  @Override
  public void setLanguageLevel(@NotNull LanguageLevel languageLevel) {
    // we don't use here getLanguageLevelOrDefault() - if null, just set to provided value, because our default (LanguageLevel.HIGHEST) is changed every java release
    if (myLanguageLevel != languageLevel) {
      myLanguageLevel = languageLevel;
      languageLevelsChanged();
    }
  }
  @Override
  public void languageLevelsChanged() {
    if (!myProject.isDefault()) {
      ProjectRootManager.getInstance(myProject).incModificationCount();
      JavaLanguageLevelPusher.pushLanguageLevel(myProject);
    }
  }
  private void projectSdkChanged(@Nullable Sdk sdk) {
    if (isDefault() && sdk != null) {
      JavaSdkVersion version = JavaSdk.getInstance().getVersion(sdk);
      if (version != null) {
        setLanguageLevel(version.getMaxLanguageLevel());
      }
    }
  }
  public void setCurrentLevel(LanguageLevel level) {
    myCurrentLevel = level;
  }
  public LanguageLevel getCurrentLevel() {
    return myCurrentLevel;
  }
  public static class MyProjectExtension extends ProjectExtension {
    private final LanguageLevelProjectExtensionImpl myInstance;
    public MyProjectExtension(final Project project) {
      myInstance = ((LanguageLevelProjectExtensionImpl)getInstance(project));
    }
    @Override
    public void readExternal(@NotNull Element element) {
      myInstance.readExternal(element);
    }
    @Override
    public void writeExternal(@NotNull Element element) {
      myInstance.writeExternal(element);
    }
    @Override
    public void projectSdkChanged(@Nullable Sdk sdk) {
      myInstance.projectSdkChanged(sdk);
    }
  }
}",class,
"  public static class MyProjectExtension extends ProjectExtension {
    private final LanguageLevelProjectExtensionImpl myInstance;
    public MyProjectExtension(final Project project) {
      myInstance = ((LanguageLevelProjectExtensionImpl)getInstance(project));
    }
    @Override
    public void readExternal(@NotNull Element element) {
      myInstance.readExternal(element);
    }
    @Override
    public void writeExternal(@NotNull Element element) {
      myInstance.writeExternal(element);
    }
    @Override
    public void projectSdkChanged(@Nullable Sdk sdk) {
      myInstance.projectSdkChanged(sdk);
    }
  }",class,
"  public LanguageLevelProjectExtensionImpl(final Project project) {
    myProject = project;
    setDefault(project.isDefault() ? true : null);
  }",method,
"  public static LanguageLevelProjectExtensionImpl getInstanceImpl(Project project) {
    return (LanguageLevelProjectExtensionImpl)getInstance(project);
  }",method,
"  private void readExternal(final Element element) {
    String level = element.getAttributeValue(LANGUAGE_LEVEL);
    if (level == null) {
      myLanguageLevel = null;
    }
    else {
      myLanguageLevel = LanguageLevel.valueOf(level);
    }
    String aDefault = element.getAttributeValue(DEFAULT_ATTRIBUTE);
    setDefault(aDefault == null ? null : Boolean.parseBoolean(aDefault));
  }",method,
"    if (level == null) {
      myLanguageLevel = null;
    }",method,
"  private void writeExternal(final Element element) {
    if (myLanguageLevel != null) {
      element.setAttribute(LANGUAGE_LEVEL, myLanguageLevel.name());
    }
    if (!myProject.isDefault()) {
      Boolean aBoolean = getDefault();
      if (aBoolean != null) {
        element.setAttribute(DEFAULT_ATTRIBUTE, Boolean.toString(aBoolean));
      }
    }
  }",method,
"    if (myLanguageLevel != null) {
      element.setAttribute(LANGUAGE_LEVEL, myLanguageLevel.name());
    }",method,
"      if (aBoolean != null) {
        element.setAttribute(DEFAULT_ATTRIBUTE, Boolean.toString(aBoolean));
      }",method,
"  @Override
  @NotNull
  public LanguageLevel getLanguageLevel() {
    return getLanguageLevelOrDefault();
  }",method,
