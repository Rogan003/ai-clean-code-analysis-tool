code_snippet,type,score
"    public final Arity getArity() {
        return arity;
    }",method,
"public class AppleBundleBuilder
    extends AbstractNodeBuilder<
        AppleBundleDescriptionArg.Builder, AppleBundleDescriptionArg, AppleBundleDescription,
        AppleBundle> {
  protected AppleBundleBuilder(BuildTarget target) {
    super(FakeAppleRuleDescriptions.BUNDLE_DESCRIPTION, target);
  }
  public static AppleBundleBuilder createBuilder(BuildTarget target) {
    return new AppleBundleBuilder(target);
  }
  public AppleBundleBuilder setExtension(Either<AppleBundleExtension, String> extension) {
    getArgForPopulating().setExtension(extension);
    return this;
  }
  public AppleBundleBuilder setProductName(Optional<String> productName) {
    getArgForPopulating().setProductName(productName);
    return this;
  }
  public AppleBundleBuilder setXcodeProductType(Optional<String> xcodeProductType) {
    getArgForPopulating().setXcodeProductType(xcodeProductType);
    return this;
  }
  public AppleBundleBuilder setBinary(BuildTarget binary) {
    getArgForPopulating().setBinary(binary);
    return this;
  }
  public AppleBundleBuilder setInfoPlist(SourcePath infoPlist) {
    getArgForPopulating().setInfoPlist(infoPlist);
    return this;
  }
  public AppleBundleBuilder setDeps(ImmutableSortedSet<BuildTarget> deps) {
    getArgForPopulating().setDeps(deps);
    return this;
  }
  public AppleBundleBuilder setTests(ImmutableSortedSet<BuildTarget> tests) {
    getArgForPopulating().setTests(tests);
    return this;
  }
  public AppleBundleBuilder setInfoPlistSubstitutions(
      ImmutableMap<String, String> infoPlistSubstitutions) {
    getArgForPopulating().setInfoPlistSubstitutions(infoPlistSubstitutions);
    return this;
  }
}",class,
"  protected AppleBundleBuilder(BuildTarget target) {
    super(FakeAppleRuleDescriptions.BUNDLE_DESCRIPTION, target);
  }",method,
"  public static AppleBundleBuilder createBuilder(BuildTarget target) {
    return new AppleBundleBuilder(target);
  }",method,
"  public AppleBundleBuilder setExtension(Either<AppleBundleExtension, String> extension) {
    getArgForPopulating().setExtension(extension);
    return this;
  }",method,
"  public AppleBundleBuilder setProductName(Optional<String> productName) {
    getArgForPopulating().setProductName(productName);
    return this;
  }",method,
"  public AppleBundleBuilder setXcodeProductType(Optional<String> xcodeProductType) {
    getArgForPopulating().setXcodeProductType(xcodeProductType);
    return this;
  }",method,
"  public AppleBundleBuilder setBinary(BuildTarget binary) {
    getArgForPopulating().setBinary(binary);
    return this;
  }",method,
"  public AppleBundleBuilder setInfoPlist(SourcePath infoPlist) {
    getArgForPopulating().setInfoPlist(infoPlist);
    return this;
  }",method,
"  public AppleBundleBuilder setDeps(ImmutableSortedSet<BuildTarget> deps) {
    getArgForPopulating().setDeps(deps);
    return this;
  }",method,
"  public AppleBundleBuilder setTests(ImmutableSortedSet<BuildTarget> tests) {
    getArgForPopulating().setTests(tests);
    return this;
  }",method,
"  public AppleBundleBuilder setInfoPlistSubstitutions(
      ImmutableMap<String, String> infoPlistSubstitutions) {
    getArgForPopulating().setInfoPlistSubstitutions(infoPlistSubstitutions);
    return this;
  }",method,
"public class JndiDataSourceAutoConfiguration {
	private final ApplicationContext context;
	public JndiDataSourceAutoConfiguration(ApplicationContext context) {
		this.context = context;
	}
	@Bean(destroyMethod = """")
	@ConditionalOnMissingBean
	public DataSource dataSource(DataSourceProperties properties) {
		JndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();
		DataSource dataSource = dataSourceLookup.getDataSource(properties.getJndiName());
		excludeMBeanIfNecessary(dataSource, ""dataSource"");
		return dataSource;
	}
	private void excludeMBeanIfNecessary(Object candidate, String beanName) {
		for (MBeanExporter mbeanExporter : this.context
				.getBeansOfType(MBeanExporter.class).values()) {
			if (JmxUtils.isMBean(candidate.getClass())) {
				mbeanExporter.addExcludedBean(beanName);
			}
		}
	}
}",class,
"	public JndiDataSourceAutoConfiguration(ApplicationContext context) {
		this.context = context;
	}",method,
"	@Bean(destroyMethod = """")
	@ConditionalOnMissingBean
	public DataSource dataSource(DataSourceProperties properties) {
		JndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();
		DataSource dataSource = dataSourceLookup.getDataSource(properties.getJndiName());
		excludeMBeanIfNecessary(dataSource, ""dataSource"");
		return dataSource;
	}",method,
"	private void excludeMBeanIfNecessary(Object candidate, String beanName) {
		for (MBeanExporter mbeanExporter : this.context
				.getBeansOfType(MBeanExporter.class).values()) {
			if (JmxUtils.isMBean(candidate.getClass())) {
				mbeanExporter.addExcludedBean(beanName);
			}
		}
	}",method,
"}
class Request extends Thread {
    private static final int PAGE_SIZE = 6;
    private int mPage;
    private RequestCallBack mCallBack;
    private Handler mHandler;
    private static boolean mFirstPageNoMore;
    private static boolean mFirstError = true;
    public Request(int page, RequestCallBack callBack) {
        mPage = page;
        mCallBack = callBack;
        mHandler = new Handler(Looper.getMainLooper());
    }
    @Override
    public void run() {
        try {Thread.sleep(500);} catch (InterruptedException e) {}
        if (mPage == 2 && mFirstError) {
            mFirstError = false;
            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mCallBack.fail(new RuntimeException(""fail""));
                }
            });
        } else {
            int size = PAGE_SIZE;
            if (mPage == 1) {
                if (mFirstPageNoMore) {
                    size = 1;
                }
                mFirstPageNoMore = !mFirstPageNoMore;
                if (!mFirstError) {
                    mFirstError = true;
                }
            } else if (mPage == 4) {
                size = 1;
            }
            final int dataSize = size;
            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mCallBack.success(DataServer.getSampleData(dataSize));
                }
            });
        }
    }
}",class,
"public class PullToRefreshUseActivity extends BaseActivity {
    private static final int PAGE_SIZE = 6;
    private RecyclerView mRecyclerView;
    private SwipeRefreshLayout mSwipeRefreshLayout;
    private PullToRefreshAdapter mAdapter;
    private int mNextRequestPage = 1;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mRecyclerView = (RecyclerView) findViewById(R.id.rv_list);
        mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipeLayout);
        mSwipeRefreshLayout.setColorSchemeColors(Color.rgb(47, 223, 189));
        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        setTitle(""Pull TO Refresh Use"");
        setBackBtn();
        initAdapter();
        addHeadView();
        initRefreshLayout();
        mSwipeRefreshLayout.setRefreshing(true);
        refresh();
    }
    private void initAdapter() {
        mAdapter = new PullToRefreshAdapter();
        mAdapter.setOnLoadMoreListener(new BaseQuickAdapter.RequestLoadMoreListener() {
            @Override
            public void onLoadMoreRequested() {
                loadMore();
            }
        });
        mAdapter.openLoadAnimation(BaseQuickAdapter.SLIDEIN_LEFT);
//        mAdapter.setPreLoadNumber(3);
        mRecyclerView.setAdapter(mAdapter);
        mRecyclerView.addOnItemTouchListener(new OnItemClickListener() {
            @Override
            public void onSimpleItemClick(final BaseQuickAdapter adapter, final View view, final int position) {
                Toast.makeText(PullToRefreshUseActivity.this, Integer.toString(position), Toast.LENGTH_LONG).show();
            }
        });
    }
    private void addHeadView() {
        View headView = getLayoutInflater().inflate(R.layout.head_view, (ViewGroup) mRecyclerView.getParent(), false);
        headView.findViewById(R.id.iv).setVisibility(View.GONE);
        ((TextView) headView.findViewById(R.id.tv)).setText(""change load view"");
        headView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mAdapter.setNewData(null);
                mAdapter.setLoadMoreView(new CustomLoadMoreView());
                mRecyclerView.setAdapter(mAdapter);
                Toast.makeText(PullToRefreshUseActivity.this, ""change complete"", Toast.LENGTH_LONG).show();
                mSwipeRefreshLayout.setRefreshing(true);
                refresh();
            }
        });
        mAdapter.addHeaderView(headView);
    }
    private void initRefreshLayout() {
        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                refresh();
            }
        });
    }
    private void refresh() {
        mNextRequestPage = 1;
        mAdapter.setEnableLoadMore(false);//这里的作用是防止下拉刷新的时候还可以上拉加载
        new Request(mNextRequestPage, new RequestCallBack() {
            @Override
            public void success(List<Status> data) {
                setData(true, data);
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }
            @Override
            public void fail(Exception e) {
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }
        }).start();
    }
    private void loadMore() {
        new Request(mNextRequestPage, new RequestCallBack() {
            @Override
            public void success(List<Status> data) {
                setData(false, data);
            }
            @Override
            public void fail(Exception e) {
                mAdapter.loadMoreFail();
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
            }
        }).start();
    }
    private void setData(boolean isRefresh, List data) {
        mNextRequestPage++;
        final int size = data == null ? 0 : data.size();
        if (isRefresh) {
            mAdapter.setNewData(data);
        } else {
            if (size > 0) {
                mAdapter.addData(data);
            }
        }
        if (size < PAGE_SIZE) {
            //第一页如果不够一页就不显示没有更多数据布局
            mAdapter.loadMoreEnd(isRefresh);
            Toast.makeText(this, ""no more data"", Toast.LENGTH_SHORT).show();
        } else {
            mAdapter.loadMoreComplete();
        }
    }
}",class,
"    public Request(int page, RequestCallBack callBack) {
        mPage = page;
        mCallBack = callBack;
        mHandler = new Handler(Looper.getMainLooper());
    }",method,
"    @Override
    public void run() {
        try {Thread.sleep(500);} catch (InterruptedException e) {}
        if (mPage == 2 && mFirstError) {
            mFirstError = false;
            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mCallBack.fail(new RuntimeException(""fail""));
                }
            });
        } else {
            int size = PAGE_SIZE;
            if (mPage == 1) {
                if (mFirstPageNoMore) {
                    size = 1;
                }
                mFirstPageNoMore = !mFirstPageNoMore;
                if (!mFirstError) {
                    mFirstError = true;
                }
            } else if (mPage == 4) {
                size = 1;
            }
            final int dataSize = size;
            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mCallBack.success(DataServer.getSampleData(dataSize));
                }
            });
        }
    }",method,
"        if (mPage == 2 && mFirstError) {
            mFirstError = false;
            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mCallBack.fail(new RuntimeException(""fail""));
                }
            });
        }",method,
"            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mCallBack.fail(new RuntimeException(""fail""));
                }
            }",method,
"                @Override
                public void run() {
                    mCallBack.fail(new RuntimeException(""fail""));
                }",method,
"            if (mPage == 1) {
                if (mFirstPageNoMore) {
                    size = 1;
                }
                mFirstPageNoMore = !mFirstPageNoMore;
                if (!mFirstError) {
                    mFirstError = true;
                }
            }",method,
"                if (mFirstPageNoMore) {
                    size = 1;
                }",method,
"                if (!mFirstError) {
                    mFirstError = true;
                }",method,
"            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mCallBack.success(DataServer.getSampleData(dataSize));
                }
            }",method,
"                @Override
                public void run() {
                    mCallBack.success(DataServer.getSampleData(dataSize));
                }",method,
"    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mRecyclerView = (RecyclerView) findViewById(R.id.rv_list);
        mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipeLayout);
        mSwipeRefreshLayout.setColorSchemeColors(Color.rgb(47, 223, 189));
        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        setTitle(""Pull TO Refresh Use"");
        setBackBtn();
        initAdapter();
        addHeadView();
        initRefreshLayout();
        mSwipeRefreshLayout.setRefreshing(true);
        refresh();
    }",method,
"    private void initAdapter() {
        mAdapter = new PullToRefreshAdapter();
        mAdapter.setOnLoadMoreListener(new BaseQuickAdapter.RequestLoadMoreListener() {
            @Override
            public void onLoadMoreRequested() {
                loadMore();
            }
        });
        mAdapter.openLoadAnimation(BaseQuickAdapter.SLIDEIN_LEFT);
//        mAdapter.setPreLoadNumber(3);
        mRecyclerView.setAdapter(mAdapter);
        mRecyclerView.addOnItemTouchListener(new OnItemClickListener() {
            @Override
            public void onSimpleItemClick(final BaseQuickAdapter adapter, final View view, final int position) {
                Toast.makeText(PullToRefreshUseActivity.this, Integer.toString(position), Toast.LENGTH_LONG).show();
            }
        });
    }",method,
"        mAdapter.setOnLoadMoreListener(new BaseQuickAdapter.RequestLoadMoreListener() {
            @Override
            public void onLoadMoreRequested() {
                loadMore();
            }
        }",method,
"            @Override
            public void onLoadMoreRequested() {
                loadMore();
            }",method,
"        mRecyclerView.addOnItemTouchListener(new OnItemClickListener() {
            @Override
            public void onSimpleItemClick(final BaseQuickAdapter adapter, final View view, final int position) {
                Toast.makeText(PullToRefreshUseActivity.this, Integer.toString(position), Toast.LENGTH_LONG).show();
            }
        }",method,
"            @Override
            public void onSimpleItemClick(final BaseQuickAdapter adapter, final View view, final int position) {
                Toast.makeText(PullToRefreshUseActivity.this, Integer.toString(position), Toast.LENGTH_LONG).show();
            }",method,
"    private void addHeadView() {
        View headView = getLayoutInflater().inflate(R.layout.head_view, (ViewGroup) mRecyclerView.getParent(), false);
        headView.findViewById(R.id.iv).setVisibility(View.GONE);
        ((TextView) headView.findViewById(R.id.tv)).setText(""change load view"");
        headView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mAdapter.setNewData(null);
                mAdapter.setLoadMoreView(new CustomLoadMoreView());
                mRecyclerView.setAdapter(mAdapter);
                Toast.makeText(PullToRefreshUseActivity.this, ""change complete"", Toast.LENGTH_LONG).show();
                mSwipeRefreshLayout.setRefreshing(true);
                refresh();
            }
        });
        mAdapter.addHeaderView(headView);
    }",method,
"        headView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mAdapter.setNewData(null);
                mAdapter.setLoadMoreView(new CustomLoadMoreView());
                mRecyclerView.setAdapter(mAdapter);
                Toast.makeText(PullToRefreshUseActivity.this, ""change complete"", Toast.LENGTH_LONG).show();
                mSwipeRefreshLayout.setRefreshing(true);
                refresh();
            }
        }",method,
"            @Override
            public void onClick(View v) {
                mAdapter.setNewData(null);
                mAdapter.setLoadMoreView(new CustomLoadMoreView());
                mRecyclerView.setAdapter(mAdapter);
                Toast.makeText(PullToRefreshUseActivity.this, ""change complete"", Toast.LENGTH_LONG).show();
                mSwipeRefreshLayout.setRefreshing(true);
                refresh();
            }",method,
"    private void initRefreshLayout() {
        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                refresh();
            }
        });
    }",method,
"        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                refresh();
            }
        }",method,
"            @Override
            public void onRefresh() {
                refresh();
            }",method,
"    private void refresh() {
        mNextRequestPage = 1;
        mAdapter.setEnableLoadMore(false);//这里的作用是防止下拉刷新的时候还可以上拉加载
        new Request(mNextRequestPage, new RequestCallBack() {
            @Override
            public void success(List<Status> data) {
                setData(true, data);
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }
            @Override
            public void fail(Exception e) {
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }
        }).start();
    }",method,
"        new Request(mNextRequestPage, new RequestCallBack() {
            @Override
            public void success(List<Status> data) {
                setData(true, data);
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }
            @Override
            public void fail(Exception e) {
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }
        }",method,
"            @Override
            public void success(List<Status> data) {
                setData(true, data);
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }",method,
"            @Override
            public void fail(Exception e) {
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
                mAdapter.setEnableLoadMore(true);
                mSwipeRefreshLayout.setRefreshing(false);
            }",method,
"    private void loadMore() {
        new Request(mNextRequestPage, new RequestCallBack() {
            @Override
            public void success(List<Status> data) {
                setData(false, data);
            }
            @Override
            public void fail(Exception e) {
                mAdapter.loadMoreFail();
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
            }
        }).start();
    }",method,
"        new Request(mNextRequestPage, new RequestCallBack() {
            @Override
            public void success(List<Status> data) {
                setData(false, data);
            }
            @Override
            public void fail(Exception e) {
                mAdapter.loadMoreFail();
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
            }
        }",method,
"            @Override
            public void success(List<Status> data) {
                setData(false, data);
            }",method,
"            @Override
            public void fail(Exception e) {
                mAdapter.loadMoreFail();
                Toast.makeText(PullToRefreshUseActivity.this, R.string.network_err, Toast.LENGTH_LONG).show();
            }",method,
"    private void setData(boolean isRefresh, List data) {
        mNextRequestPage++;
        final int size = data == null ? 0 : data.size();
        if (isRefresh) {
            mAdapter.setNewData(data);
        } else {
            if (size > 0) {
                mAdapter.addData(data);
            }
        }
        if (size < PAGE_SIZE) {
            //第一页如果不够一页就不显示没有更多数据布局
            mAdapter.loadMoreEnd(isRefresh);
            Toast.makeText(this, ""no more data"", Toast.LENGTH_SHORT).show();
        } else {
            mAdapter.loadMoreComplete();
        }
    }",method,
"        if (isRefresh) {
            mAdapter.setNewData(data);
        }",method,
"            if (size > 0) {
                mAdapter.addData(data);
            }",method,
"        if (size < PAGE_SIZE) {
            //第一页如果不够一页就不显示没有更多数据布局
            mAdapter.loadMoreEnd(isRefresh);
            Toast.makeText(this, ""no more data"", Toast.LENGTH_SHORT).show();
        }",method,
"public class GithubStatusCodeException extends GithubConfusingException {
  private final int myStatusCode;
  private final GithubErrorMessage myError;
  public GithubStatusCodeException(String message, int statusCode) {
    this(message, null, statusCode);
  }
  public GithubStatusCodeException(String message, GithubErrorMessage error, int statusCode) {
    super(message);
    myStatusCode = statusCode;
    myError = error;
  }
  public int getStatusCode() {
    return myStatusCode;
  }
  @Nullable
  public GithubErrorMessage getError() {
    return myError;
  }
}",class,
"public class GithubTwoFactorAuthenticationException extends GithubAuthenticationException {
  public GithubTwoFactorAuthenticationException() {
    super();
  }
  public GithubTwoFactorAuthenticationException(String message) {
    super(message);
  }
  public GithubTwoFactorAuthenticationException(String message, Throwable cause) {
    super(message, cause);
  }
  public GithubTwoFactorAuthenticationException(Throwable cause) {
    super(cause);
  }
}",class,
"  public GithubStatusCodeException(String message, int statusCode) {
    this(message, null, statusCode);
  }",method,
"  public GithubStatusCodeException(String message, GithubErrorMessage error, int statusCode) {
    super(message);
    myStatusCode = statusCode;
    myError = error;
  }",method,
"  public int getStatusCode() {
    return myStatusCode;
  }",method,
"  @Nullable
  public GithubErrorMessage getError() {
    return myError;
  }",method,
"  public GithubTwoFactorAuthenticationException() {
    super();
  }",method,
"  public GithubTwoFactorAuthenticationException(String message) {
    super(message);
  }",method,
"  public GithubTwoFactorAuthenticationException(String message, Throwable cause) {
    super(message, cause);
  }",method,
"  public GithubTwoFactorAuthenticationException(Throwable cause) {
    super(cause);
  }",method,
"public class PatchSpec {
  private String myOldVersionDescription = """";
  private String myNewVersionDescription = """";
  private String myOldFolder;
  private String myNewFolder;
  private String myPatchFile;
  private String myJarFile;
  private boolean myIsBinary;
  private boolean myIsStrict;
  private List<String> myIgnoredFiles = Collections.emptyList();
  private List<String> myCriticalFiles = Collections.emptyList();
  private List<String> myOptionalFiles = Collections.emptyList();
  private boolean myIsNormalized;
  private Map<String, String> myWarnings = Collections.emptyMap();
  private List<String> myDeleteFiles = Collections.emptyList();
  private String myRoot = """";
  public String getOldVersionDescription() {
    return myOldVersionDescription;
  }
  public PatchSpec setOldVersionDescription(String oldVersionDescription) {
    myOldVersionDescription = oldVersionDescription;
    return this;
  }
  public String getNewVersionDescription() {
    return myNewVersionDescription;
  }
  public PatchSpec setNewVersionDescription(String newVersionDescription) {
    myNewVersionDescription = newVersionDescription;
    return this;
  }
  public String getOldFolder() {
    return myOldFolder;
  }
  public PatchSpec setOldFolder(String oldFolder) {
    myOldFolder = oldFolder;
    return this;
  }
  public String getNewFolder() {
    return myNewFolder;
  }
  public PatchSpec setNewFolder(String newFolder) {
    myNewFolder = newFolder;
    return this;
  }
  public String getPatchFile() {
    return myPatchFile;
  }
  public PatchSpec setPatchFile(String patchFile) {
    myPatchFile = patchFile;
    return this;
  }
  public String getJarFile() {
    return myJarFile;
  }
  public PatchSpec setJarFile(String jarFile) {
    myJarFile = jarFile;
    return this;
  }
  public boolean isStrict() {
    return myIsStrict;
  }
  public PatchSpec setStrict(boolean strict) {
    myIsStrict = strict;
    return this;
  }
  public List<String> getIgnoredFiles() {
    return myIgnoredFiles;
  }
  public PatchSpec setIgnoredFiles(List<String> ignoredFiles) {
    myIgnoredFiles = ignoredFiles;
    return this;
  }
  public List<String> getCriticalFiles() {
    return myCriticalFiles;
  }
  public PatchSpec setCriticalFiles(List<String> criticalFiles) {
    myCriticalFiles = criticalFiles;
    return this;
  }
  public List<String> getOptionalFiles() {
    return myOptionalFiles;
  }
  public PatchSpec setOptionalFiles(List<String> optionalFiles) {
    myOptionalFiles = optionalFiles;
    return this;
  }
  public PatchSpec setBinary(boolean binary) {
    myIsBinary = binary;
    return this;
  }
  public boolean isBinary() {
    return myIsBinary;
  }
  public boolean isNormalized() {
    return myIsNormalized;
  }
  public PatchSpec setNormalized(boolean normalized) {
    myIsNormalized = normalized;
    return this;
  }
  public PatchSpec setWarnings(Map<String, String> warnings) {
    myWarnings = warnings;
    return this;
  }
  public Map<String, String> getWarnings() {
    return myWarnings;
  }
  public PatchSpec setDeleteFiles(List<String> deleteFiles) {
    myDeleteFiles = deleteFiles;
    return this;
  }
  public List<String> getDeleteFiles() {
    return myDeleteFiles;
  }
  public PatchSpec setRoot(String root) {
    myRoot = root;
    return this;
  }
  public String getRoot() {
    return myRoot;
  }
}",class,
"  public String getOldVersionDescription() {
    return myOldVersionDescription;
  }",method,
"  public PatchSpec setOldVersionDescription(String oldVersionDescription) {
    myOldVersionDescription = oldVersionDescription;
    return this;
  }",method,
"  public String getNewVersionDescription() {
    return myNewVersionDescription;
  }",method,
"  public PatchSpec setNewVersionDescription(String newVersionDescription) {
    myNewVersionDescription = newVersionDescription;
    return this;
  }",method,
"  public String getOldFolder() {
    return myOldFolder;
  }",method,
"  public PatchSpec setOldFolder(String oldFolder) {
    myOldFolder = oldFolder;
    return this;
  }",method,
"  public String getNewFolder() {
    return myNewFolder;
  }",method,
"  public PatchSpec setNewFolder(String newFolder) {
    myNewFolder = newFolder;
    return this;
  }",method,
"  public String getPatchFile() {
    return myPatchFile;
  }",method,
"  public PatchSpec setPatchFile(String patchFile) {
    myPatchFile = patchFile;
    return this;
  }",method,
"  public String getJarFile() {
    return myJarFile;
  }",method,
"  public PatchSpec setJarFile(String jarFile) {
    myJarFile = jarFile;
    return this;
  }",method,
"  public boolean isStrict() {
    return myIsStrict;
  }",method,
"  public PatchSpec setStrict(boolean strict) {
    myIsStrict = strict;
    return this;
  }",method,
"  public List<String> getIgnoredFiles() {
    return myIgnoredFiles;
  }",method,
"  public PatchSpec setIgnoredFiles(List<String> ignoredFiles) {
    myIgnoredFiles = ignoredFiles;
    return this;
  }",method,
"  public List<String> getCriticalFiles() {
    return myCriticalFiles;
  }",method,
"  public PatchSpec setCriticalFiles(List<String> criticalFiles) {
    myCriticalFiles = criticalFiles;
    return this;
  }",method,
"  public List<String> getOptionalFiles() {
    return myOptionalFiles;
  }",method,
"  public PatchSpec setOptionalFiles(List<String> optionalFiles) {
    myOptionalFiles = optionalFiles;
    return this;
  }",method,
"  public PatchSpec setBinary(boolean binary) {
    myIsBinary = binary;
    return this;
  }",method,
"  public boolean isBinary() {
    return myIsBinary;
  }",method,
"  public boolean isNormalized() {
    return myIsNormalized;
  }",method,
"  public PatchSpec setNormalized(boolean normalized) {
    myIsNormalized = normalized;
    return this;
  }",method,
"  public PatchSpec setWarnings(Map<String, String> warnings) {
    myWarnings = warnings;
    return this;
  }",method,
"  public Map<String, String> getWarnings() {
    return myWarnings;
  }",method,
"  public PatchSpec setDeleteFiles(List<String> deleteFiles) {
    myDeleteFiles = deleteFiles;
    return this;
  }",method,
"  public List<String> getDeleteFiles() {
    return myDeleteFiles;
  }",method,
"  public PatchSpec setRoot(String root) {
    myRoot = root;
    return this;
  }",method,
"  public String getRoot() {
    return myRoot;
  }",method,
"    LogLevel(InternalLogLevel internalLevel) {
        this.internalLevel = internalLevel;
    }",method,
"    public InternalLogLevel toInternalLevel() {
        return internalLevel;
    }",method,
"    Lengths(String v) {
        value = v;
    }",method,
"    public String value() {
        return value;
    }",method,
"    public static Lengths fromValue(String v) {
        for (Lengths c : Lengths.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }",method,
"public class AutoFitTextureView extends TextureView {
  private int ratioWidth = 0;
  private int ratioHeight = 0;
  public AutoFitTextureView(final Context context) {
    this(context, null);
  }
  public AutoFitTextureView(final Context context, final AttributeSet attrs) {
    this(context, attrs, 0);
  }
  public AutoFitTextureView(final Context context, final AttributeSet attrs, final int defStyle) {
    super(context, attrs, defStyle);
  }
  public void setAspectRatio(final int width, final int height) {
    if (width < 0 || height < 0) {
      throw new IllegalArgumentException(""Size cannot be negative."");
    }
    ratioWidth = width;
    ratioHeight = height;
    requestLayout();
  }
  @Override
  protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    final int width = MeasureSpec.getSize(widthMeasureSpec);
    final int height = MeasureSpec.getSize(heightMeasureSpec);
    if (0 == ratioWidth || 0 == ratioHeight) {
      setMeasuredDimension(width, height);
    } else {
      if (width < height * ratioWidth / ratioHeight) {
        setMeasuredDimension(width, width * ratioHeight / ratioWidth);
      } else {
        setMeasuredDimension(height * ratioWidth / ratioHeight, height);
      }
    }
  }
}",class,
"  public AutoFitTextureView(final Context context) {
    this(context, null);
  }",method,
"  public AutoFitTextureView(final Context context, final AttributeSet attrs) {
    this(context, attrs, 0);
  }",method,
