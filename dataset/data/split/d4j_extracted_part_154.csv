code_snippet,type,score
"        if (player == null) {
            return;
        }",method,
"    public void play() {
        if (player == null) {
            return;
        }
        player.setPlayWhenReady(true);
    }",method,
"        if (player == null) {
            return;
        }",method,
"    public void pause() {
        if (player == null) {
            return;
        }
        player.setPlayWhenReady(false);
    }",method,
"        if (player == null) {
            return;
        }",method,
"    public void setPlayWhenReady(boolean playWhenReady) {
        autoplay = playWhenReady;
        if (player == null) {
            return;
        }
        player.setPlayWhenReady(playWhenReady);
    }",method,
"        if (player == null) {
            return;
        }",method,
"    public long getDuration() {
        return player != null ? player.getDuration() : 0;
    }",method,
"    public long getCurrentPosition() {
        return player != null ? player.getCurrentPosition() : 0;
    }",method,
"    public boolean isMuted() {
        return player.getVolume() == 0.0f;
    }",method,
"    public void setMute(boolean value) {
        if (player == null) {
            return;
        }
        if (value) {
            player.setVolume(0.0f);
        } else {
            player.setVolume(1.0f);
        }
    }",method,
"        if (player == null) {
            return;
        }",method,
"        if (value) {
            player.setVolume(0.0f);
        }",method,
"    public void setVolume(float volume) {
        if (player == null) {
            return;
        }
        player.setVolume(volume);
    }",method,
"        if (player == null) {
            return;
        }",method,
"    public void seekTo(long positionMs) {
        if (player == null) {
            return;
        }
        player.seekTo(positionMs);
    }",method,
"        if (player == null) {
            return;
        }",method,
"    public void setDelegate(VideoPlayerDelegate videoPlayerDelegate) {
        delegate = videoPlayerDelegate;
    }",method,
"    public int getBufferedPercentage() {
        return player != null ? player.getBufferedPercentage() : 0;
    }",method,
"    public long getBufferedPosition() {
        return player != null ? player.getBufferedPosition() : 0;
    }",method,
"    public boolean isPlaying() {
        return player != null && player.getPlayWhenReady();
    }",method,
"    public boolean isBuffering() {
        return player != null && lastReportedPlaybackState == ExoPlayer.STATE_BUFFERING;
    }",method,
"    public void setStreamType(int type) {
        if (player != null) {
            player.setAudioStreamType(type);
        }
    }",method,
"        if (player != null) {
            player.setAudioStreamType(type);
        }",method,
"    @Override
    public void onLoadingChanged(boolean isLoading) {
    }",method,
"    @Override
    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
        maybeReportPlayerState();
    }",method,
"    @Override
    public void onTimelineChanged(Timeline timeline, Object manifest) {
    }",method,
"    @Override
    public void onPlayerError(ExoPlaybackException error) {
        delegate.onError(error);
    }",method,
"    @Override
    public void onPositionDiscontinuity() {
    }",method,
"    @Override
    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
    }",method,
"    @Override
    public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees, float pixelWidthHeightRatio) {
        delegate.onVideoSizeChanged(width, height, unappliedRotationDegrees, pixelWidthHeightRatio);
    }",method,
"    @Override
    public void onRenderedFirstFrame() {
        delegate.onRenderedFirstFrame();
    }",method,
"    @Override
    public boolean onSurfaceDestroyed(SurfaceTexture surfaceTexture) {
        return delegate.onSurfaceDestroyed(surfaceTexture);
    }",method,
"    @Override
    public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
        delegate.onSurfaceTextureUpdated(surfaceTexture);
    }",method,
"    @Override
    public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {
    }",method,
"    private void maybeReportPlayerState() {
        boolean playWhenReady = player.getPlayWhenReady();
        int playbackState = player.getPlaybackState();
        if (lastReportedPlayWhenReady != playWhenReady || lastReportedPlaybackState != playbackState) {
            delegate.onStateChanged(playWhenReady, playbackState);
            lastReportedPlayWhenReady = playWhenReady;
            lastReportedPlaybackState = playbackState;
        }
    }",method,
"        if (lastReportedPlayWhenReady != playWhenReady || lastReportedPlaybackState != playbackState) {
            delegate.onStateChanged(playWhenReady, playbackState);
            lastReportedPlayWhenReady = playWhenReady;
            lastReportedPlaybackState = playbackState;
        }",method,
"public class LocationInformationBox extends AbstractFullBox {
    public static final String TYPE = ""loci"";
    private String language;
    private String name = """";
    private int role;
    private double longitude;
    private double latitude;
    private double altitude;
    private String astronomicalBody = """";
    private String additionalNotes = """";
    public LocationInformationBox() {
        super(TYPE);
    }
    public String getLanguage() {
        return language;
    }
    public void setLanguage(String language) {
        this.language = language;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getRole() {
        return role;
    }
    public void setRole(int role) {
        this.role = role;
    }
    public double getLongitude() {
        return longitude;
    }
    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }
    public double getLatitude() {
        return latitude;
    }
    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }
    public double getAltitude() {
        return altitude;
    }
    public void setAltitude(double altitude) {
        this.altitude = altitude;
    }
    public String getAstronomicalBody() {
        return astronomicalBody;
    }
    public void setAstronomicalBody(String astronomicalBody) {
        this.astronomicalBody = astronomicalBody;
    }
    public String getAdditionalNotes() {
        return additionalNotes;
    }
    public void setAdditionalNotes(String additionalNotes) {
        this.additionalNotes = additionalNotes;
    }
    protected long getContentSize() {
        return 22 + Utf8.convert(name).length + Utf8.convert(astronomicalBody).length + Utf8.convert(additionalNotes).length;
    }
    @Override
    public void _parseDetails(ByteBuffer content) {
        parseVersionAndFlags(content);
        language = IsoTypeReader.readIso639(content);
        name = IsoTypeReader.readString(content);
        role = IsoTypeReader.readUInt8(content);
        longitude = IsoTypeReader.readFixedPoint1616(content);
        latitude = IsoTypeReader.readFixedPoint1616(content);
        altitude = IsoTypeReader.readFixedPoint1616(content);
        astronomicalBody = IsoTypeReader.readString(content);
        additionalNotes = IsoTypeReader.readString(content);
    }
    @Override
    protected void getContent(ByteBuffer byteBuffer) {
        writeVersionAndFlags(byteBuffer);
        IsoTypeWriter.writeIso639(byteBuffer, language);
        byteBuffer.put(Utf8.convert(name));
        byteBuffer.put((byte) 0);
        IsoTypeWriter.writeUInt8(byteBuffer, role);
        IsoTypeWriter.writeFixedPoint1616(byteBuffer, longitude);
        IsoTypeWriter.writeFixedPoint1616(byteBuffer, latitude);
        IsoTypeWriter.writeFixedPoint1616(byteBuffer, altitude);
        byteBuffer.put(Utf8.convert(astronomicalBody));
        byteBuffer.put((byte) 0);
        byteBuffer.put(Utf8.convert(additionalNotes));
        byteBuffer.put((byte) 0);
    }
}",class,
"    public LocationInformationBox() {
        super(TYPE);
    }",method,
"    public String getLanguage() {
        return language;
    }",method,
"    public void setLanguage(String language) {
        this.language = language;
    }",method,
"    public String getName() {
        return name;
    }",method,
"    public void setName(String name) {
        this.name = name;
    }",method,
"    public int getRole() {
        return role;
    }",method,
"    public void setRole(int role) {
        this.role = role;
    }",method,
"    public double getLongitude() {
        return longitude;
    }",method,
"    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }",method,
"    public double getLatitude() {
        return latitude;
    }",method,
"    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }",method,
"    public double getAltitude() {
        return altitude;
    }",method,
"    public void setAltitude(double altitude) {
        this.altitude = altitude;
    }",method,
"    public String getAstronomicalBody() {
        return astronomicalBody;
    }",method,
"    public void setAstronomicalBody(String astronomicalBody) {
        this.astronomicalBody = astronomicalBody;
    }",method,
"    public String getAdditionalNotes() {
        return additionalNotes;
    }",method,
"    public void setAdditionalNotes(String additionalNotes) {
        this.additionalNotes = additionalNotes;
    }",method,
"    protected long getContentSize() {
        return 22 + Utf8.convert(name).length + Utf8.convert(astronomicalBody).length + Utf8.convert(additionalNotes).length;
    }",method,
"    @Override
    public void _parseDetails(ByteBuffer content) {
        parseVersionAndFlags(content);
        language = IsoTypeReader.readIso639(content);
        name = IsoTypeReader.readString(content);
        role = IsoTypeReader.readUInt8(content);
        longitude = IsoTypeReader.readFixedPoint1616(content);
        latitude = IsoTypeReader.readFixedPoint1616(content);
        altitude = IsoTypeReader.readFixedPoint1616(content);
        astronomicalBody = IsoTypeReader.readString(content);
        additionalNotes = IsoTypeReader.readString(content);
    }",method,
"    @Override
    protected void getContent(ByteBuffer byteBuffer) {
        writeVersionAndFlags(byteBuffer);
        IsoTypeWriter.writeIso639(byteBuffer, language);
        byteBuffer.put(Utf8.convert(name));
        byteBuffer.put((byte) 0);
        IsoTypeWriter.writeUInt8(byteBuffer, role);
        IsoTypeWriter.writeFixedPoint1616(byteBuffer, longitude);
        IsoTypeWriter.writeFixedPoint1616(byteBuffer, latitude);
        IsoTypeWriter.writeFixedPoint1616(byteBuffer, altitude);
        byteBuffer.put(Utf8.convert(astronomicalBody));
        byteBuffer.put((byte) 0);
        byteBuffer.put(Utf8.convert(additionalNotes));
        byteBuffer.put((byte) 0);
    }",method,
"    @Override
    protected <T extends KeySpec> T engineGetKeySpec(Key key, Class<T> keySpecClass)
            throws InvalidKeySpecException {
        if (key == null) {
            throw new InvalidKeySpecException(""key == null"");
        } else if ((!(key instanceof AndroidKeyStorePrivateKey))
            && (!(key instanceof AndroidKeyStorePublicKey))) {
            throw new InvalidKeySpecException(
                    ""Unsupported key type: "" + key.getClass().getName()
                    + "". This KeyFactory supports only Android Keystore asymmetric keys"");
        }
        // key is an Android Keystore private or public key
        if (keySpecClass == null) {
            throw new InvalidKeySpecException(""keySpecClass == null"");
        } else if (KeyInfo.class.equals(keySpecClass)) {
            if (!(key instanceof AndroidKeyStorePrivateKey)) {
                throw new InvalidKeySpecException(
                        ""Unsupported key type: "" + key.getClass().getName()
                        + "". KeyInfo can be obtained only for Android Keystore private keys"");
            }
            AndroidKeyStorePrivateKey keystorePrivateKey = (AndroidKeyStorePrivateKey) key;
            String keyAliasInKeystore = keystorePrivateKey.getAlias();
            String entryAlias;
            if (keyAliasInKeystore.startsWith(Credentials.USER_PRIVATE_KEY)) {
                entryAlias = keyAliasInKeystore.substring(Credentials.USER_PRIVATE_KEY.length());
            } else {
                throw new InvalidKeySpecException(""Invalid key alias: "" + keyAliasInKeystore);
            }
            @SuppressWarnings(""unchecked"")
            T result = (T) AndroidKeyStoreSecretKeyFactorySpi.getKeyInfo(
                    mKeyStore, entryAlias, keyAliasInKeystore, keystorePrivateKey.getUid());
            return result;
        } else if (X509EncodedKeySpec.class.equals(keySpecClass)) {
            if (!(key instanceof AndroidKeyStorePublicKey)) {
                throw new InvalidKeySpecException(
                        ""Unsupported key type: "" + key.getClass().getName()
                        + "". X509EncodedKeySpec can be obtained only for Android Keystore public""
                        + "" keys"");
            }
            @SuppressWarnings(""unchecked"")
            T result = (T) new X509EncodedKeySpec(((AndroidKeyStorePublicKey) key).getEncoded());
            return result;
        } else if (PKCS8EncodedKeySpec.class.equals(keySpecClass)) {
            if (key instanceof AndroidKeyStorePrivateKey) {
                throw new InvalidKeySpecException(
                        ""Key material export of Android Keystore private keys is not supported"");
            } else {
                throw new InvalidKeySpecException(
                        ""Cannot export key material of public key in PKCS#8 format.""
                        + "" Only X.509 format (X509EncodedKeySpec) supported for public keys."");
            }
        } else if (RSAPublicKeySpec.class.equals(keySpecClass)) {
            if (key instanceof AndroidKeyStoreRSAPublicKey) {
                AndroidKeyStoreRSAPublicKey rsaKey = (AndroidKeyStoreRSAPublicKey) key;
                @SuppressWarnings(""unchecked"")
                T result =
                        (T) new RSAPublicKeySpec(rsaKey.getModulus(), rsaKey.getPublicExponent());
                return result;
            } else {
                throw new InvalidKeySpecException(
                        ""Obtaining RSAPublicKeySpec not supported for "" + key.getAlgorithm() + "" ""
                        + ((key instanceof AndroidKeyStorePrivateKey) ? ""private"" : ""public"")
                        + "" key"");
            }
        } else if (ECPublicKeySpec.class.equals(keySpecClass)) {
            if (key instanceof AndroidKeyStoreECPublicKey) {
                AndroidKeyStoreECPublicKey ecKey = (AndroidKeyStoreECPublicKey) key;
                @SuppressWarnings(""unchecked"")
                T result = (T) new ECPublicKeySpec(ecKey.getW(), ecKey.getParams());
                return result;
            } else {
                throw new InvalidKeySpecException(
                        ""Obtaining ECPublicKeySpec not supported for "" + key.getAlgorithm() + "" ""
                        + ((key instanceof AndroidKeyStorePrivateKey) ? ""private"" : ""public"")
                        + "" key"");
            }
        } else {
            throw new InvalidKeySpecException(""Unsupported key spec: "" + keySpecClass.getName());
        }
    }",method,
"        if (key == null) {
            throw new InvalidKeySpecException(""key == null"");
        }",method,
"        if (keySpecClass == null) {
            throw new InvalidKeySpecException(""keySpecClass == null"");
        }",method,
"            if (key instanceof AndroidKeyStorePrivateKey) {
                throw new InvalidKeySpecException(
                        ""Key material export of Android Keystore private keys is not supported"");
            }",method,
"            if (key instanceof AndroidKeyStoreRSAPublicKey) {
                AndroidKeyStoreRSAPublicKey rsaKey = (AndroidKeyStoreRSAPublicKey) key;
                @SuppressWarnings(""unchecked"")
                T result =
                        (T) new RSAPublicKeySpec(rsaKey.getModulus(), rsaKey.getPublicExponent());
                return result;
            }",method,
"            if (key instanceof AndroidKeyStoreECPublicKey) {
                AndroidKeyStoreECPublicKey ecKey = (AndroidKeyStoreECPublicKey) key;
                @SuppressWarnings(""unchecked"")
                T result = (T) new ECPublicKeySpec(ecKey.getW(), ecKey.getParams());
                return result;
            }",method,
"    @Override
    protected PrivateKey engineGeneratePrivate(KeySpec spec) throws InvalidKeySpecException {
        throw new InvalidKeySpecException(
                ""To generate a key pair in Android Keystore, use KeyPairGenerator initialized with""
                + "" "" + KeyGenParameterSpec.class.getName());
    }",method,
"    @Override
    protected PublicKey engineGeneratePublic(KeySpec spec) throws InvalidKeySpecException {
        throw new InvalidKeySpecException(
                ""To generate a key pair in Android Keystore, use KeyPairGenerator initialized with""
                + "" "" + KeyGenParameterSpec.class.getName());
    }",method,
"        if (key == null) {
            throw new InvalidKeyException(""key == null"");
        }",method,
"public class MainActivity extends Activity {
	ViewFlipper page;
	Animation animFlipInForeward;
	Animation animFlipOutForeward;
	Animation animFlipInBackward;
	Animation animFlipOutBackward;
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		Button btnNext = (Button) findViewById(R.id.next);
		Button btnPrevious = (Button) findViewById(R.id.previous);
		btnNext.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInForeward);
				page.setOutAnimation(animFlipOutForeward);
				page.showNext();
			}
		});
		btnPrevious.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInBackward);
				page.setOutAnimation(animFlipOutBackward);
				page.showPrevious();
			}
		});
		page = (ViewFlipper) findViewById(R.id.flipper);
		animFlipInForeward = AnimationUtils.loadAnimation(this, R.anim.flipin);
		animFlipOutForeward = AnimationUtils
				.loadAnimation(this, R.anim.flipout);
		animFlipInBackward = AnimationUtils.loadAnimation(this,
				R.anim.flipin_reverse);
		animFlipOutBackward = AnimationUtils.loadAnimation(this,
				R.anim.flipout_reverse);
	}
	private void SwipeRight() {
		page.setInAnimation(animFlipInBackward);
		page.setOutAnimation(animFlipOutBackward);
		page.showPrevious();
	}
	private void SwipeLeft() {
		page.setInAnimation(animFlipInForeward);
		page.setOutAnimation(animFlipOutForeward);
		page.showNext();
	}
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		return gestureDetector.onTouchEvent(event);
	}
	SimpleOnGestureListener simpleOnGestureListener = new SimpleOnGestureListener() {
		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
				float velocityY) {
			float sensitvity = 50;
			if ((e1.getX() - e2.getX()) > sensitvity) {
				SwipeLeft();
			} else if ((e2.getX() - e1.getX()) > sensitvity) {
				SwipeRight();
			}
			return true;
		}
	};
	GestureDetector gestureDetector = new GestureDetector(
			simpleOnGestureListener);
}",class,
"public final class BuildConfig {
    public final static boolean DEBUG = true;
}",class,
"public final class R {
    public static final class anim {
        public static final int flipin=0x7f040000;
        public static final int flipin_reverse=0x7f040001;
        public static final int flipout=0x7f040002;
        public static final int flipout_reverse=0x7f040003;
    }
    public static final class attr {
    }
    public static final class dimen {
        public static final int activity_horizontal_margin=0x7f050000;
        public static final int activity_vertical_margin=0x7f050001;
    }
    public static final class drawable {
        public static final int ic_launcher=0x7f020000;
    }
    public static final class id {
        public static final int action_settings=0x7f090003;
        public static final int flipper=0x7f090002;
        public static final int next=0x7f090001;
        public static final int previous=0x7f090000;
    }
    public static final class layout {
        public static final int activity_main=0x7f030000;
    }
    public static final class menu {
        public static final int main=0x7f080000;
    }
    public static final class string {
        public static final int action_settings=0x7f060001;
        public static final int app_name=0x7f060000;
        public static final int hello_world=0x7f060002;
    }
    public static final class style {
        public static final int AppBaseTheme=0x7f070000;
        public static final int AppTheme=0x7f070001;
    }
}",class,
"    public static final class anim {
        public static final int flipin=0x7f040000;
        public static final int flipin_reverse=0x7f040001;
        public static final int flipout=0x7f040002;
        public static final int flipout_reverse=0x7f040003;
    }",class,
"    public static final class attr {
    }",class,
"    public static final class dimen {
        public static final int activity_horizontal_margin=0x7f050000;
        public static final int activity_vertical_margin=0x7f050001;
    }",class,
"    public static final class drawable {
        public static final int ic_launcher=0x7f020000;
    }",class,
"    public static final class id {
        public static final int action_settings=0x7f090003;
        public static final int flipper=0x7f090002;
        public static final int next=0x7f090001;
        public static final int previous=0x7f090000;
    }",class,
"    public static final class layout {
        public static final int activity_main=0x7f030000;
    }",class,
"    public static final class menu {
        public static final int main=0x7f080000;
    }",class,
"    public static final class string {
        public static final int action_settings=0x7f060001;
        public static final int app_name=0x7f060000;
        public static final int hello_world=0x7f060002;
    }",class,
"    public static final class style {
        public static final int AppBaseTheme=0x7f070000;
        public static final int AppTheme=0x7f070001;
    }",class,
"	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		Button btnNext = (Button) findViewById(R.id.next);
		Button btnPrevious = (Button) findViewById(R.id.previous);
		btnNext.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInForeward);
				page.setOutAnimation(animFlipOutForeward);
				page.showNext();
			}
		});
		btnPrevious.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInBackward);
				page.setOutAnimation(animFlipOutBackward);
				page.showPrevious();
			}
		});
		page = (ViewFlipper) findViewById(R.id.flipper);
		animFlipInForeward = AnimationUtils.loadAnimation(this, R.anim.flipin);
		animFlipOutForeward = AnimationUtils
				.loadAnimation(this, R.anim.flipout);
		animFlipInBackward = AnimationUtils.loadAnimation(this,
				R.anim.flipin_reverse);
		animFlipOutBackward = AnimationUtils.loadAnimation(this,
				R.anim.flipout_reverse);
	}",method,
"		btnNext.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInForeward);
				page.setOutAnimation(animFlipOutForeward);
				page.showNext();
			}
		}",method,
"			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInForeward);
				page.setOutAnimation(animFlipOutForeward);
				page.showNext();
			}",method,
"		btnPrevious.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInBackward);
				page.setOutAnimation(animFlipOutBackward);
				page.showPrevious();
			}
		}",method,
"			@Override
			public void onClick(View arg0) {
				page.setInAnimation(animFlipInBackward);
				page.setOutAnimation(animFlipOutBackward);
				page.showPrevious();
			}",method,
"	private void SwipeRight() {
		page.setInAnimation(animFlipInBackward);
		page.setOutAnimation(animFlipOutBackward);
		page.showPrevious();
	}",method,
"	private void SwipeLeft() {
		page.setInAnimation(animFlipInForeward);
		page.setOutAnimation(animFlipOutForeward);
		page.showNext();
	}",method,
"	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		return gestureDetector.onTouchEvent(event);
	}",method,
"		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
				float velocityY) {
			float sensitvity = 50;
			if ((e1.getX() - e2.getX()) > sensitvity) {
				SwipeLeft();
			} else if ((e2.getX() - e1.getX()) > sensitvity) {
				SwipeRight();
			}
			return true;
		}",method,
"public class WrappedFatPtrExpr implements FatPtr {
  private ValueFunction valueFunction;
  private JLValue ref;
  public WrappedFatPtrExpr(ValueFunction valueFunction, JLValue paramExpr) {
    this.valueFunction = valueFunction;
    this.ref = paramExpr;
  }
  public JExpr getArray() {
    return Wrappers.arrayField(ref);
  }
  public JExpr getOffset() {
    return Wrappers.offsetField(ref);
  }
  @Override
  public Type getValueType() {
    return valueFunction.getValueType();
  }
  @Override
  public boolean isAddressable() {
    return false;
  }
  @Override
  public JExpr wrap() {
    return ref;
  }
  @Override
  public FatPtrPair toPair(MethodGenerator mv) {
    return Wrappers.toPair(mv, valueFunction, ref);
  }
  @Override
  public void store(MethodGenerator mv, GExpr rhs) {
    if(rhs instanceof FatPtr) {
      ref.store(mv, ((FatPtr) rhs).wrap());
    } else {
      throw new UnsupportedOperationException(""TODO: rhs = "" + rhs.getClass().getName());
    }
  }
  @Override
  public GExpr addressOf() {
    throw new NotAddressableException();
  }
  @Override
  public FunPtr toFunPtr() throws UnsupportedCastException {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public FatArrayExpr toArrayExpr() throws UnsupportedCastException {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public PrimitiveValue toPrimitiveExpr(GimplePrimitiveType targetType) throws UnsupportedCastException {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public VoidPtrExpr toVoidPtrExpr() throws UnsupportedCastException {
    return new VoidPtrExpr(ref);
  }
  @Override
  public RecordArrayExpr toRecordArrayExpr() throws UnsupportedCastException {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public VPtrExpr toVPtrExpr() {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public ProvidedPtrExpr toProvidedPtrExpr(Type jvmType) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public FatPtr toFatPtrExpr(ValueFunction valueFunction) {
    return this;
  }
  @Override
  public VPtrRecordExpr toVPtrRecord(GimpleRecordType recordType) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public VArrayExpr toVArray(GimpleArrayType arrayType) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public void jumpIfNull(MethodGenerator mv, Label label) {
    getArray().load(mv);
    mv.ifnull(label);
  }
  @Override
  public JExpr memoryCompare(MethodGenerator mv, PtrExpr otherPointer, JExpr n) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public void memorySet(MethodGenerator mv, JExpr byteValue, JExpr length) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public void memoryCopy(MethodGenerator mv, PtrExpr source, JExpr length, boolean buffer) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public PtrExpr realloc(MethodGenerator mv, JExpr newSizeInBytes) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public PtrExpr pointerPlus(MethodGenerator mv, JExpr offsetInBytes) {
    throw new UnsupportedOperationException(""TODO"");
  }
  @Override
  public GExpr valueOf(GimpleType expectedType) {
    return valueFunction.dereference(this);
  }
  @Override
  public ConditionGenerator comparePointer(MethodGenerator mv, GimpleOp op, GExpr otherPointer) {
    throw new UnsupportedOperationException(""TODO"");
  }
  public JLValue valueExpr() {
    return new JLValue() {
      @Nonnull
      @Override
      public Type getType() {
        return valueFunction.getValueType();
      }
      @Override
      public void load(@Nonnull MethodGenerator mv) {
        ref.load(mv);
        if(ref.getType().equals(Type.getType(ObjectPtr.class))) {
          mv.invokevirtual(ref.getType(), ""get"", Type.getMethodDescriptor(Type.getType(Object.class)), false);
          mv.checkcast(valueFunction.getValueType());
        } else {
          mv.invokevirtual(ref.getType(), ""get"", Type.getMethodDescriptor(valueFunction.getValueType()), false);
        }
      }
      @Override
      public void store(MethodGenerator mv, JExpr expr) {
        ref.load(mv);
        expr.load(mv);
        if(ref.getType().equals(Type.getType(ObjectPtr.class))) {
          mv.invokevirtual(ref.getType(), ""set"", Type.getMethodDescriptor(Type.VOID_TYPE, Type.getType(Object.class)), false);
        } else {
          mv.invokevirtual(ref.getType(), ""set"", Type.getMethodDescriptor(Type.VOID_TYPE, valueFunction.getValueType()), false);
        }
      }
    };
  }
}",class,
"  public WrappedFatPtrExpr(ValueFunction valueFunction, JLValue paramExpr) {
    this.valueFunction = valueFunction;
    this.ref = paramExpr;
  }",method,
"  public JExpr getArray() {
    return Wrappers.arrayField(ref);
  }",method,
"  public JExpr getOffset() {
    return Wrappers.offsetField(ref);
  }",method,
"  @Override
  public Type getValueType() {
    return valueFunction.getValueType();
  }",method,
"  @Override
  public boolean isAddressable() {
    return false;
  }",method,
"  @Override
  public JExpr wrap() {
    return ref;
  }",method,
"  @Override
  public FatPtrPair toPair(MethodGenerator mv) {
    return Wrappers.toPair(mv, valueFunction, ref);
  }",method,
"  @Override
  public void store(MethodGenerator mv, GExpr rhs) {
    if(rhs instanceof FatPtr) {
      ref.store(mv, ((FatPtr) rhs).wrap());
    } else {
      throw new UnsupportedOperationException(""TODO: rhs = "" + rhs.getClass().getName());
    }
  }",method,
"    if(rhs instanceof FatPtr) {
      ref.store(mv, ((FatPtr) rhs).wrap());
    }",method,
"  @Override
  public GExpr addressOf() {
    throw new NotAddressableException();
  }",method,
"  @Override
  public FunPtr toFunPtr() throws UnsupportedCastException {
    throw new UnsupportedOperationException(""TODO"");
  }",method,
"  @Override
  public FatArrayExpr toArrayExpr() throws UnsupportedCastException {
    throw new UnsupportedOperationException(""TODO"");
  }",method,
