code_snippet,type,score
"public class btBroadphaseRayCallback extends btBroadphaseAabbCallback {
	private long swigCPtr;
	protected btBroadphaseRayCallback(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, CollisionJNI.btBroadphaseRayCallback_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	public btBroadphaseRayCallback(long cPtr, boolean cMemoryOwn) {
		this(""btBroadphaseRayCallback"", cPtr, cMemoryOwn);
		construct();
	}
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(CollisionJNI.btBroadphaseRayCallback_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}
	public static long getCPtr(btBroadphaseRayCallback obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}
	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}
  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				CollisionJNI.delete_btBroadphaseRayCallback(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    CollisionJNI.btBroadphaseRayCallback_change_ownership(this, swigCPtr, false);
  }
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    CollisionJNI.btBroadphaseRayCallback_change_ownership(this, swigCPtr, true);
  }
  public void setRayDirectionInverse(btVector3 value) {
    CollisionJNI.btBroadphaseRayCallback_rayDirectionInverse_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }
  public btVector3 getRayDirectionInverse() {
    long cPtr = CollisionJNI.btBroadphaseRayCallback_rayDirectionInverse_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }
  public void setSigns(long[] value) {
    CollisionJNI.btBroadphaseRayCallback_signs_set(swigCPtr, this, value);
  }
  public long[] getSigns() {
    return CollisionJNI.btBroadphaseRayCallback_signs_get(swigCPtr, this);
  }
  public void setLambda_max(float value) {
    CollisionJNI.btBroadphaseRayCallback_lambda_max_set(swigCPtr, this, value);
  }
  public float getLambda_max() {
    return CollisionJNI.btBroadphaseRayCallback_lambda_max_get(swigCPtr, this);
  }
  public btBroadphaseRayCallback() {
    this(CollisionJNI.new_btBroadphaseRayCallback(), true);
    CollisionJNI.btBroadphaseRayCallback_director_connect(this, swigCPtr, swigCMemOwn, true);
  }
}",class,
"	protected btBroadphaseRayCallback(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, CollisionJNI.btBroadphaseRayCallback_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}",method,
"	public btBroadphaseRayCallback(long cPtr, boolean cMemoryOwn) {
		this(""btBroadphaseRayCallback"", cPtr, cMemoryOwn);
		construct();
	}",method,
"	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(CollisionJNI.btBroadphaseRayCallback_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}",method,
"	public static long getCPtr(btBroadphaseRayCallback obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}",method,
"	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}",method,
"  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				CollisionJNI.delete_btBroadphaseRayCallback(swigCPtr);
			}
			swigCPtr = 0;
		}",method,
"			if (swigCMemOwn) {
				swigCMemOwn = false;
				CollisionJNI.delete_btBroadphaseRayCallback(swigCPtr);
			}",method,
"  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }",method,
"  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    CollisionJNI.btBroadphaseRayCallback_change_ownership(this, swigCPtr, false);
  }",method,
"  public void swigTakeOwnership() {
    swigCMemOwn = true;
    CollisionJNI.btBroadphaseRayCallback_change_ownership(this, swigCPtr, true);
  }",method,
"  public void setRayDirectionInverse(btVector3 value) {
    CollisionJNI.btBroadphaseRayCallback_rayDirectionInverse_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }",method,
"  public btVector3 getRayDirectionInverse() {
    long cPtr = CollisionJNI.btBroadphaseRayCallback_rayDirectionInverse_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }",method,
"  public void setSigns(long[] value) {
    CollisionJNI.btBroadphaseRayCallback_signs_set(swigCPtr, this, value);
  }",method,
"  public long[] getSigns() {
    return CollisionJNI.btBroadphaseRayCallback_signs_get(swigCPtr, this);
  }",method,
"  public void setLambda_max(float value) {
    CollisionJNI.btBroadphaseRayCallback_lambda_max_set(swigCPtr, this, value);
  }",method,
"  public float getLambda_max() {
    return CollisionJNI.btBroadphaseRayCallback_lambda_max_get(swigCPtr, this);
  }",method,
"  public btBroadphaseRayCallback() {
    this(CollisionJNI.new_btBroadphaseRayCallback(), true);
    CollisionJNI.btBroadphaseRayCallback_director_connect(this, swigCPtr, swigCMemOwn, true);
  }",method,
"public class EurekaInfoServlet extends HttpServlet {
	 private static final long serialVersionUID = 1L;
	 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		 String uri = request.getParameter(""url"");
		 if (uri==null || """".equals(uri)) response.getOutputStream().write(""Error. You need supply a valid eureka URL "".getBytes()); 
		 try{
			 response.setContentType(""application/xml"");
			 response.setHeader(""Content-Encoding"", ""gzip"");
			 IOUtils.copy( UrlUtils.readXmlInputStream(uri) ,response.getOutputStream());
		 }catch(Exception e){
			 response.getOutputStream().write((""Error. You need supply a valid eureka URL. Ex: "" + e + """").getBytes()); 
		 }
	 }
}",class,
"	 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		 String uri = request.getParameter(""url"");
		 if (uri==null || """".equals(uri)) response.getOutputStream().write(""Error. You need supply a valid eureka URL "".getBytes()); 
		 try{
			 response.setContentType(""application/xml"");
			 response.setHeader(""Content-Encoding"", ""gzip"");
			 IOUtils.copy( UrlUtils.readXmlInputStream(uri) ,response.getOutputStream());
		 }catch(Exception e){
			 response.getOutputStream().write((""Error. You need supply a valid eureka URL. Ex: "" + e + """").getBytes()); 
		 }
	 }",method,
"public class FillBitmapTextureAtlasSourceDecorator extends BaseShapeBitmapTextureAtlasSourceDecorator {
	// ===========================================================
	// Constants
	// ===========================================================
	// ===========================================================
	// Fields
	// ===========================================================
	protected final int mFillColor;
	// ===========================================================
	// Constructors
	// ===========================================================
	public FillBitmapTextureAtlasSourceDecorator(final IBitmapTextureAtlasSource pBitmapTextureAtlasSource, final IBitmapTextureAtlasSourceDecoratorShape pBitmapTextureAtlasSourceDecoratorShape, final int pFillColor) {
		this(pBitmapTextureAtlasSource, pBitmapTextureAtlasSourceDecoratorShape, pFillColor, null);
	}
	public FillBitmapTextureAtlasSourceDecorator(final IBitmapTextureAtlasSource pBitmapTextureAtlasSource, final IBitmapTextureAtlasSourceDecoratorShape pBitmapTextureAtlasSourceDecoratorShape, final int pFillColor, final TextureAtlasSourceDecoratorOptions pTextureAtlasSourceDecoratorOptions) {
		super(pBitmapTextureAtlasSource, pBitmapTextureAtlasSourceDecoratorShape, pTextureAtlasSourceDecoratorOptions);
		this.mFillColor = pFillColor;
		this.mPaint.setStyle(Style.FILL);
		this.mPaint.setColor(pFillColor);
	}
	@Override
	public FillBitmapTextureAtlasSourceDecorator deepCopy() {
		return new FillBitmapTextureAtlasSourceDecorator(this.mBitmapTextureAtlasSource, this.mBitmapTextureAtlasSourceDecoratorShape, this.mFillColor, this.mTextureAtlasSourceDecoratorOptions);
	}
	// ===========================================================
	// Getter & Setter
	// ===========================================================
	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================
	// ===========================================================
	// Methods
	// ===========================================================
	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
}",class,
"	public FillBitmapTextureAtlasSourceDecorator(final IBitmapTextureAtlasSource pBitmapTextureAtlasSource, final IBitmapTextureAtlasSourceDecoratorShape pBitmapTextureAtlasSourceDecoratorShape, final int pFillColor) {
		this(pBitmapTextureAtlasSource, pBitmapTextureAtlasSourceDecoratorShape, pFillColor, null);
	}",method,
"	public FillBitmapTextureAtlasSourceDecorator(final IBitmapTextureAtlasSource pBitmapTextureAtlasSource, final IBitmapTextureAtlasSourceDecoratorShape pBitmapTextureAtlasSourceDecoratorShape, final int pFillColor, final TextureAtlasSourceDecoratorOptions pTextureAtlasSourceDecoratorOptions) {
		super(pBitmapTextureAtlasSource, pBitmapTextureAtlasSourceDecoratorShape, pTextureAtlasSourceDecoratorOptions);
		this.mFillColor = pFillColor;
		this.mPaint.setStyle(Style.FILL);
		this.mPaint.setColor(pFillColor);
	}",method,
"	@Override
	public FillBitmapTextureAtlasSourceDecorator deepCopy() {
		return new FillBitmapTextureAtlasSourceDecorator(this.mBitmapTextureAtlasSource, this.mBitmapTextureAtlasSourceDecoratorShape, this.mFillColor, this.mTextureAtlasSourceDecoratorOptions);
	}",method,
"public final class OcspUtils {
    private static final ASN1ObjectIdentifier OCSP_RESPONDER_OID
        = new ASN1ObjectIdentifier(""1.3.6.1.5.5.7.48.1"").intern();
    private static final String OCSP_REQUEST_TYPE = ""application/ocsp-request"";
    private static final String OCSP_RESPONSE_TYPE = ""application/ocsp-response"";
    private OcspUtils() {
    }
    public static URI ocspUri(X509Certificate certificate) throws IOException {
        byte[] value = certificate.getExtensionValue(Extension.authorityInfoAccess.getId());
        if (value == null) {
            return null;
        }
        ASN1Primitive authorityInfoAccess = X509ExtensionUtil.fromExtensionValue(value);
        if (!(authorityInfoAccess instanceof DLSequence)) {
            return null;
        }
        DLSequence aiaSequence = (DLSequence) authorityInfoAccess;
        DERTaggedObject taggedObject = findObject(aiaSequence, OCSP_RESPONDER_OID, DERTaggedObject.class);
        if (taggedObject == null) {
            return null;
        }
        if (taggedObject.getTagNo() != BERTags.OBJECT_IDENTIFIER) {
            return null;
        }
        byte[] encoded = taggedObject.getEncoded();
        int length = (int) encoded[1] & 0xFF;
        String uri = new String(encoded, 2, length, CharsetUtil.UTF_8);
        return URI.create(uri);
    }
    private static <T> T findObject(DLSequence sequence, ASN1ObjectIdentifier oid, Class<T> type) {
        for (ASN1Encodable element : sequence) {
            if (!(element instanceof DLSequence)) {
                continue;
            }
            DLSequence subSequence = (DLSequence) element;
            if (subSequence.size() != 2) {
                continue;
            }
            ASN1Encodable key = subSequence.getObjectAt(0);
            ASN1Encodable value = subSequence.getObjectAt(1);
            if (key.equals(oid) && type.isInstance(value)) {
                return type.cast(value);
            }
        }
        return null;
    }
    public static OCSPResp request(URI uri, OCSPReq request, long timeout, TimeUnit unit) throws IOException {
        byte[] encoded = request.getEncoded();
        URL url = uri.toURL();
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        try {
            connection.setConnectTimeout((int) unit.toMillis(timeout));
            connection.setReadTimeout((int) unit.toMillis(timeout));
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""host"", uri.getHost());
            connection.setRequestProperty(""content-type"", OCSP_REQUEST_TYPE);
            connection.setRequestProperty(""accept"", OCSP_RESPONSE_TYPE);
            connection.setRequestProperty(""content-length"", String.valueOf(encoded.length));
            OutputStream out = connection.getOutputStream();
            try {
                out.write(encoded);
                out.flush();
                InputStream in = connection.getInputStream();
                try {
                    int code = connection.getResponseCode();
                    if (code != HttpsURLConnection.HTTP_OK) {
                        throw new IOException(""Unexpected status-code="" + code);
                    }
                    String contentType = connection.getContentType();
                    if (!contentType.equalsIgnoreCase(OCSP_RESPONSE_TYPE)) {
                        throw new IOException(""Unexpected content-type="" + contentType);
                    }
                    int contentLength = connection.getContentLength();
                    if (contentLength == -1) {
                        // Probably a terrible idea!
                        contentLength = Integer.MAX_VALUE;
                    }
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    try {
                        byte[] buffer = new byte[8192];
                        int length = -1;
                        while ((length = in.read(buffer)) != -1) {
                            baos.write(buffer, 0, length);
                            if (baos.size() >= contentLength) {
                                break;
                            }
                        }
                    } finally {
                        baos.close();
                    }
                    return new OCSPResp(baos.toByteArray());
                } finally {
                    in.close();
                }
            } finally {
                out.close();
            }
        } finally {
            connection.disconnect();
        }
    }
}",class,
"    private OcspUtils() {
    }",method,
"    public static URI ocspUri(X509Certificate certificate) throws IOException {
        byte[] value = certificate.getExtensionValue(Extension.authorityInfoAccess.getId());
        if (value == null) {
            return null;
        }
        ASN1Primitive authorityInfoAccess = X509ExtensionUtil.fromExtensionValue(value);
        if (!(authorityInfoAccess instanceof DLSequence)) {
            return null;
        }
        DLSequence aiaSequence = (DLSequence) authorityInfoAccess;
        DERTaggedObject taggedObject = findObject(aiaSequence, OCSP_RESPONDER_OID, DERTaggedObject.class);
        if (taggedObject == null) {
            return null;
        }
        if (taggedObject.getTagNo() != BERTags.OBJECT_IDENTIFIER) {
            return null;
        }
        byte[] encoded = taggedObject.getEncoded();
        int length = (int) encoded[1] & 0xFF;
        String uri = new String(encoded, 2, length, CharsetUtil.UTF_8);
        return URI.create(uri);
    }",method,
"        if (value == null) {
            return null;
        }",method,
"        if (taggedObject == null) {
            return null;
        }",method,
"    private static <T> T findObject(DLSequence sequence, ASN1ObjectIdentifier oid, Class<T> type) {
        for (ASN1Encodable element : sequence) {
            if (!(element instanceof DLSequence)) {
                continue;
            }
            DLSequence subSequence = (DLSequence) element;
            if (subSequence.size() != 2) {
                continue;
            }
            ASN1Encodable key = subSequence.getObjectAt(0);
            ASN1Encodable value = subSequence.getObjectAt(1);
            if (key.equals(oid) && type.isInstance(value)) {
                return type.cast(value);
            }
        }
        return null;
    }",method,
"        for (ASN1Encodable element : sequence) {
            if (!(element instanceof DLSequence)) {
                continue;
            }
            DLSequence subSequence = (DLSequence) element;
            if (subSequence.size() != 2) {
                continue;
            }
            ASN1Encodable key = subSequence.getObjectAt(0);
            ASN1Encodable value = subSequence.getObjectAt(1);
            if (key.equals(oid) && type.isInstance(value)) {
                return type.cast(value);
            }
        }",method,
"    public static OCSPResp request(URI uri, OCSPReq request, long timeout, TimeUnit unit) throws IOException {
        byte[] encoded = request.getEncoded();
        URL url = uri.toURL();
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        try {
            connection.setConnectTimeout((int) unit.toMillis(timeout));
            connection.setReadTimeout((int) unit.toMillis(timeout));
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""host"", uri.getHost());
            connection.setRequestProperty(""content-type"", OCSP_REQUEST_TYPE);
            connection.setRequestProperty(""accept"", OCSP_RESPONSE_TYPE);
            connection.setRequestProperty(""content-length"", String.valueOf(encoded.length));
            OutputStream out = connection.getOutputStream();
            try {
                out.write(encoded);
                out.flush();
                InputStream in = connection.getInputStream();
                try {
                    int code = connection.getResponseCode();
                    if (code != HttpsURLConnection.HTTP_OK) {
                        throw new IOException(""Unexpected status-code="" + code);
                    }
                    String contentType = connection.getContentType();
                    if (!contentType.equalsIgnoreCase(OCSP_RESPONSE_TYPE)) {
                        throw new IOException(""Unexpected content-type="" + contentType);
                    }
                    int contentLength = connection.getContentLength();
                    if (contentLength == -1) {
                        // Probably a terrible idea!
                        contentLength = Integer.MAX_VALUE;
                    }
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    try {
                        byte[] buffer = new byte[8192];
                        int length = -1;
                        while ((length = in.read(buffer)) != -1) {
                            baos.write(buffer, 0, length);
                            if (baos.size() >= contentLength) {
                                break;
                            }
                        }
                    } finally {
                        baos.close();
                    }
                    return new OCSPResp(baos.toByteArray());
                } finally {
                    in.close();
                }
            } finally {
                out.close();
            }
        } finally {
            connection.disconnect();
        }
    }",method,
"                    if (code != HttpsURLConnection.HTTP_OK) {
                        throw new IOException(""Unexpected status-code="" + code);
                    }",method,
"                    if (contentLength == -1) {
                        // Probably a terrible idea!
                        contentLength = Integer.MAX_VALUE;
                    }",method,
"public final class CacheInterceptor implements Interceptor {
  final InternalCache cache;
  public CacheInterceptor(InternalCache cache) {
    this.cache = cache;
  }
  @Override public Response intercept(Chain chain) throws IOException {
    Response cacheCandidate = cache != null
        ? cache.get(chain.request())
        : null;
    long now = System.currentTimeMillis();
    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();
    Request networkRequest = strategy.networkRequest;
    Response cacheResponse = strategy.cacheResponse;
    if (cache != null) {
      cache.trackResponse(strategy);
    }
    if (cacheCandidate != null && cacheResponse == null) {
      closeQuietly(cacheCandidate.body()); // The cache candidate wasn't applicable. Close it.
    }
    // If we're forbidden from using the network and the cache is insufficient, fail.
    if (networkRequest == null && cacheResponse == null) {
      return new Response.Builder()
          .request(chain.request())
          .protocol(Protocol.HTTP_1_1)
          .code(504)
          .message(""Unsatisfiable Request (only-if-cached)"")
          .body(Util.EMPTY_RESPONSE)
          .sentRequestAtMillis(-1L)
          .receivedResponseAtMillis(System.currentTimeMillis())
          .build();
    }
    // If we don't need the network, we're done.
    if (networkRequest == null) {
      return cacheResponse.newBuilder()
          .cacheResponse(stripBody(cacheResponse))
          .build();
    }
    Response networkResponse = null;
    try {
      networkResponse = chain.proceed(networkRequest);
    } finally {
      // If we're crashing on I/O or otherwise, don't leak the cache body.
      if (networkResponse == null && cacheCandidate != null) {
        closeQuietly(cacheCandidate.body());
      }
    }
    // If we have a cache response too, then we're doing a conditional get.
    if (cacheResponse != null) {
      if (networkResponse.code() == HTTP_NOT_MODIFIED) {
        Response response = cacheResponse.newBuilder()
            .headers(combine(cacheResponse.headers(), networkResponse.headers()))
            .sentRequestAtMillis(networkResponse.sentRequestAtMillis())
            .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())
            .cacheResponse(stripBody(cacheResponse))
            .networkResponse(stripBody(networkResponse))
            .build();
        networkResponse.body().close();
        // Update the cache after combining headers but before stripping the
        // Content-Encoding header (as performed by initContentStream()).
        cache.trackConditionalCacheHit();
        cache.update(cacheResponse, response);
        return response;
      } else {
        closeQuietly(cacheResponse.body());
      }
    }
    Response response = networkResponse.newBuilder()
        .cacheResponse(stripBody(cacheResponse))
        .networkResponse(stripBody(networkResponse))
        .build();
    if (cache != null) {
      if (HttpHeaders.hasBody(response) && CacheStrategy.isCacheable(response, networkRequest)) {
        // Offer this request to the cache.
        CacheRequest cacheRequest = cache.put(response);
        return cacheWritingResponse(cacheRequest, response);
      }
      if (HttpMethod.invalidatesCache(networkRequest.method())) {
        try {
          cache.remove(networkRequest);
        } catch (IOException ignored) {
          // The cache cannot be written.
        }
      }
    }
    return response;
  }
  private static Response stripBody(Response response) {
    return response != null && response.body() != null
        ? response.newBuilder().body(null).build()
        : response;
  }
  private Response cacheWritingResponse(final CacheRequest cacheRequest, Response response)
      throws IOException {
    // Some apps return a null body; for compatibility we treat that like a null cache request.
    if (cacheRequest == null) return response;
    Sink cacheBodyUnbuffered = cacheRequest.body();
    if (cacheBodyUnbuffered == null) return response;
    final BufferedSource source = response.body().source();
    final BufferedSink cacheBody = Okio.buffer(cacheBodyUnbuffered);
    Source cacheWritingSource = new Source() {
      boolean cacheRequestClosed;
      @Override public long read(Buffer sink, long byteCount) throws IOException {
        long bytesRead;
        try {
          bytesRead = source.read(sink, byteCount);
        } catch (IOException e) {
          if (!cacheRequestClosed) {
            cacheRequestClosed = true;
            cacheRequest.abort(); // Failed to write a complete cache response.
          }
          throw e;
        }
        if (bytesRead == -1) {
          if (!cacheRequestClosed) {
            cacheRequestClosed = true;
            cacheBody.close(); // The cache response is complete!
          }
          return -1;
        }
        sink.copyTo(cacheBody.buffer(), sink.size() - bytesRead, bytesRead);
        cacheBody.emitCompleteSegments();
        return bytesRead;
      }
      @Override public Timeout timeout() {
        return source.timeout();
      }
      @Override public void close() throws IOException {
        if (!cacheRequestClosed
            && !discard(this, HttpCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {
          cacheRequestClosed = true;
          cacheRequest.abort();
        }
        source.close();
      }
    };
    String contentType = response.header(""Content-Type"");
    long contentLength = response.body().contentLength();
    return response.newBuilder()
        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource)))
        .build();
  }
  private static Headers combine(Headers cachedHeaders, Headers networkHeaders) {
    Headers.Builder result = new Headers.Builder();
    for (int i = 0, size = cachedHeaders.size(); i < size; i++) {
      String fieldName = cachedHeaders.name(i);
      String value = cachedHeaders.value(i);
      if (""Warning"".equalsIgnoreCase(fieldName) && value.startsWith(""1"")) {
        continue; // Drop 100-level freshness warnings.
      }
      if (!isEndToEnd(fieldName) || networkHeaders.get(fieldName) == null) {
        Internal.instance.addLenient(result, fieldName, value);
      }
    }
    for (int i = 0, size = networkHeaders.size(); i < size; i++) {
      String fieldName = networkHeaders.name(i);
      if (""Content-Length"".equalsIgnoreCase(fieldName)) {
        continue; // Ignore content-length headers of validating responses.
      }
      if (isEndToEnd(fieldName)) {
        Internal.instance.addLenient(result, fieldName, networkHeaders.value(i));
      }
    }
    return result.build();
  }
  static boolean isEndToEnd(String fieldName) {
    return !""Connection"".equalsIgnoreCase(fieldName)
        && !""Keep-Alive"".equalsIgnoreCase(fieldName)
        && !""Proxy-Authenticate"".equalsIgnoreCase(fieldName)
        && !""Proxy-Authorization"".equalsIgnoreCase(fieldName)
        && !""TE"".equalsIgnoreCase(fieldName)
        && !""Trailers"".equalsIgnoreCase(fieldName)
        && !""Transfer-Encoding"".equalsIgnoreCase(fieldName)
        && !""Upgrade"".equalsIgnoreCase(fieldName);
  }
}",class,
"  public CacheInterceptor(InternalCache cache) {
    this.cache = cache;
  }",method,
"    if (cache != null) {
      cache.trackResponse(strategy);
    }",method,
"    if (cacheCandidate != null && cacheResponse == null) {
      closeQuietly(cacheCandidate.body()); // The cache candidate wasn't applicable. Close it.
    }",method,
"    if (networkRequest == null && cacheResponse == null) {
      return new Response.Builder()
          .request(chain.request())
          .protocol(Protocol.HTTP_1_1)
          .code(504)
          .message(""Unsatisfiable Request (only-if-cached)"")
          .body(Util.EMPTY_RESPONSE)
          .sentRequestAtMillis(-1L)
          .receivedResponseAtMillis(System.currentTimeMillis())
          .build();
    }",method,
"    if (networkRequest == null) {
      return cacheResponse.newBuilder()
          .cacheResponse(stripBody(cacheResponse))
          .build();
    }",method,
"      if (networkResponse == null && cacheCandidate != null) {
        closeQuietly(cacheCandidate.body());
      }",method,
"    if (cacheResponse != null) {
      if (networkResponse.code() == HTTP_NOT_MODIFIED) {
        Response response = cacheResponse.newBuilder()
            .headers(combine(cacheResponse.headers(), networkResponse.headers()))
            .sentRequestAtMillis(networkResponse.sentRequestAtMillis())
            .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())
            .cacheResponse(stripBody(cacheResponse))
            .networkResponse(stripBody(networkResponse))
            .build();
        networkResponse.body().close();
        // Update the cache after combining headers but before stripping the
        // Content-Encoding header (as performed by initContentStream()).
        cache.trackConditionalCacheHit();
        cache.update(cacheResponse, response);
        return response;
      } else {
        closeQuietly(cacheResponse.body());
      }
    }",method,
"    if (cache != null) {
      if (HttpHeaders.hasBody(response) && CacheStrategy.isCacheable(response, networkRequest)) {
        // Offer this request to the cache.
        CacheRequest cacheRequest = cache.put(response);
        return cacheWritingResponse(cacheRequest, response);
      }
      if (HttpMethod.invalidatesCache(networkRequest.method())) {
        try {
          cache.remove(networkRequest);
        } catch (IOException ignored) {
          // The cache cannot be written.
        }
      }
    }",method,
"  private static Response stripBody(Response response) {
    return response != null && response.body() != null
        ? response.newBuilder().body(null).build()
        : response;
  }",method,
"  private Response cacheWritingResponse(final CacheRequest cacheRequest, Response response)
      throws IOException {
    // Some apps return a null body; for compatibility we treat that like a null cache request.
    if (cacheRequest == null) return response;
    Sink cacheBodyUnbuffered = cacheRequest.body();
    if (cacheBodyUnbuffered == null) return response;
    final BufferedSource source = response.body().source();
    final BufferedSink cacheBody = Okio.buffer(cacheBodyUnbuffered);
    Source cacheWritingSource = new Source() {
      boolean cacheRequestClosed;
      @Override public long read(Buffer sink, long byteCount) throws IOException {
        long bytesRead;
        try {
          bytesRead = source.read(sink, byteCount);
        } catch (IOException e) {
          if (!cacheRequestClosed) {
            cacheRequestClosed = true;
            cacheRequest.abort(); // Failed to write a complete cache response.
          }
          throw e;
        }
        if (bytesRead == -1) {
          if (!cacheRequestClosed) {
            cacheRequestClosed = true;
            cacheBody.close(); // The cache response is complete!
          }
          return -1;
        }
        sink.copyTo(cacheBody.buffer(), sink.size() - bytesRead, bytesRead);
        cacheBody.emitCompleteSegments();
        return bytesRead;
      }
      @Override public Timeout timeout() {
        return source.timeout();
      }
      @Override public void close() throws IOException {
        if (!cacheRequestClosed
            && !discard(this, HttpCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {
          cacheRequestClosed = true;
          cacheRequest.abort();
        }
        source.close();
      }
    };
    String contentType = response.header(""Content-Type"");
    long contentLength = response.body().contentLength();
    return response.newBuilder()
        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource)))
        .build();
  }",method,
"          if (!cacheRequestClosed) {
            cacheRequestClosed = true;
            cacheRequest.abort(); // Failed to write a complete cache response.
          }",method,
"        if (bytesRead == -1) {
          if (!cacheRequestClosed) {
            cacheRequestClosed = true;
            cacheBody.close(); // The cache response is complete!
          }
          return -1;
        }",method,
"          if (!cacheRequestClosed) {
            cacheRequestClosed = true;
            cacheBody.close(); // The cache response is complete!
          }",method,
"  private static Headers combine(Headers cachedHeaders, Headers networkHeaders) {
    Headers.Builder result = new Headers.Builder();
    for (int i = 0, size = cachedHeaders.size(); i < size; i++) {
      String fieldName = cachedHeaders.name(i);
      String value = cachedHeaders.value(i);
      if (""Warning"".equalsIgnoreCase(fieldName) && value.startsWith(""1"")) {
        continue; // Drop 100-level freshness warnings.
      }
      if (!isEndToEnd(fieldName) || networkHeaders.get(fieldName) == null) {
        Internal.instance.addLenient(result, fieldName, value);
      }
    }
    for (int i = 0, size = networkHeaders.size(); i < size; i++) {
      String fieldName = networkHeaders.name(i);
      if (""Content-Length"".equalsIgnoreCase(fieldName)) {
        continue; // Ignore content-length headers of validating responses.
      }
      if (isEndToEnd(fieldName)) {
        Internal.instance.addLenient(result, fieldName, networkHeaders.value(i));
      }
    }
    return result.build();
  }",method,
"  static boolean isEndToEnd(String fieldName) {
    return !""Connection"".equalsIgnoreCase(fieldName)
        && !""Keep-Alive"".equalsIgnoreCase(fieldName)
        && !""Proxy-Authenticate"".equalsIgnoreCase(fieldName)
        && !""Proxy-Authorization"".equalsIgnoreCase(fieldName)
        && !""TE"".equalsIgnoreCase(fieldName)
        && !""Trailers"".equalsIgnoreCase(fieldName)
        && !""Transfer-Encoding"".equalsIgnoreCase(fieldName)
        && !""Upgrade"".equalsIgnoreCase(fieldName);
  }",method,
"  private static class LabelPrinter extends Printer.BasePrinter {
    @Override
    public LabelPrinter repr(Object o) {
      if (o instanceof Label) {
        writeString(((Label) o).getCanonicalForm());
      } else {
        super.repr(o);
      }
      return this;
    }
  }",class,
"  protected static PossibleAttributeValues getPossibleAttributeValues(Rule rule, Attribute attr)
    throws InterruptedException {
    AttributeValueSource source;
    if (attr.getName().equals(""visibility"")) {
      if (rule.isVisibilitySpecified()) {
        source = AttributeValueSource.RULE;
      } else if (rule.getPackage().isDefaultVisibilitySet()) {
        source = AttributeValueSource.PACKAGE;
      } else {
        source = AttributeValueSource.DEFAULT;
      }
    } else {
      source = rule.isAttributeValueExplicitlySpecified(attr)
          ? AttributeValueSource.RULE : AttributeValueSource.DEFAULT;
    }
    AggregatingAttributeMapper attributeMap = AggregatingAttributeMapper.of(rule);
    Iterable<?> list;
    if (attr.getType().equals(BuildType.LABEL_LIST)
        && attributeMap.isConfigurable(attr.getName())) {
      // TODO(gregce): Expand this to all collection types (we don't do this for scalars because
      // there's currently no syntax for expressing multiple scalar values). This unfortunately
      // isn't trivial because Bazel's label visitation logic includes special methods built
      // directly into Type.
      return new PossibleAttributeValues(
          ImmutableList.<Object>of(
              attributeMap.getReachableLabels(attr.getName(), false)),
          source);
    } else if ((list =
            attributeMap.getConcatenatedSelectorListsOfListType(
                attr.getName(), attr.getType()))
        != null) {
      return new PossibleAttributeValues(Lists.newArrayList(list), source);
    } else {
      // The call to getPossibleAttributeValues below is especially slow with selector lists.
      return new PossibleAttributeValues(attributeMap.getPossibleAttributeValues(rule, attr),
          source);
    }
  }
  private static void flushAndCheckError(PrintStream printStream) throws IOException {
    if (printStream.checkError()) {
      throw new IOException(""PrintStream encountered an error"");
    }
  }
  protected static String getLocation(Target target, boolean relative) {
    Location location = target.getLocation();
    return relative
        ? location.print(target.getPackage().getPackageDirectory().asFragment(),
            target.getPackage().getNameFragment())
        : location.print();
  }",method,
"  private static void flushAndCheckError(PrintStream printStream) throws IOException {
    if (printStream.checkError()) {
      throw new IOException(""PrintStream encountered an error"");
    }
  }
  protected static String getLocation(Target target, boolean relative) {
    Location location = target.getLocation();
    return relative
        ? location.print(target.getPackage().getPackageDirectory().asFragment(),
            target.getPackage().getNameFragment())
        : location.print();
  }",method,
"  protected static String getLocation(Target target, boolean relative) {
    Location location = target.getLocation();
    return relative
        ? location.print(target.getPackage().getPackageDirectory().asFragment(),
            target.getPackage().getNameFragment())
        : location.print();
  }",method,
"    @Override
    public LabelPrinter repr(Object o) {
      if (o instanceof Label) {
        writeString(((Label) o).getCanonicalForm());
      } else {
        super.repr(o);
      }
      return this;
    }",method,
"      if (o instanceof Label) {
        writeString(((Label) o).getCanonicalForm());
      }",method,
"public class ParticularValueFactory
extends      ValueFactory
{
    // Shared copies of Value objects, to avoid creating a lot of objects.
    static final IntegerValue INTEGER_VALUE_M1 = new ParticularIntegerValue(-1);
    static final IntegerValue INTEGER_VALUE_0  = new ParticularIntegerValue(0);
    static final IntegerValue INTEGER_VALUE_1  = new ParticularIntegerValue(1);
    static final IntegerValue INTEGER_VALUE_2  = new ParticularIntegerValue(2);
    static final IntegerValue INTEGER_VALUE_3  = new ParticularIntegerValue(3);
    static final IntegerValue INTEGER_VALUE_4  = new ParticularIntegerValue(4);
    static final IntegerValue INTEGER_VALUE_5  = new ParticularIntegerValue(5);
    static final LongValue    LONG_VALUE_0     = new ParticularLongValue(0);
    static final LongValue    LONG_VALUE_1     = new ParticularLongValue(1);
    static final FloatValue   FLOAT_VALUE_0    = new ParticularFloatValue(0.0f);
    static final FloatValue   FLOAT_VALUE_1    = new ParticularFloatValue(1.0f);
    static final FloatValue   FLOAT_VALUE_2    = new ParticularFloatValue(2.0f);
    static final DoubleValue  DOUBLE_VALUE_0   = new ParticularDoubleValue(0.0);
    static final DoubleValue  DOUBLE_VALUE_1   = new ParticularDoubleValue(1.0);
    private static int  POS_ZERO_FLOAT_BITS  = Float.floatToIntBits(0.0f);
    private static long POS_ZERO_DOUBLE_BITS = Double.doubleToLongBits(0.0);
    // Implementations for ValueFactory.
    public IntegerValue createIntegerValue(int value)
    {
        switch (value)
        {
            case -1: return INTEGER_VALUE_M1;
            case  0: return INTEGER_VALUE_0;
            case  1: return INTEGER_VALUE_1;
            case  2: return INTEGER_VALUE_2;
            case  3: return INTEGER_VALUE_3;
            case  4: return INTEGER_VALUE_4;
            case  5: return INTEGER_VALUE_5;
            default: return new ParticularIntegerValue(value);
        }
    }
    public LongValue createLongValue(long value)
    {
        return value == 0L ? LONG_VALUE_0 :
               value == 1L ? LONG_VALUE_1 :
                             new ParticularLongValue(value);
    }
    public FloatValue createFloatValue(float value)
    {
        // Make sure to distinguish between +0.0 and -0.0.
        return value == 0.0f && Float.floatToIntBits(value) == POS_ZERO_FLOAT_BITS
                             ? FLOAT_VALUE_0 :
               value == 1.0f ? FLOAT_VALUE_1 :
               value == 2.0f ? FLOAT_VALUE_2 :
                               new ParticularFloatValue(value);
    }
    public DoubleValue createDoubleValue(double value)
    {
        // Make sure to distinguish between +0.0 and -0.0.
        return value == 0.0 && Double.doubleToLongBits(value) == POS_ZERO_DOUBLE_BITS
                            ? DOUBLE_VALUE_0 :
               value == 1.0 ? DOUBLE_VALUE_1 :
                              new ParticularDoubleValue(value);
    }
    public ReferenceValue createArrayReferenceValue(String       type,
                                                    Clazz        referencedClass,
                                                    IntegerValue arrayLength)
    {
        return type == null ?
            REFERENCE_VALUE_NULL :
            new ArrayReferenceValue(ClassConstants.TYPE_ARRAY + type,
                                    referencedClass,
                                    arrayLength);
    }
}",class,
"    public IntegerValue createIntegerValue(int value)
    {
        switch (value)
        {
            case -1: return INTEGER_VALUE_M1;
            case  0: return INTEGER_VALUE_0;
            case  1: return INTEGER_VALUE_1;
            case  2: return INTEGER_VALUE_2;
            case  3: return INTEGER_VALUE_3;
            case  4: return INTEGER_VALUE_4;
            case  5: return INTEGER_VALUE_5;
            default: return new ParticularIntegerValue(value);
        }
    }",method,
"        switch (value)
        {
            case -1: return INTEGER_VALUE_M1;
            case  0: return INTEGER_VALUE_0;
            case  1: return INTEGER_VALUE_1;
            case  2: return INTEGER_VALUE_2;
            case  3: return INTEGER_VALUE_3;
            case  4: return INTEGER_VALUE_4;
            case  5: return INTEGER_VALUE_5;
            default: return new ParticularIntegerValue(value);
        }",method,
"    public LongValue createLongValue(long value)
    {
        return value == 0L ? LONG_VALUE_0 :
               value == 1L ? LONG_VALUE_1 :
                             new ParticularLongValue(value);
    }",method,
"    public FloatValue createFloatValue(float value)
    {
        // Make sure to distinguish between +0.0 and -0.0.
        return value == 0.0f && Float.floatToIntBits(value) == POS_ZERO_FLOAT_BITS
                             ? FLOAT_VALUE_0 :
               value == 1.0f ? FLOAT_VALUE_1 :
               value == 2.0f ? FLOAT_VALUE_2 :
                               new ParticularFloatValue(value);
    }",method,
"    public DoubleValue createDoubleValue(double value)
    {
        // Make sure to distinguish between +0.0 and -0.0.
        return value == 0.0 && Double.doubleToLongBits(value) == POS_ZERO_DOUBLE_BITS
                            ? DOUBLE_VALUE_0 :
               value == 1.0 ? DOUBLE_VALUE_1 :
                              new ParticularDoubleValue(value);
    }",method,
"    public ReferenceValue createArrayReferenceValue(String       type,
                                                    Clazz        referencedClass,
                                                    IntegerValue arrayLength)
    {
        return type == null ?
            REFERENCE_VALUE_NULL :
            new ArrayReferenceValue(ClassConstants.TYPE_ARRAY + type,
                                    referencedClass,
                                    arrayLength);
    }",method,
"  public Artifact getApk() {
    return getIdeInfoProvider().getSignedApk();
  }",method,
"  private AndroidIdeInfoProvider getIdeInfoProvider() {
    return getInfo().getProvider(AndroidIdeInfoProvider.class);
  }",method,
"  public String getJavaPackage() {
    return getIdeInfoProvider().getJavaPackage();
  }",method,
"  public Artifact getManifest() {
    return getIdeInfoProvider().getManifest();
  }",method,
"  public Artifact getMergedManifest() {
    return getIdeInfoProvider().getGeneratedManifest();
  }",method,
"  public ImmutableMap<String, NestedSet<Artifact>> getNativeLibs() {
    return getIdeInfoProvider().getNativeLibs();
  }",method,
"  public Artifact getResourceApk() {
    return getIdeInfoProvider().getResourceApk();
  }",method,
"  public ImmutableCollection<Artifact> getApksUnderTest() {
    return getIdeInfoProvider().getApksUnderTest();
  }",method,
"  public boolean definesAndroidResources() {
    return getIdeInfoProvider().definesAndroidResources();
  }",method,
"  public IdlInfo getIdlInfo() {
    return idlInfo;
  }",method,
"  public NestedSet<Artifact> getResources() {
    return collectDirectArtifacts(ResourceType.RESOURCES);
  }",method,
"  @Nullable
  public JavaRuleOutputJarsProvider.OutputJar getResourceJar() {
    return getIdeInfoProvider().getResourceJar();
  }",method,
"  public Artifact getAar() {
    return getIdeInfoProvider().getAar();
  }",method,
"  private NestedSet<Artifact> collectDirectArtifacts(final ResourceType resources) {
    AndroidResourcesProvider provider = getInfo().getProvider(AndroidResourcesProvider.class);
    if (provider == null) {
      return NestedSetBuilder.emptySet(Order.STABLE_ORDER);
    }
    // This will iterate over all (direct) resources. If this turns out to be a performance
    // problem, {@link ResourceContainer#getArtifacts} can be changed to return NestedSets.
    return NestedSetBuilder.wrap(
        Order.STABLE_ORDER,
        Iterables.concat(
            Iterables.transform(
                provider.getDirectAndroidResources(),
                (ResourceContainer resourceContainer) ->
                    resourceContainer.getArtifacts(resources))));
  }",method,
"    if (provider == null) {
      return NestedSetBuilder.emptySet(Order.STABLE_ORDER);
    }",method,
"public class DB2SelectTest_25_concat extends DB2Test {
    public void test_0() throws Exception {
        String sql = ""select ID, AUTHORITY_TYPE from t_authority a where authority_type like CONCAT('%', ?)"";
        DB2StatementParser parser = new DB2StatementParser(sql);
        List<SQLStatement> statementList = parser.parseStatementList();
        SQLSelectStatement stmt = (SQLSelectStatement) statementList.get(0);
        System.out.println(stmt.getSelect().getQuery());
        Assert.assertEquals(1, statementList.size());
        DB2SchemaStatVisitor visitor = new DB2SchemaStatVisitor();
        stmt.accept(visitor);
//        System.out.println(""Tables : "" + visitor.getTables());
//        System.out.println(""fields : "" + visitor.getColumns());
//        System.out.println(""coditions : "" + visitor.getConditions());
//        System.out.println(""orderBy : "" + visitor.getOrderByColumns());
        Assert.assertEquals(1, visitor.getTables().size());
        Assert.assertEquals(2, visitor.getColumns().size());
        Assert.assertEquals(1, visitor.getConditions().size());
        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name(""t_authority"")));
//         Assert.assertTrue(visitor.getColumns().contains(new Column(""DSN8B10.EMP"", ""WORKDEPT"")));
        // Assert.assertTrue(visitor.getColumns().contains(new Column(""mytable"", ""first_name"")));
        // Assert.assertTrue(visitor.getColumns().contains(new Column(""mytable"", ""full_name"")));
        Assert.assertEquals(""SELECT ID, AUTHORITY_TYPE\n"" +
                        ""FROM t_authority a\n"" +
                        ""WHERE authority_type LIKE CONCAT('%', ?)"", //
                            SQLUtils.toSQLString(stmt, JdbcConstants.DB2));
        Assert.assertEquals(""select ID, AUTHORITY_TYPE\n"" +
                        ""from t_authority a\n"" +
                        ""where authority_type like CONCAT('%', ?)"", //
                            SQLUtils.toSQLString(stmt, JdbcConstants.DB2, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
    }
}",class,
"    public void test_0() throws Exception {
        String sql = ""select ID, AUTHORITY_TYPE from t_authority a where authority_type like CONCAT('%', ?)"";
        DB2StatementParser parser = new DB2StatementParser(sql);
        List<SQLStatement> statementList = parser.parseStatementList();
        SQLSelectStatement stmt = (SQLSelectStatement) statementList.get(0);
        System.out.println(stmt.getSelect().getQuery());
        Assert.assertEquals(1, statementList.size());
        DB2SchemaStatVisitor visitor = new DB2SchemaStatVisitor();
        stmt.accept(visitor);
//        System.out.println(""Tables : "" + visitor.getTables());
//        System.out.println(""fields : "" + visitor.getColumns());
//        System.out.println(""coditions : "" + visitor.getConditions());
//        System.out.println(""orderBy : "" + visitor.getOrderByColumns());
        Assert.assertEquals(1, visitor.getTables().size());
        Assert.assertEquals(2, visitor.getColumns().size());
        Assert.assertEquals(1, visitor.getConditions().size());
        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name(""t_authority"")));
//         Assert.assertTrue(visitor.getColumns().contains(new Column(""DSN8B10.EMP"", ""WORKDEPT"")));
        // Assert.assertTrue(visitor.getColumns().contains(new Column(""mytable"", ""first_name"")));
        // Assert.assertTrue(visitor.getColumns().contains(new Column(""mytable"", ""full_name"")));
        Assert.assertEquals(""SELECT ID, AUTHORITY_TYPE\n"" +
                        ""FROM t_authority a\n"" +
                        ""WHERE authority_type LIKE CONCAT('%', ?)"", //
                            SQLUtils.toSQLString(stmt, JdbcConstants.DB2));
        Assert.assertEquals(""select ID, AUTHORITY_TYPE\n"" +
                        ""from t_authority a\n"" +
                        ""where authority_type like CONCAT('%', ?)"", //
                            SQLUtils.toSQLString(stmt, JdbcConstants.DB2, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
    }",method,
"public class AlbumListPage extends Page {
  private static final String ALBUM_LIST_HTML_FILE = ""album-list.html"";
  private static final String PAGE_URL = ""file:"" + AUT_PATH + ALBUM_LIST_HTML_FILE;
  private HtmlPage page;
  public AlbumListPage(WebClient webClient) {
    super(webClient);
  }
  public AlbumListPage navigateToPage() {
    try {
      page = this.webClient.getPage(PAGE_URL);
    } catch (IOException e) {
      e.printStackTrace();
    }
    return this;
  }
  @Override
  public boolean isAt() {
    return ""Album List"".equals(page.getTitleText());
  }
  public AlbumPage selectAlbum(String albumTitle) {
    // uses XPath to find list of html anchor tags with the class album in it
    List<HtmlAnchor> albumLinks = (List<HtmlAnchor>) page.getByXPath(""//tr[@class='album']//a"");
    for (HtmlAnchor anchor : albumLinks) {
      if (anchor.getTextContent().equals(albumTitle)) {
        try {
          anchor.click();
          return new AlbumPage(webClient);
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
    throw new IllegalArgumentException(""No links with the album title: "" + albumTitle);
  }
}",class,
"  public AlbumListPage(WebClient webClient) {
    super(webClient);
  }",method,
"  public AlbumListPage navigateToPage() {
    try {
      page = this.webClient.getPage(PAGE_URL);
    } catch (IOException e) {
      e.printStackTrace();
    }
    return this;
  }",method,
"  @Override
  public boolean isAt() {
    return ""Album List"".equals(page.getTitleText());
  }",method,
"  public AlbumPage selectAlbum(String albumTitle) {
    // uses XPath to find list of html anchor tags with the class album in it
    List<HtmlAnchor> albumLinks = (List<HtmlAnchor>) page.getByXPath(""//tr[@class='album']//a"");
    for (HtmlAnchor anchor : albumLinks) {
      if (anchor.getTextContent().equals(albumTitle)) {
        try {
          anchor.click();
          return new AlbumPage(webClient);
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
    throw new IllegalArgumentException(""No links with the album title: "" + albumTitle);
  }",method,
"public class RollingMaxPerfTest {
    @State(Scope.Thread)
    public static class CounterState {
        HystrixRollingNumber counter;
        @Setup(Level.Iteration)
        public void setUp() {
            counter = new HystrixRollingNumber(100, 10);
        }
    }
    @State(Scope.Thread)
    public static class ValueState {
        final Random r = new Random();
        int value;
        @Setup(Level.Invocation)
        public void setUp() {
            value = r.nextInt(100);
        }
    }
    @Benchmark
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber writeOnly(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }
    @Benchmark
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long readOnly(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }
    @Benchmark
    @Group(""writeHeavy"")
    @GroupThreads(7)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber writeHeavyUpdateMax(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }
    @Benchmark
    @Group(""writeHeavy"")
    @GroupThreads(1)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long writeHeavyReadMetrics(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }
    @Benchmark
    @Group(""evenSplit"")
    @GroupThreads(4)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber evenSplitUpdateMax(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }
    @Benchmark
    @Group(""evenSplit"")
    @GroupThreads(4)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long evenSplitReadMetrics(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }
    @Benchmark
    @Group(""readHeavy"")
    @GroupThreads(1)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber readHeavyUpdateMax(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }
    @Benchmark
    @Group(""readHeavy"")
    @GroupThreads(7)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long readHeavyReadMetrics(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }
}",class,
"    public static class CounterState {
        HystrixRollingNumber counter;
        @Setup(Level.Iteration)
        public void setUp() {
            counter = new HystrixRollingNumber(100, 10);
        }
    }",class,
"    public static class ValueState {
        final Random r = new Random();
        int value;
        @Setup(Level.Invocation)
        public void setUp() {
            value = r.nextInt(100);
        }
    }",class,
"        @Setup(Level.Iteration)
        public void setUp() {
            counter = new HystrixRollingNumber(100, 10);
        }",method,
"        @Setup(Level.Invocation)
        public void setUp() {
            value = r.nextInt(100);
        }",method,
"    @Benchmark
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber writeOnly(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }",method,
"    @Benchmark
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long readOnly(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }",method,
"    @Benchmark
    @Group(""writeHeavy"")
    @GroupThreads(7)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber writeHeavyUpdateMax(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }",method,
"    @Benchmark
    @Group(""writeHeavy"")
    @GroupThreads(1)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long writeHeavyReadMetrics(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }",method,
"    @Benchmark
    @Group(""evenSplit"")
    @GroupThreads(4)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber evenSplitUpdateMax(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }",method,
"    @Benchmark
    @Group(""evenSplit"")
    @GroupThreads(4)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long evenSplitReadMetrics(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }",method,
"    @Benchmark
    @Group(""readHeavy"")
    @GroupThreads(1)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public HystrixRollingNumber readHeavyUpdateMax(CounterState counterState, ValueState valueState) {
        counterState.counter.updateRollingMax(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE, valueState.value);
        return counterState.counter;
    }",method,
"    @Benchmark
    @Group(""readHeavy"")
    @GroupThreads(7)
    @BenchmarkMode({Mode.Throughput})
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public long readHeavyReadMetrics(CounterState counterState) {
        HystrixRollingNumber counter = counterState.counter;
        return counter.getRollingMaxValue(HystrixRollingNumberEvent.COMMAND_MAX_ACTIVE);
    }",method,
"    static final class AssertFusionConsumer<T> implements Consumer<TestSubscriber<T>> {
        private final int mode;
        AssertFusionConsumer(int mode) {
            this.mode = mode;
        }
        @Override
        public void accept(TestSubscriber<T> ts) throws Exception {
            ts.assertFusionMode(mode);
        }
    }",class,
"    static final class TestFusionCheckFunction<T> implements Function<Flowable<T>, TestSubscriber<T>> {
        private final int mode;
        private final boolean cancelled;
        private final long initialRequest;
        TestFusionCheckFunction(int mode, boolean cancelled, long initialRequest) {
            this.mode = mode;
            this.cancelled = cancelled;
            this.initialRequest = initialRequest;
        }
        @Override
        public TestSubscriber<T> apply(Flowable<T> t) throws Exception {
            TestSubscriber<T> ts = new TestSubscriber<T>(initialRequest);
            ts.setInitialFusionMode(mode);
            if (cancelled) {
                ts.cancel();
            }
            t.subscribe(ts);
            return ts;
        }
    }",class,
"    public static <T> Function<Flowable<T>, TestSubscriber<T>> test(
            final long initialRequest, final int mode, final boolean cancelled) {
        return new TestFusionCheckFunction<T>(mode, cancelled, initialRequest);
    }",method,
