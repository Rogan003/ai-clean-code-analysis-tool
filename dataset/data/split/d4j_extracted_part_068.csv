code_snippet,type,score
"    for (int i = 0; i < myChecked.length; i++) {
      if(myChecked[i]) {
        result.add(myOverridingMethods.get(i));
      }
    }",method,
"      if(myChecked[i]) {
        result.add(myOverridingMethods.get(i));
      }",method,
"  @NotNull
  protected Action[] createActions() {
    return new Action[]{getOKAction(), getCancelAction()};
  }",method,
"  protected void doHelpAction() {
    HelpManager.getInstance().invokeHelp(HelpID.SAFE_DELETE_OVERRIDING);
  }",method,
"  protected JComponent createNorthPanel() {
    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
    panel.add(new JLabel(RefactoringBundle.message(""there.are.unused.methods.that.override.methods.you.delete"")));
    panel.add(new JLabel(RefactoringBundle.message(""choose.the.ones.you.want.to.be.deleted"")));
    return panel;
  }",method,
"  public JComponent getPreferredFocusedComponent() {
    return myTable;
  }",method,
"  @Override
  protected void dispose() {
    Disposer.dispose(myUsagePreviewPanel);
    super.dispose();
  }",method,
"  protected JComponent createCenterPanel() {
    JPanel panel = new JPanel(new BorderLayout());
    panel.setBorder(BorderFactory.createEmptyBorder(8, 0, 4, 0));
    final MyTableModel tableModel = new MyTableModel();
    myTable = new Table(tableModel);
    myTable.setShowGrid(false);
    TableColumnModel columnModel = myTable.getColumnModel();
//    columnModel.getColumn(DISPLAY_NAME_COLUMN).setCellRenderer(new MemberSelectionTable.MyTableRenderer());
    TableColumn checkboxColumn = columnModel.getColumn(CHECK_COLUMN);
    TableUtil.setupCheckboxColumn(checkboxColumn);
    checkboxColumn.setCellRenderer(new BooleanTableCellRenderer());
    // make SPACE check/uncheck selected rows
    @NonNls InputMap inputMap = myTable.getInputMap();
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), ""enable_disable"");
    @NonNls final ActionMap actionMap = myTable.getActionMap();
    actionMap.put(""enable_disable"", new AbstractAction() {
      public void actionPerformed(ActionEvent e) {
        if (myTable.isEditing()) return;
        int[] rows = myTable.getSelectedRows();
        if (rows.length > 0) {
          boolean valueToBeSet = false;
          for (int row : rows) {
            if (!myChecked[row]) {
              valueToBeSet = true;
              break;
            }
          }
          for (int row : rows) {
            myChecked[row] = valueToBeSet;
          }
          tableModel.updateData();
        }
      }
    });
    panel.setLayout(new BorderLayout());
    JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(myTable);
    panel.add(scrollPane, BorderLayout.CENTER);
    ListSelectionListener selectionListener = new ListSelectionListener() {
      public void valueChanged(final ListSelectionEvent e) {
        int index = myTable.getSelectionModel().getLeadSelectionIndex();
        if (index != -1) {
          UsageInfo usageInfo = myOverridingMethods.get(index);
          myUsagePreviewPanel.updateLayout(Collections.singletonList(usageInfo));
        }
        else {
          myUsagePreviewPanel.updateLayout(null);
        }
      }
    };
    myTable.getSelectionModel().addListSelectionListener(selectionListener);
    final Splitter splitter = new Splitter(true, 0.3f);
    splitter.setFirstComponent(panel);
    splitter.setSecondComponent(myUsagePreviewPanel);
    myUsagePreviewPanel.updateLayout(null);
    Disposer.register(myDisposable, new Disposable(){
      public void dispose() {
        splitter.dispose();
      }
    });
    if (tableModel.getRowCount() != 0) {
      myTable.getSelectionModel().addSelectionInterval(0,0);
    }
    return splitter;
  }",method,
"    @NonNls final ActionMap actionMap = myTable.getActionMap();
    actionMap.put(""enable_disable"", new AbstractAction() {
      public void actionPerformed(ActionEvent e) {
        if (myTable.isEditing()) return;
        int[] rows = myTable.getSelectedRows();
        if (rows.length > 0) {
          boolean valueToBeSet = false;
          for (int row : rows) {
            if (!myChecked[row]) {
              valueToBeSet = true;
              break;
            }
          }
          for (int row : rows) {
            myChecked[row] = valueToBeSet;
          }
          tableModel.updateData();
        }
      }
    }",method,
"      public void actionPerformed(ActionEvent e) {
        if (myTable.isEditing()) return;
        int[] rows = myTable.getSelectedRows();
        if (rows.length > 0) {
          boolean valueToBeSet = false;
          for (int row : rows) {
            if (!myChecked[row]) {
              valueToBeSet = true;
              break;
            }
          }
          for (int row : rows) {
            myChecked[row] = valueToBeSet;
          }
          tableModel.updateData();
        }
      }",method,
"        if (rows.length > 0) {
          boolean valueToBeSet = false;
          for (int row : rows) {
            if (!myChecked[row]) {
              valueToBeSet = true;
              break;
            }
          }
          for (int row : rows) {
            myChecked[row] = valueToBeSet;
          }
          tableModel.updateData();
        }",method,
"          for (int row : rows) {
            if (!myChecked[row]) {
              valueToBeSet = true;
              break;
            }
          }",method,
"            if (!myChecked[row]) {
              valueToBeSet = true;
              break;
            }",method,
"          for (int row : rows) {
            myChecked[row] = valueToBeSet;
          }",method,
"      public void valueChanged(final ListSelectionEvent e) {
        int index = myTable.getSelectionModel().getLeadSelectionIndex();
        if (index != -1) {
          UsageInfo usageInfo = myOverridingMethods.get(index);
          myUsagePreviewPanel.updateLayout(Collections.singletonList(usageInfo));
        }
        else {
          myUsagePreviewPanel.updateLayout(null);
        }
      }",method,
"        if (index != -1) {
          UsageInfo usageInfo = myOverridingMethods.get(index);
          myUsagePreviewPanel.updateLayout(Collections.singletonList(usageInfo));
        }",method,
"    Disposer.register(myDisposable, new Disposable(){
      public void dispose() {
        splitter.dispose();
      }
    }",method,
"      public void dispose() {
        splitter.dispose();
      }",method,
"    public int getRowCount() {
      return myChecked.length;
    }",method,
"    public String getColumnName(int column) {
      switch(column) {
        case CHECK_COLUMN:
          return "" "";
        default:
          return RefactoringBundle.message(""method.column"");
      }
    }",method,
"      switch(column) {
        case CHECK_COLUMN:
          return "" "";
        default:
          return RefactoringBundle.message(""method.column"");
      }",method,
"    public Class getColumnClass(int columnIndex) {
      switch(columnIndex) {
        case CHECK_COLUMN:
          return Boolean.class;
        default:
          return String.class;
      }
    }",method,
"      switch(columnIndex) {
        case CHECK_COLUMN:
          return Boolean.class;
        default:
          return String.class;
      }",method,
"    public int getColumnCount() {
      return 2;
    }",method,
"    public Object getValueAt(int rowIndex, int columnIndex) {
      if(columnIndex == CHECK_COLUMN) {
        return Boolean.valueOf(myChecked[rowIndex]);
      }
      else {
        return myMethodText[rowIndex];
      }
    }",method,
"      if(columnIndex == CHECK_COLUMN) {
        return Boolean.valueOf(myChecked[rowIndex]);
      }",method,
"    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
      if(columnIndex == CHECK_COLUMN) {
        myChecked[rowIndex] = ((Boolean) aValue).booleanValue();
      }
    }",method,
"      if(columnIndex == CHECK_COLUMN) {
        myChecked[rowIndex] = ((Boolean) aValue).booleanValue();
      }",method,
"    public boolean isCellEditable(int rowIndex, int columnIndex) {
      return columnIndex == CHECK_COLUMN;
    }",method,
"    void updateData() {
      fireTableDataChanged();
    }",method,
"public class JsonComponentModuleTests {
	private AnnotationConfigApplicationContext context;
	@After
	public void closeContext() {
		if (this.context != null) {
			this.context.close();
		}
	}
	@Test
	public void moduleShouldRegisterSerializers() throws Exception {
		load(OnlySerializer.class);
		JsonComponentModule module = this.context.getBean(JsonComponentModule.class);
		assertSerialize(module);
	}
	@Test
	public void moduleShouldRegisterDeserializers() throws Exception {
		load(OnlyDeserializer.class);
		JsonComponentModule module = this.context.getBean(JsonComponentModule.class);
		assertDeserialize(module);
	}
	@Test
	public void moduleShouldRegisterInnerClasses() throws Exception {
		load(NameAndAgeJsonComponent.class);
		JsonComponentModule module = this.context.getBean(JsonComponentModule.class);
		assertSerialize(module);
		assertDeserialize(module);
	}
	@Test
	public void moduleShouldAllowInnerAbstractClasses() throws Exception {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
				JsonComponentModule.class, ComponentWithInnerAbstractClass.class);
		JsonComponentModule module = context.getBean(JsonComponentModule.class);
		assertSerialize(module);
		context.close();
	}
	private void load(Class<?>... configs) {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
		context.register(configs);
		context.register(JsonComponentModule.class);
		context.refresh();
		this.context = context;
	}
	private void assertSerialize(Module module) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		mapper.registerModule(module);
		String json = mapper.writeValueAsString(new NameAndAge(""spring"", 100));
		assertThat(json).isEqualToIgnoringWhitespace(""{\""name\"":\""spring\"",\""age\"":100}"");
	}
	private void assertDeserialize(Module module) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		mapper.registerModule(module);
		NameAndAge nameAndAge = mapper.readValue(""{\""name\"":\""spring\"",\""age\"":100}"",
				NameAndAge.class);
		assertThat(nameAndAge.getName()).isEqualTo(""spring"");
		assertThat(nameAndAge.getAge()).isEqualTo(100);
	}
	@JsonComponent
	static class OnlySerializer extends NameAndAgeJsonComponent.Serializer {
	}
	@JsonComponent
	static class OnlyDeserializer extends NameAndAgeJsonComponent.Deserializer {
	}
	@JsonComponent
	static class ComponentWithInnerAbstractClass {
		private static abstract class AbstractSerializer
				extends NameAndAgeJsonComponent.Serializer {
		}
		static class ConcreteSerializer extends AbstractSerializer {
		}
	}
}",class,
"	static class OnlySerializer extends NameAndAgeJsonComponent.Serializer {
	}",class,
"	static class OnlyDeserializer extends NameAndAgeJsonComponent.Deserializer {
	}",class,
"	static class ComponentWithInnerAbstractClass {
		private static abstract class AbstractSerializer
				extends NameAndAgeJsonComponent.Serializer {
		}
		static class ConcreteSerializer extends AbstractSerializer {
		}
	}",class,
"		private static abstract class AbstractSerializer
				extends NameAndAgeJsonComponent.Serializer {
		}",class,
"		static class ConcreteSerializer extends AbstractSerializer {
		}",class,
"	@After
	public void closeContext() {
		if (this.context != null) {
			this.context.close();
		}
	}",method,
"		if (this.context != null) {
			this.context.close();
		}",method,
"	@Test
	public void moduleShouldRegisterSerializers() throws Exception {
		load(OnlySerializer.class);
		JsonComponentModule module = this.context.getBean(JsonComponentModule.class);
		assertSerialize(module);
	}",method,
"	@Test
	public void moduleShouldRegisterDeserializers() throws Exception {
		load(OnlyDeserializer.class);
		JsonComponentModule module = this.context.getBean(JsonComponentModule.class);
		assertDeserialize(module);
	}",method,
"	@Test
	public void moduleShouldRegisterInnerClasses() throws Exception {
		load(NameAndAgeJsonComponent.class);
		JsonComponentModule module = this.context.getBean(JsonComponentModule.class);
		assertSerialize(module);
		assertDeserialize(module);
	}",method,
"	@Test
	public void moduleShouldAllowInnerAbstractClasses() throws Exception {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
				JsonComponentModule.class, ComponentWithInnerAbstractClass.class);
		JsonComponentModule module = context.getBean(JsonComponentModule.class);
		assertSerialize(module);
		context.close();
	}",method,
"	private void load(Class<?>... configs) {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
		context.register(configs);
		context.register(JsonComponentModule.class);
		context.refresh();
		this.context = context;
	}",method,
"	private void assertSerialize(Module module) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		mapper.registerModule(module);
		String json = mapper.writeValueAsString(new NameAndAge(""spring"", 100));
		assertThat(json).isEqualToIgnoringWhitespace(""{\""name\"":\""spring\"",\""age\"":100}"");
	}",method,
"	private void assertDeserialize(Module module) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		mapper.registerModule(module);
		NameAndAge nameAndAge = mapper.readValue(""{\""name\"":\""spring\"",\""age\"":100}"",
				NameAndAge.class);
		assertThat(nameAndAge.getName()).isEqualTo(""spring"");
		assertThat(nameAndAge.getAge()).isEqualTo(100);
	}",method,
"public class FingerprintTests extends RefineTest {
    static Properties bindings;
    private static final String[][] testStrings = {
        {""schön"",""schon""},  
//        {""Ære Øre Åre"", ""are aere ore""},
//        {""Straße"",""strasse""},
        {""\tABC \t DEF "",""abc def""}, // test leading and trailing whitespace
        {""bbb\taaa"",""aaa bbb""},
        {""müller"",""muller""},
//      {""müller"",""mueller""}, // another possible interpretation
//        {""ﬁﬂĳ"",""fiflij""},
//        {""ﭏ"",""אל""},
//        {""œ ӕ"",""ae oe""},
        {"""",""""},
    };
    @Override
    @BeforeTest
    public void init() {
        logger = LoggerFactory.getLogger(this.getClass());
    }
    @BeforeMethod
    public void SetUp() {
        bindings = new Properties();
    }
    @AfterMethod
    public void TearDown() {
        bindings = null;
    }
    private static Object invoke(String name,Object... args) {
        // registry uses static initializer, so no need to set it up
        Function function = ControlFunctionRegistry.getFunction(name);
        if (function == null) {
            throw new IllegalArgumentException(""Unknown function ""+name);
        }
        if (args == null) {
            return function.call(bindings,new Object[0]);
        } else {
            return function.call(bindings,args);
        }
    }
    @Test
    public void testInvalidParams() {        
        Assert.assertNull(invoke(""fingerprint""));
        Assert.assertNull(invoke(""fingerprint"", ""one"",""two"",""three""));
        Assert.assertNull(invoke(""fingerprint"", Long.getLong(""1"")));
    }
    @Test
    public void testNormalize() {
        for (String[] ss : testStrings) {
            Assert.assertEquals(ss.length,2,""Invalid test""); // Not a valid test
            Assert.assertEquals((String)(invoke(""fingerprint"", ss[0])),ss[1],
                    ""Fingerprint for string: "" + ss[0] + "" failed"");
        }
    }
}",class,
"    @Override
    @BeforeTest
    public void init() {
        logger = LoggerFactory.getLogger(this.getClass());
    }",method,
"    @BeforeMethod
    public void SetUp() {
        bindings = new Properties();
    }",method,
"    @AfterMethod
    public void TearDown() {
        bindings = null;
    }",method,
"    private static Object invoke(String name,Object... args) {
        // registry uses static initializer, so no need to set it up
        Function function = ControlFunctionRegistry.getFunction(name);
        if (function == null) {
            throw new IllegalArgumentException(""Unknown function ""+name);
        }
        if (args == null) {
            return function.call(bindings,new Object[0]);
        } else {
            return function.call(bindings,args);
        }
    }",method,
"        if (function == null) {
            throw new IllegalArgumentException(""Unknown function ""+name);
        }",method,
"        if (args == null) {
            return function.call(bindings,new Object[0]);
        }",method,
"    @Test
    public void testInvalidParams() {        
        Assert.assertNull(invoke(""fingerprint""));
        Assert.assertNull(invoke(""fingerprint"", ""one"",""two"",""three""));
        Assert.assertNull(invoke(""fingerprint"", Long.getLong(""1"")));
    }",method,
"    @Test
    public void testNormalize() {
        for (String[] ss : testStrings) {
            Assert.assertEquals(ss.length,2,""Invalid test""); // Not a valid test
            Assert.assertEquals((String)(invoke(""fingerprint"", ss[0])),ss[1],
                    ""Fingerprint for string: "" + ss[0] + "" failed"");
        }
    }",method,
"        for (String[] ss : testStrings) {
            Assert.assertEquals(ss.length,2,""Invalid test""); // Not a valid test
            Assert.assertEquals((String)(invoke(""fingerprint"", ss[0])),ss[1],
                    ""Fingerprint for string: "" + ss[0] + "" failed"");
        }",method,
"public class ExternalResourcesRootsProvider extends IndexableSetContributor {
  private final NotNullLazyValue<Set<String>> myStandardResources = new NotNullLazyValue<Set<String>>() {
    @NotNull
    @Override
    protected Set<String> compute() {
      ExternalResourceManagerExImpl manager = (ExternalResourceManagerExImpl)ExternalResourceManager.getInstance();
      Set<ExternalResourceManagerExImpl.Resource> dirs = new THashSet<>();
      Set<String> set = new THashSet<>();
      for (Map<String, ExternalResourceManagerExImpl.Resource> map : manager.getStandardResources()) {
        for (ExternalResourceManagerExImpl.Resource resource : map.values()) {
          ExternalResourceManagerExImpl.Resource dir = new ExternalResourceManagerExImpl.Resource(
            resource.directoryName(), resource);
          if (dirs.add(dir)) {
            String url = resource.getResourceUrl();
            if (url != null) {
              set.add(url.substring(0, url.lastIndexOf('/') + 1));
            }
          }
        }
      }
      return set;
    }
  };
  @NotNull
  @Override
  public Set<VirtualFile> getAdditionalRootsToIndex() {
    Set<VirtualFile> roots = new THashSet<>();
    for (String url : myStandardResources.getValue()) {
      VirtualFile file = VfsUtilCore.findRelativeFile(url, null);
      if (file != null) {
        roots.add(file);
      }
    }
    String path = FetchExtResourceAction.getExternalResourcesPath();
    VirtualFile extResources = LocalFileSystem.getInstance().findFileByPath(path);
    ContainerUtil.addIfNotNull(roots, extResources);
    return roots;
  }
}",class,
"    @NotNull
    @Override
    protected Set<String> compute() {
      ExternalResourceManagerExImpl manager = (ExternalResourceManagerExImpl)ExternalResourceManager.getInstance();
      Set<ExternalResourceManagerExImpl.Resource> dirs = new THashSet<>();
      Set<String> set = new THashSet<>();
      for (Map<String, ExternalResourceManagerExImpl.Resource> map : manager.getStandardResources()) {
        for (ExternalResourceManagerExImpl.Resource resource : map.values()) {
          ExternalResourceManagerExImpl.Resource dir = new ExternalResourceManagerExImpl.Resource(
            resource.directoryName(), resource);
          if (dirs.add(dir)) {
            String url = resource.getResourceUrl();
            if (url != null) {
              set.add(url.substring(0, url.lastIndexOf('/') + 1));
            }
          }
        }
      }
      return set;
    }",method,
"            if (url != null) {
              set.add(url.substring(0, url.lastIndexOf('/') + 1));
            }",method,
"  @NotNull
  @Override
  public Set<VirtualFile> getAdditionalRootsToIndex() {
    Set<VirtualFile> roots = new THashSet<>();
    for (String url : myStandardResources.getValue()) {
      VirtualFile file = VfsUtilCore.findRelativeFile(url, null);
      if (file != null) {
        roots.add(file);
      }
    }
    String path = FetchExtResourceAction.getExternalResourcesPath();
    VirtualFile extResources = LocalFileSystem.getInstance().findFileByPath(path);
    ContainerUtil.addIfNotNull(roots, extResources);
    return roots;
  }",method,
"      if (file != null) {
        roots.add(file);
      }",method,
"        // does also check the module contains a class in the same package
        // of this name. This check is not done for vanilla names starting
        // with a lower case letter anymore
        if (type instanceof LowerCaseClass) {
            return resolveAliasFromModule(type);
        }",class,
"        // look into the module node if there is a class with that name
        List<ClassNode> moduleClasses = module.getClasses();
        for (ClassNode mClass : moduleClasses) {
            if (mClass.getName().equals(type.getName())) {
                if (mClass != type) {
                    type.setRedirect(mClass);
                }
                return true;
            }
        }",class,
"                // check package this class is defined in. The usage of ConstructedClassWithPackage here
                // means, that the module package will not be involved when the
                // compiler tries to find an inner class.
                ConstructedClassWithPackage tmp = new ConstructedClassWithPackage(module.getPackageName(), name);
                if (resolve(tmp, false, false, false)) {
                    ambiguousClass(type, tmp, name);
                    type.setRedirect(tmp.redirect());
                    return true;
                }",class,
"        if (type instanceof LowerCaseClass) {
            return resolveAliasFromModule(type);
        }",method,
"        if (module == null) {
            return false;
        }",method,
"        for (ClassNode mClass : moduleClasses) {
            if (mClass.getName().equals(type.getName())) {
                if (mClass != type) {
                    type.setRedirect(mClass);
                }
                return true;
            }
        }",method,
"                if (mClass != type) {
                    type.setRedirect(mClass);
                }",method,
"        if (newNameUsed) {
            type.setName(name);
        }",method,
"public class FileReferenceCompletionImpl extends FileReferenceCompletion {
  private static final TObjectHashingStrategy<PsiElement> VARIANTS_HASHING_STRATEGY = new TObjectHashingStrategy<PsiElement>() {
    @Override
    public int computeHashCode(final PsiElement object) {
      if (object instanceof PsiNamedElement) {
        final String name = ((PsiNamedElement)object).getName();
        if (name != null) {
          return name.hashCode();
        }
      }
      return object.hashCode();
    }
    @Override
    public boolean equals(final PsiElement o1, final PsiElement o2) {
      if (o1 instanceof PsiNamedElement && o2 instanceof PsiNamedElement) {
        return Comparing.equal(((PsiNamedElement)o1).getName(), ((PsiNamedElement)o2).getName());
      }
      return o1.equals(o2);
    }
  };
  @NotNull
  @Override
  public Object[] getFileReferenceCompletionVariants(final FileReference reference) {
    final String s = reference.getText();
    if (s != null && s.equals(""/"")) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    final CommonProcessors.CollectUniquesProcessor<PsiFileSystemItem> collector =
      new CommonProcessors.CollectUniquesProcessor<>();
    final PsiElementProcessor<PsiFileSystemItem> processor = new PsiElementProcessor<PsiFileSystemItem>() {
      @Override
      public boolean execute(@NotNull PsiFileSystemItem fileSystemItem) {
        return new FilteringProcessor<>(reference.getFileReferenceSet().getReferenceCompletionFilter(), collector).process(
          FileReference.getOriginalFile(fileSystemItem));
      }
    };
    List<Object> additionalItems = ContainerUtil.newArrayList();
    for (PsiFileSystemItem context : reference.getContexts()) {
      for (final PsiElement child : context.getChildren()) {
        if (child instanceof PsiFileSystemItem) {
          processor.execute((PsiFileSystemItem)child);
        }
      }
      if (context instanceof FileReferenceResolver) {
        additionalItems.addAll(((FileReferenceResolver)context).getVariants(reference));
      }
    }
    final FileType[] types = reference.getFileReferenceSet().getSuitableFileTypes();
    final THashSet<PsiElement> set = new THashSet<>(collector.getResults(), VARIANTS_HASHING_STRATEGY);
    final PsiElement[] candidates = PsiUtilCore.toPsiElementArray(set);
    final Object[] variants = new Object[candidates.length + additionalItems.size()];
    for (int i = 0; i < candidates.length; i++) {
      PsiElement candidate = candidates[i];
      Object item = reference.createLookupItem(candidate);
      if (item == null) {
        item = FileInfoManager.getFileLookupItem(candidate);
      }
      if (candidate instanceof PsiFile && item instanceof LookupElement &&
          types.length > 0 && ArrayUtil.contains(((PsiFile)candidate).getFileType(), types)) {
        item = PrioritizedLookupElement.withPriority((LookupElement)item, Double.MAX_VALUE);
      }
      variants[i] = item;
    }
    for (int i = 0; i < additionalItems.size(); i++) {
      variants[i + candidates.length] = additionalItems.get(i);
    }
    if (!reference.getFileReferenceSet().isUrlEncoded()) {
      return variants;
    }
    List<Object> encodedVariants = new ArrayList<>(variants.length + additionalItems.size());
    for (int i = 0; i < candidates.length; i++) {
      final PsiElement element = candidates[i];
      if (element instanceof PsiNamedElement) {
        final PsiNamedElement psiElement = (PsiNamedElement)element;
        String name = psiElement.getName();
        final String encoded = reference.encode(name, psiElement);
        if (encoded == null) continue;
        if (!encoded.equals(name)) {
          final Icon icon = psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
          LookupElementBuilder item = FileInfoManager.getFileLookupItem(candidates[i], encoded, icon);
          encodedVariants.add(item.withTailText("" ("" + name + "")""));
        }
        else {
          encodedVariants.add(variants[i]);
        }
      }
    }
    encodedVariants.addAll(additionalItems);
    return ArrayUtil.toObjectArray(encodedVariants);
  }
}",class,
"    @Override
    public int computeHashCode(final PsiElement object) {
      if (object instanceof PsiNamedElement) {
        final String name = ((PsiNamedElement)object).getName();
        if (name != null) {
          return name.hashCode();
        }
      }
      return object.hashCode();
    }",method,
"      if (object instanceof PsiNamedElement) {
        final String name = ((PsiNamedElement)object).getName();
        if (name != null) {
          return name.hashCode();
        }
      }",method,
"        if (name != null) {
          return name.hashCode();
        }",method,
"    @Override
    public boolean equals(final PsiElement o1, final PsiElement o2) {
      if (o1 instanceof PsiNamedElement && o2 instanceof PsiNamedElement) {
        return Comparing.equal(((PsiNamedElement)o1).getName(), ((PsiNamedElement)o2).getName());
      }
      return o1.equals(o2);
    }",method,
"      if (o1 instanceof PsiNamedElement && o2 instanceof PsiNamedElement) {
        return Comparing.equal(((PsiNamedElement)o1).getName(), ((PsiNamedElement)o2).getName());
      }",method,
"  @NotNull
  @Override
  public Object[] getFileReferenceCompletionVariants(final FileReference reference) {
    final String s = reference.getText();
    if (s != null && s.equals(""/"")) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    final CommonProcessors.CollectUniquesProcessor<PsiFileSystemItem> collector =
      new CommonProcessors.CollectUniquesProcessor<>();
    final PsiElementProcessor<PsiFileSystemItem> processor = new PsiElementProcessor<PsiFileSystemItem>() {
      @Override
      public boolean execute(@NotNull PsiFileSystemItem fileSystemItem) {
        return new FilteringProcessor<>(reference.getFileReferenceSet().getReferenceCompletionFilter(), collector).process(
          FileReference.getOriginalFile(fileSystemItem));
      }
    };
    List<Object> additionalItems = ContainerUtil.newArrayList();
    for (PsiFileSystemItem context : reference.getContexts()) {
      for (final PsiElement child : context.getChildren()) {
        if (child instanceof PsiFileSystemItem) {
          processor.execute((PsiFileSystemItem)child);
        }
      }
      if (context instanceof FileReferenceResolver) {
        additionalItems.addAll(((FileReferenceResolver)context).getVariants(reference));
      }
    }
    final FileType[] types = reference.getFileReferenceSet().getSuitableFileTypes();
    final THashSet<PsiElement> set = new THashSet<>(collector.getResults(), VARIANTS_HASHING_STRATEGY);
    final PsiElement[] candidates = PsiUtilCore.toPsiElementArray(set);
    final Object[] variants = new Object[candidates.length + additionalItems.size()];
    for (int i = 0; i < candidates.length; i++) {
      PsiElement candidate = candidates[i];
      Object item = reference.createLookupItem(candidate);
      if (item == null) {
        item = FileInfoManager.getFileLookupItem(candidate);
      }
      if (candidate instanceof PsiFile && item instanceof LookupElement &&
          types.length > 0 && ArrayUtil.contains(((PsiFile)candidate).getFileType(), types)) {
        item = PrioritizedLookupElement.withPriority((LookupElement)item, Double.MAX_VALUE);
      }
      variants[i] = item;
    }
    for (int i = 0; i < additionalItems.size(); i++) {
      variants[i + candidates.length] = additionalItems.get(i);
    }
    if (!reference.getFileReferenceSet().isUrlEncoded()) {
      return variants;
    }
    List<Object> encodedVariants = new ArrayList<>(variants.length + additionalItems.size());
    for (int i = 0; i < candidates.length; i++) {
      final PsiElement element = candidates[i];
      if (element instanceof PsiNamedElement) {
        final PsiNamedElement psiElement = (PsiNamedElement)element;
        String name = psiElement.getName();
        final String encoded = reference.encode(name, psiElement);
        if (encoded == null) continue;
        if (!encoded.equals(name)) {
          final Icon icon = psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
          LookupElementBuilder item = FileInfoManager.getFileLookupItem(candidates[i], encoded, icon);
          encodedVariants.add(item.withTailText("" ("" + name + "")""));
        }
        else {
          encodedVariants.add(variants[i]);
        }
      }
    }
    encodedVariants.addAll(additionalItems);
    return ArrayUtil.toObjectArray(encodedVariants);
  }",method,
"      @Override
      public boolean execute(@NotNull PsiFileSystemItem fileSystemItem) {
        return new FilteringProcessor<>(reference.getFileReferenceSet().getReferenceCompletionFilter(), collector).process(
          FileReference.getOriginalFile(fileSystemItem));
      }",method,
"        if (child instanceof PsiFileSystemItem) {
          processor.execute((PsiFileSystemItem)child);
        }",method,
"      if (context instanceof FileReferenceResolver) {
        additionalItems.addAll(((FileReferenceResolver)context).getVariants(reference));
      }",method,
"    for (int i = 0; i < candidates.length; i++) {
      PsiElement candidate = candidates[i];
      Object item = reference.createLookupItem(candidate);
      if (item == null) {
        item = FileInfoManager.getFileLookupItem(candidate);
      }
      if (candidate instanceof PsiFile && item instanceof LookupElement &&
          types.length > 0 && ArrayUtil.contains(((PsiFile)candidate).getFileType(), types)) {
        item = PrioritizedLookupElement.withPriority((LookupElement)item, Double.MAX_VALUE);
      }
      variants[i] = item;
    }",method,
"      if (item == null) {
        item = FileInfoManager.getFileLookupItem(candidate);
      }",method,
"    for (int i = 0; i < candidates.length; i++) {
      final PsiElement element = candidates[i];
      if (element instanceof PsiNamedElement) {
        final PsiNamedElement psiElement = (PsiNamedElement)element;
        String name = psiElement.getName();
        final String encoded = reference.encode(name, psiElement);
        if (encoded == null) continue;
        if (!encoded.equals(name)) {
          final Icon icon = psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
          LookupElementBuilder item = FileInfoManager.getFileLookupItem(candidates[i], encoded, icon);
          encodedVariants.add(item.withTailText("" ("" + name + "")""));
        }
        else {
          encodedVariants.add(variants[i]);
        }
      }
    }",method,
"      if (element instanceof PsiNamedElement) {
        final PsiNamedElement psiElement = (PsiNamedElement)element;
        String name = psiElement.getName();
        final String encoded = reference.encode(name, psiElement);
        if (encoded == null) continue;
        if (!encoded.equals(name)) {
          final Icon icon = psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
          LookupElementBuilder item = FileInfoManager.getFileLookupItem(candidates[i], encoded, icon);
          encodedVariants.add(item.withTailText("" ("" + name + "")""));
        }
        else {
          encodedVariants.add(variants[i]);
        }
      }",method,
"public class OracleSelectTest32 extends OracleTest {
    public void test_0() throws Exception {
        String sql = //
        ""select * from ESCROW_LOGISTICS t   -- where received_status <>'not_received ' and received_status <>'received' ""; //
        OracleStatementParser parser = new OracleStatementParser(sql);
        List<SQLStatement> statementList = parser.parseStatementList();
        SQLStatement statemen = statementList.get(0);
        print(statementList);
        Assert.assertEquals(1, statementList.size());
        OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();
        statemen.accept(visitor);
        System.out.println(""Tables : "" + visitor.getTables());
        System.out.println(""fields : "" + visitor.getColumns());
        System.out.println(""coditions : "" + visitor.getConditions());
        System.out.println(""relationships : "" + visitor.getRelationships());
        System.out.println(""orderBy : "" + visitor.getOrderByColumns());
        Assert.assertEquals(1, visitor.getTables().size());
        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name(""ESCROW_LOGISTICS"")));
        Assert.assertEquals(1, visitor.getColumns().size());
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column(""ESCROW_LOGISTICS"", ""*"")));
//         Assert.assertTrue(visitor.getOrderByColumns().contains(new TableStat.Column(""employees"", ""last_name"")));
    }
}",class,
"    public void test_0() throws Exception {
        String sql = //
        ""select * from ESCROW_LOGISTICS t   -- where received_status <>'not_received ' and received_status <>'received' ""; //
        OracleStatementParser parser = new OracleStatementParser(sql);
        List<SQLStatement> statementList = parser.parseStatementList();
        SQLStatement statemen = statementList.get(0);
        print(statementList);
        Assert.assertEquals(1, statementList.size());
        OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();
        statemen.accept(visitor);
        System.out.println(""Tables : "" + visitor.getTables());
        System.out.println(""fields : "" + visitor.getColumns());
        System.out.println(""coditions : "" + visitor.getConditions());
        System.out.println(""relationships : "" + visitor.getRelationships());
        System.out.println(""orderBy : "" + visitor.getOrderByColumns());
        Assert.assertEquals(1, visitor.getTables().size());
        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name(""ESCROW_LOGISTICS"")));
        Assert.assertEquals(1, visitor.getColumns().size());
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column(""ESCROW_LOGISTICS"", ""*"")));
//         Assert.assertTrue(visitor.getOrderByColumns().contains(new TableStat.Column(""employees"", ""last_name"")));
    }",method,
"    private List<String> getObjects(hdf5.Group fileGroup, int objType) {
        List<String> groups = new ArrayList<String>();
        for (int i = 0; i < fileGroup.getNumObjs(); i++) {
            BytePointer objPtr = fileGroup.getObjnameByIdx(i);
            if (fileGroup.childObjType(objPtr) == objType)
                groups.add(fileGroup.getObjnameByIdx(i).getString());
        }
        return groups;
    }
    private String readAttributeAsJson(hdf5.Attribute attribute) throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        int bufferSizeMult = 1;
        String s = null;
        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            ObjectMapper mapper = new ObjectMapper();
            mapper.enable(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY);
            try {
                mapper.readTree(s);
                break;
            } catch (IOException e) {
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    private String readAttributeAsString(hdf5.Attribute attribute) throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        int bufferSizeMult = 1;
        String s = null;
        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            if (s.endsWith(""\u0000"")) {
                s = s.replace(""\u0000"", """");
                break;
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"    private String readAttributeAsJson(hdf5.Attribute attribute) throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        int bufferSizeMult = 1;
        String s = null;
        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            ObjectMapper mapper = new ObjectMapper();
            mapper.enable(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY);
            try {
                mapper.readTree(s);
                break;
            } catch (IOException e) {
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    private String readAttributeAsString(hdf5.Attribute attribute) throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        int bufferSizeMult = 1;
        String s = null;
        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            if (s.endsWith(""\u0000"")) {
                s = s.replace(""\u0000"", """");
                break;
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            ObjectMapper mapper = new ObjectMapper();
            mapper.enable(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY);
            try {
                mapper.readTree(s);
                break;
            } catch (IOException e) {
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    private String readAttributeAsString(hdf5.Attribute attribute) throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        int bufferSizeMult = 1;
        String s = null;
        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            if (s.endsWith(""\u0000"")) {
                s = s.replace(""\u0000"", """");
                break;
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    private String readAttributeAsString(hdf5.Attribute attribute) throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        int bufferSizeMult = 1;
        String s = null;
        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            if (s.endsWith(""\u0000"")) {
                s = s.replace(""\u0000"", """");
                break;
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"    private String readAttributeAsString(hdf5.Attribute attribute) throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        int bufferSizeMult = 1;
        String s = null;
        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            if (s.endsWith(""\u0000"")) {
                s = s.replace(""\u0000"", """");
                break;
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"        while (true) {
            byte[] attrBuffer = new byte[bufferSizeMult * 2000];
            BytePointer attrPointer = new BytePointer(attrBuffer);
            attribute.read(vl, attrPointer);
            attrPointer.get(attrBuffer);
            s = new String(attrBuffer);
            if (s.endsWith(""\u0000"")) {
                s = s.replace(""\u0000"", """");
                break;
            }
            bufferSizeMult++;
            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"            if (bufferSizeMult > 100) {
                throw new UnsupportedKerasConfigurationException(""Could not read abnormally long HDF5 attribute"");
            }
        }
        return s;
    }
    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"    public String readAttributeAsFixedLengthString(String attributeName, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        return readAttributeAsFixedLengthString(this.file.openAttribute(attributeName), bufferSize);
    }",method,
"    private String readAttributeAsFixedLengthString(hdf5.Attribute attribute, int bufferSize)
            throws UnsupportedKerasConfigurationException {
        hdf5.VarLenType vl = attribute.getVarLenType();
        byte[] attrBuffer = new byte[bufferSize];
        BytePointer attrPointer = new BytePointer(attrBuffer);
        attribute.read(vl, attrPointer);
        attrPointer.get(attrBuffer);
        String s = new String(attrBuffer);
        return s;
    }",method,
"public class HttpClientStackTest extends AndroidTestCase {
    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mContext = getContext();
    }
    public void testCreateDeprecatedGetRequest() throws Exception {
        TestRequest.DeprecatedGet request = new TestRequest.DeprecatedGet();
        assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpGet);
    }
    public void testCreateDeprecatedPostRequest() throws Exception {
        TestRequest.DeprecatedPost request = new TestRequest.DeprecatedPost();
        assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPost);
    }
    public void testCreateGetRequest() throws Exception {
        TestRequest.Get request = new TestRequest.Get();
        assertEquals(request.getMethod(), Method.GET);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpGet);
    }
    public void testCreatePostRequest() throws Exception {
        TestRequest.Post request = new TestRequest.Post();
        assertEquals(request.getMethod(), Method.POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPost);
    }
    public void testCreatePostRequestWithBody() throws Exception {
        TestRequest.PostWithBody request = new TestRequest.PostWithBody();
        assertEquals(request.getMethod(), Method.POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPost);
    }
    public void testCreatePutRequest() throws Exception {
        TestRequest.Put request = new TestRequest.Put();
        assertEquals(request.getMethod(), Method.PUT);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPut);
    }
    public void testCreatePutRequestWithBody() throws Exception {
        TestRequest.PutWithBody request = new TestRequest.PutWithBody();
        assertEquals(request.getMethod(), Method.PUT);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPut);
    }
    public void testCreateDeleteRequest() throws Exception {
        TestRequest.Delete request = new TestRequest.Delete();
        assertEquals(request.getMethod(), Method.DELETE);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpDelete);
    }
    public void testCreateHeadRequest() throws Exception {
        TestRequest.Head request = new TestRequest.Head();
        assertEquals(request.getMethod(), Method.HEAD);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpHead);
    }
    public void testCreateOptionsRequest() throws Exception {
        TestRequest.Options request = new TestRequest.Options();
        assertEquals(request.getMethod(), Method.OPTIONS);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpOptions);
    }
    public void testCreateTraceRequest() throws Exception {
        TestRequest.Trace request = new TestRequest.Trace();
        assertEquals(request.getMethod(), Method.TRACE);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpTrace);
    }
    public void testCreatePatchRequest() throws Exception {
        TestRequest.Patch request = new TestRequest.Patch();
        assertEquals(request.getMethod(), Method.PATCH);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPatch);
    }
    public void testCreatePatchRequestWithBody() throws Exception {
        TestRequest.PatchWithBody request = new TestRequest.PatchWithBody();
        assertEquals(request.getMethod(), Method.PATCH);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPatch);
    }
}",class,
"    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mContext = getContext();
    }",method,
"    public void testCreateDeprecatedGetRequest() throws Exception {
        TestRequest.DeprecatedGet request = new TestRequest.DeprecatedGet();
        assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpGet);
    }",method,
"    public void testCreateDeprecatedPostRequest() throws Exception {
        TestRequest.DeprecatedPost request = new TestRequest.DeprecatedPost();
        assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPost);
    }",method,
"    public void testCreateGetRequest() throws Exception {
        TestRequest.Get request = new TestRequest.Get();
        assertEquals(request.getMethod(), Method.GET);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpGet);
    }",method,
"    public void testCreatePostRequest() throws Exception {
        TestRequest.Post request = new TestRequest.Post();
        assertEquals(request.getMethod(), Method.POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPost);
    }",method,
"    public void testCreatePostRequestWithBody() throws Exception {
        TestRequest.PostWithBody request = new TestRequest.PostWithBody();
        assertEquals(request.getMethod(), Method.POST);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPost);
    }",method,
"    public void testCreatePutRequest() throws Exception {
        TestRequest.Put request = new TestRequest.Put();
        assertEquals(request.getMethod(), Method.PUT);
        HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null);
        assertTrue(httpRequest instanceof HttpPut);
    }",method,
