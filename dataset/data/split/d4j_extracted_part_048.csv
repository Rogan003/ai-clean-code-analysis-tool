code_snippet,type,score
"    @Override
    public void onRefresh() {
        OkGo.<GankResponse<List<GankModel>>>get(url + ""1"")//
                .cacheKey(""TabFragment_"" + fragmentTitle)       //由于该fragment会被复用,必须保证key唯一,否则数据会发生覆盖
                .cacheMode(CacheMode.FIRST_CACHE_THEN_REQUEST)  //缓存模式先使用缓存,然后使用网络数据
                .execute(new NewsCallback<GankResponse<List<GankModel>>>() {
                    @Override
                    public void onSuccess(Response<GankResponse<List<GankModel>>> response) {
                        List<GankModel> results = response.body().results;
                        if (results != null) {
                            currentPage = 2;
                            newsAdapter.setNewData(results);
                        }
                    }
                    @Override
                    public void onCacheSuccess(Response<GankResponse<List<GankModel>>> response) {
                        //一般来说,只需呀第一次初始化界面的时候需要使用缓存刷新界面,以后不需要,所以用一个变量标识
                        if (!isInitCache) {
                            //一般来说,缓存回调成功和网络回调成功做的事情是一样的,所以这里直接回调onSuccess
                            onSuccess(response);
                            isInitCache = true;
                        }
                    }
                    @Override
                    public void onError(Response<GankResponse<List<GankModel>>> response) {
                        //网络请求失败的回调,一般会弹个Toast
                        showToast(response.getException().getMessage());
                    }
                    @Override
                    public void onFinish() {
                        //可能需要移除之前添加的布局
                        newsAdapter.removeAllFooterView();
                        //最后调用结束刷新的方法
                        setRefreshing(false);
                    }
                });
    }",method,
"                .execute(new NewsCallback<GankResponse<List<GankModel>>>() {
                    @Override
                    public void onSuccess(Response<GankResponse<List<GankModel>>> response) {
                        List<GankModel> results = response.body().results;
                        if (results != null) {
                            currentPage = 2;
                            newsAdapter.setNewData(results);
                        }
                    }
                    @Override
                    public void onCacheSuccess(Response<GankResponse<List<GankModel>>> response) {
                        //一般来说,只需呀第一次初始化界面的时候需要使用缓存刷新界面,以后不需要,所以用一个变量标识
                        if (!isInitCache) {
                            //一般来说,缓存回调成功和网络回调成功做的事情是一样的,所以这里直接回调onSuccess
                            onSuccess(response);
                            isInitCache = true;
                        }
                    }
                    @Override
                    public void onError(Response<GankResponse<List<GankModel>>> response) {
                        //网络请求失败的回调,一般会弹个Toast
                        showToast(response.getException().getMessage());
                    }
                    @Override
                    public void onFinish() {
                        //可能需要移除之前添加的布局
                        newsAdapter.removeAllFooterView();
                        //最后调用结束刷新的方法
                        setRefreshing(false);
                    }
                }",method,
"                    @Override
                    public void onSuccess(Response<GankResponse<List<GankModel>>> response) {
                        List<GankModel> results = response.body().results;
                        if (results != null) {
                            currentPage = 2;
                            newsAdapter.setNewData(results);
                        }
                    }",method,
"                        if (results != null) {
                            currentPage = 2;
                            newsAdapter.setNewData(results);
                        }",method,
"                    @Override
                    public void onCacheSuccess(Response<GankResponse<List<GankModel>>> response) {
                        //一般来说,只需呀第一次初始化界面的时候需要使用缓存刷新界面,以后不需要,所以用一个变量标识
                        if (!isInitCache) {
                            //一般来说,缓存回调成功和网络回调成功做的事情是一样的,所以这里直接回调onSuccess
                            onSuccess(response);
                            isInitCache = true;
                        }
                    }",method,
"                        if (!isInitCache) {
                            //一般来说,缓存回调成功和网络回调成功做的事情是一样的,所以这里直接回调onSuccess
                            onSuccess(response);
                            isInitCache = true;
                        }",method,
"                    @Override
                    public void onError(Response<GankResponse<List<GankModel>>> response) {
                        //网络请求失败的回调,一般会弹个Toast
                        showToast(response.getException().getMessage());
                    }",method,
"                    @Override
                    public void onFinish() {
                        //可能需要移除之前添加的布局
                        newsAdapter.removeAllFooterView();
                        //最后调用结束刷新的方法
                        setRefreshing(false);
                    }",method,
"    @Override
    public void onLoadMoreRequested() {
        OkGo.<GankResponse<List<GankModel>>>get(url + currentPage)//
                .cacheMode(CacheMode.NO_CACHE)       //上拉不需要缓存
                .execute(new NewsCallback<GankResponse<List<GankModel>>>() {
                    @Override
                    public void onSuccess(Response<GankResponse<List<GankModel>>> response) {
                        List<GankModel> results = response.body().results;
                        if (results != null && results.size() > 0) {
                            currentPage++;
                            newsAdapter.addData(results);
                        } else {
                            //显示没有更多数据
                            newsAdapter.loadComplete();
                            View noDataView = inflater.inflate(R.layout.item_no_data, (ViewGroup) recyclerView.getParent(), false);
                            newsAdapter.addFooterView(noDataView);
                        }
                    }
                    @Override
                    public void onError(Response<GankResponse<List<GankModel>>> response) {
                        //显示数据加载失败,点击重试
                        newsAdapter.showLoadMoreFailedView();
                        //网络请求失败的回调,一般会弹个Toast
                        showToast(response.getException().getMessage());
                    }
                });
    }",method,
"                .execute(new NewsCallback<GankResponse<List<GankModel>>>() {
                    @Override
                    public void onSuccess(Response<GankResponse<List<GankModel>>> response) {
                        List<GankModel> results = response.body().results;
                        if (results != null && results.size() > 0) {
                            currentPage++;
                            newsAdapter.addData(results);
                        } else {
                            //显示没有更多数据
                            newsAdapter.loadComplete();
                            View noDataView = inflater.inflate(R.layout.item_no_data, (ViewGroup) recyclerView.getParent(), false);
                            newsAdapter.addFooterView(noDataView);
                        }
                    }
                    @Override
                    public void onError(Response<GankResponse<List<GankModel>>> response) {
                        //显示数据加载失败,点击重试
                        newsAdapter.showLoadMoreFailedView();
                        //网络请求失败的回调,一般会弹个Toast
                        showToast(response.getException().getMessage());
                    }
                }",method,
"                    @Override
                    public void onSuccess(Response<GankResponse<List<GankModel>>> response) {
                        List<GankModel> results = response.body().results;
                        if (results != null && results.size() > 0) {
                            currentPage++;
                            newsAdapter.addData(results);
                        } else {
                            //显示没有更多数据
                            newsAdapter.loadComplete();
                            View noDataView = inflater.inflate(R.layout.item_no_data, (ViewGroup) recyclerView.getParent(), false);
                            newsAdapter.addFooterView(noDataView);
                        }
                    }",method,
"                    @Override
                    public void onError(Response<GankResponse<List<GankModel>>> response) {
                        //显示数据加载失败,点击重试
                        newsAdapter.showLoadMoreFailedView();
                        //网络请求失败的回调,一般会弹个Toast
                        showToast(response.getException().getMessage());
                    }",method,
"    public void showToast(String msg) {
        Snackbar.make(recyclerView, msg, Snackbar.LENGTH_SHORT).show();
    }",method,
"    public void setRefreshing(final boolean refreshing) {
        refreshLayout.post(new Runnable() {
            @Override
            public void run() {
                refreshLayout.setRefreshing(refreshing);
            }
        });
    }",method,
"        refreshLayout.post(new Runnable() {
            @Override
            public void run() {
                refreshLayout.setRefreshing(refreshing);
            }
        }",method,
"            @Override
            public void run() {
                refreshLayout.setRefreshing(refreshing);
            }",method,
"public abstract class SearchIndexableData {
    public Context context;
    public Locale locale;
    public boolean enabled;
    public int rank;
    public String key;
    public int userId = -1;
    public String className;
    public String packageName;
    public int iconResId;
    public String intentAction;
    public String intentTargetPackage;
    public String intentTargetClass;
    public SearchIndexableData() {
        locale = Locale.getDefault();
        enabled = true;
    }
    public SearchIndexableData(Context ctx) {
        this();
        context = ctx;
    }
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(""SearchIndexableData[context: "");
        sb.append(context);
        sb.append("", "");
        sb.append(""locale: "");
        sb.append(locale);
        sb.append("", "");
        sb.append(""enabled: "");
        sb.append(enabled);
        sb.append("", "");
        sb.append(""rank: "");
        sb.append(rank);
        sb.append("", "");
        sb.append(""key: "");
        sb.append(key);
        sb.append("", "");
        sb.append(""userId: "");
        sb.append(userId);
        sb.append("", "");
        sb.append(""className: "");
        sb.append(className);
        sb.append("", "");
        sb.append(""packageName: "");
        sb.append(packageName);
        sb.append("", "");
        sb.append(""iconResId: "");
        sb.append(iconResId);
        sb.append("", "");
        sb.append(""intentAction: "");
        sb.append(intentAction);
        sb.append("", "");
        sb.append(""intentTargetPackage: "");
        sb.append(intentTargetPackage);
        sb.append("", "");
        sb.append(""intentTargetClass: "");
        sb.append(intentTargetClass);
        sb.append(""]"");
        return sb.toString();
    }
}",class,
"    public SearchIndexableData() {
        locale = Locale.getDefault();
        enabled = true;
    }",method,
"    public SearchIndexableData(Context ctx) {
        this();
        context = ctx;
    }",method,
"    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(""SearchIndexableData[context: "");
        sb.append(context);
        sb.append("", "");
        sb.append(""locale: "");
        sb.append(locale);
        sb.append("", "");
        sb.append(""enabled: "");
        sb.append(enabled);
        sb.append("", "");
        sb.append(""rank: "");
        sb.append(rank);
        sb.append("", "");
        sb.append(""key: "");
        sb.append(key);
        sb.append("", "");
        sb.append(""userId: "");
        sb.append(userId);
        sb.append("", "");
        sb.append(""className: "");
        sb.append(className);
        sb.append("", "");
        sb.append(""packageName: "");
        sb.append(packageName);
        sb.append("", "");
        sb.append(""iconResId: "");
        sb.append(iconResId);
        sb.append("", "");
        sb.append(""intentAction: "");
        sb.append(intentAction);
        sb.append("", "");
        sb.append(""intentTargetPackage: "");
        sb.append(intentTargetPackage);
        sb.append("", "");
        sb.append(""intentTargetClass: "");
        sb.append(intentTargetClass);
        sb.append(""]"");
        return sb.toString();
    }",method,
"public class SegmentTypeBox extends AbstractBox {
    public static final String TYPE = ""styp"";
    private String majorBrand;
    private long minorVersion;
    private List<String> compatibleBrands = Collections.emptyList();
    public SegmentTypeBox() {
        super(TYPE);
    }
    public SegmentTypeBox(String majorBrand, long minorVersion, List<String> compatibleBrands) {
        super(TYPE);
        this.majorBrand = majorBrand;
        this.minorVersion = minorVersion;
        this.compatibleBrands = compatibleBrands;
    }
    protected long getContentSize() {
        return 8 + compatibleBrands.size() * 4;
    }
    @Override
    public void _parseDetails(ByteBuffer content) {
        majorBrand = IsoTypeReader.read4cc(content);
        minorVersion = IsoTypeReader.readUInt32(content);
        int compatibleBrandsCount = content.remaining() / 4;
        compatibleBrands = new LinkedList<String>();
        for (int i = 0; i < compatibleBrandsCount; i++) {
            compatibleBrands.add(IsoTypeReader.read4cc(content));
        }
    }
    @Override
    protected void getContent(ByteBuffer byteBuffer) {
        byteBuffer.put(IsoFile.fourCCtoBytes(majorBrand));
        IsoTypeWriter.writeUInt32(byteBuffer, minorVersion);
        for (String compatibleBrand : compatibleBrands) {
            byteBuffer.put(IsoFile.fourCCtoBytes(compatibleBrand));
        }
    }
    public String getMajorBrand() {
        return majorBrand;
    }
    public void setMajorBrand(String majorBrand) {
        this.majorBrand = majorBrand;
    }
    public void setMinorVersion(int minorVersion) {
        this.minorVersion = minorVersion;
    }
    public long getMinorVersion() {
        return minorVersion;
    }
    public List<String> getCompatibleBrands() {
        return compatibleBrands;
    }
    public void setCompatibleBrands(List<String> compatibleBrands) {
        this.compatibleBrands = compatibleBrands;
    }
    @DoNotParseDetail
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append(""SegmentTypeBox["");
        result.append(""majorBrand="").append(getMajorBrand());
        result.append("";"");
        result.append(""minorVersion="").append(getMinorVersion());
        for (String compatibleBrand : compatibleBrands) {
            result.append("";"");
            result.append(""compatibleBrand="").append(compatibleBrand);
        }
        result.append(""]"");
        return result.toString();
    }
}",class,
"    public SegmentTypeBox() {
        super(TYPE);
    }",method,
"    public SegmentTypeBox(String majorBrand, long minorVersion, List<String> compatibleBrands) {
        super(TYPE);
        this.majorBrand = majorBrand;
        this.minorVersion = minorVersion;
        this.compatibleBrands = compatibleBrands;
    }",method,
"    protected long getContentSize() {
        return 8 + compatibleBrands.size() * 4;
    }",method,
"    @Override
    public void _parseDetails(ByteBuffer content) {
        majorBrand = IsoTypeReader.read4cc(content);
        minorVersion = IsoTypeReader.readUInt32(content);
        int compatibleBrandsCount = content.remaining() / 4;
        compatibleBrands = new LinkedList<String>();
        for (int i = 0; i < compatibleBrandsCount; i++) {
            compatibleBrands.add(IsoTypeReader.read4cc(content));
        }
    }",method,
"        for (int i = 0; i < compatibleBrandsCount; i++) {
            compatibleBrands.add(IsoTypeReader.read4cc(content));
        }",method,
"    @Override
    protected void getContent(ByteBuffer byteBuffer) {
        byteBuffer.put(IsoFile.fourCCtoBytes(majorBrand));
        IsoTypeWriter.writeUInt32(byteBuffer, minorVersion);
        for (String compatibleBrand : compatibleBrands) {
            byteBuffer.put(IsoFile.fourCCtoBytes(compatibleBrand));
        }
    }",method,
"        for (String compatibleBrand : compatibleBrands) {
            byteBuffer.put(IsoFile.fourCCtoBytes(compatibleBrand));
        }",method,
"    public String getMajorBrand() {
        return majorBrand;
    }",method,
"    public void setMajorBrand(String majorBrand) {
        this.majorBrand = majorBrand;
    }",method,
"    public void setMinorVersion(int minorVersion) {
        this.minorVersion = minorVersion;
    }",method,
"    public long getMinorVersion() {
        return minorVersion;
    }",method,
"    public List<String> getCompatibleBrands() {
        return compatibleBrands;
    }",method,
"    public void setCompatibleBrands(List<String> compatibleBrands) {
        this.compatibleBrands = compatibleBrands;
    }",method,
"    @DoNotParseDetail
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append(""SegmentTypeBox["");
        result.append(""majorBrand="").append(getMajorBrand());
        result.append("";"");
        result.append(""minorVersion="").append(getMinorVersion());
        for (String compatibleBrand : compatibleBrands) {
            result.append("";"");
            result.append(""compatibleBrand="").append(compatibleBrand);
        }
        result.append(""]"");
        return result.toString();
    }",method,
"        for (String compatibleBrand : compatibleBrands) {
            result.append("";"");
            result.append(""compatibleBrand="").append(compatibleBrand);
        }",method,
"public class StackMapTableAttribute extends Attribute
{
    public int             u2stackMapFramesCount;
    public StackMapFrame[] stackMapFrames;
    public StackMapTableAttribute()
    {
    }
    public StackMapTableAttribute(StackMapFrame[] stackMapFrames)
    {
        this(stackMapFrames.length, stackMapFrames);
    }
    public StackMapTableAttribute(int             stackMapFramesCount,
                                  StackMapFrame[] stackMapFrames)
    {
        this.u2stackMapFramesCount = stackMapFramesCount;
        this.stackMapFrames        = stackMapFrames;
    }
    // Implementations for Attribute.
    public void accept(Clazz clazz, Method method, CodeAttribute codeAttribute, AttributeVisitor attributeVisitor)
    {
        attributeVisitor.visitStackMapTableAttribute(clazz, method, codeAttribute, this);
    }
    public void stackMapFramesAccept(Clazz clazz, Method method, CodeAttribute codeAttribute, StackMapFrameVisitor stackMapFrameVisitor)
    {
        int offset = 0;
        for (int index = 0; index < u2stackMapFramesCount; index++)
        {
            StackMapFrame stackMapFrame = stackMapFrames[index];
            // Note that the byte code offset is computed differently for the
            // first stack map frame.
            offset += stackMapFrame.getOffsetDelta() + (index == 0 ? 0 : 1);
            stackMapFrame.accept(clazz, method, codeAttribute, offset, stackMapFrameVisitor);
        }
    }
}",class,
"    public StackMapTableAttribute()
    {
    }",method,
"    public StackMapTableAttribute(StackMapFrame[] stackMapFrames)
    {
        this(stackMapFrames.length, stackMapFrames);
    }",method,
"    public StackMapTableAttribute(int             stackMapFramesCount,
                                  StackMapFrame[] stackMapFrames)
    {
        this.u2stackMapFramesCount = stackMapFramesCount;
        this.stackMapFrames        = stackMapFrames;
    }",method,
"    public void accept(Clazz clazz, Method method, CodeAttribute codeAttribute, AttributeVisitor attributeVisitor)
    {
        attributeVisitor.visitStackMapTableAttribute(clazz, method, codeAttribute, this);
    }",method,
"    public void stackMapFramesAccept(Clazz clazz, Method method, CodeAttribute codeAttribute, StackMapFrameVisitor stackMapFrameVisitor)
    {
        int offset = 0;
        for (int index = 0; index < u2stackMapFramesCount; index++)
        {
            StackMapFrame stackMapFrame = stackMapFrames[index];
            // Note that the byte code offset is computed differently for the
            // first stack map frame.
            offset += stackMapFrame.getOffsetDelta() + (index == 0 ? 0 : 1);
            stackMapFrame.accept(clazz, method, codeAttribute, offset, stackMapFrameVisitor);
        }
    }",method,
"        for (int index = 0; index < u2stackMapFramesCount; index++)
        {
            StackMapFrame stackMapFrame = stackMapFrames[index];
            // Note that the byte code offset is computed differently for the
            // first stack map frame.
            offset += stackMapFrame.getOffsetDelta() + (index == 0 ? 0 : 1);
            stackMapFrame.accept(clazz, method, codeAttribute, offset, stackMapFrameVisitor);
        }",method,
"public class AndEngineSensorExample extends BaseGameActivity implements IOrientationListener, ILocationListener {
	// ===========================================================
	// Constants
	// ===========================================================
	private static final int CAMERA_WIDTH = 480;
	private static final int CAMERA_HEIGHT = 320;
	private String tag = ""AndEngineSensorExample"";
	private static final boolean USE_MOCK_LOCATION = false;
	private static final boolean USE_ACTUAL_LOCATION = !USE_MOCK_LOCATION;
	// ===========================================================
	// Fields
	// ===========================================================
	protected Camera mCamera;
	private Location mUserLocation;
	protected Scene mMainScene;
	protected Sprite mIcon;
	private BuildableTexture mIconTexture;
	private TextureRegion mIconTextureRegion;
	private Location mLocation ;
	// ===========================================================
	// Constructors
	// ===========================================================
	// ===========================================================
	// Getter & Setter
	// ===========================================================
	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
		this.mLocation = new Location(LocationManager.GPS_PROVIDER);
	}
	@Override
	public Engine onLoadEngine() {
		this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
		return new Engine(new EngineOptions(true, ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera));
	}
	@Override
	public void onLoadResources() {
		mIconTexture = new BuildableTexture(128, 128, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		mIconTextureRegion = TextureRegionFactory.createFromAsset(this.mIconTexture, this, ""icon.png"");
		   try {
			      mIconTexture.build(new BlackPawnTextureBuilder(2));
			   } catch (final TextureSourcePackingException e) {
			      Log.d(tag, ""Sprites won't fit in mIconTexture"");
			   }
		this.mEngine.getTextureManager().loadTexture(this.mIconTexture);
	}
	@Override
	public Scene onLoadScene() {
		final Scene scene = new Scene(1);
		scene.setBackground(new ColorBackground(0.1f, 0.6f, 0.9f));
		mIcon = new Sprite(100, 100, this.mIconTextureRegion);
		scene.getLastChild().attachChild(mIcon);		
		return scene;
	}
	@Override
	public void onLoadComplete() {
	}
	@Override
	protected void onResume() {
		super.onResume();
		this.enableOrientationSensor(AndEngineSensorExample.this);
		final LocationSensorOptions locationSensorOptions = new LocationSensorOptions();
		locationSensorOptions.setAccuracy(Criteria.ACCURACY_COARSE);
		locationSensorOptions.setMinimumTriggerTime(0);
		locationSensorOptions.setMinimumTriggerDistance(0);
		this.enableLocationSensor(AndEngineSensorExample.this, locationSensorOptions);
	}
	@Override
	protected void onPause() {
		super.onPause();
		this.mEngine.disableOrientationSensor(this);
		this.mEngine.disableLocationSensor(this);
	}
	@Override
	public void onOrientationChanged(final OrientationData pOrientationData) {
		float yaw = pOrientationData.getYaw() / 360.0f;
		mIcon.setPosition( CAMERA_WIDTH/2, yaw * CAMERA_HEIGHT);
	}
	@Override
	public void onLocationChanged(final Location pLocation) {
		String tst = ""Lat: "" + pLocation.getLatitude()+""  Lng: "" + pLocation.getLongitude();
		Toast.makeText(AndEngineSensorExample.this, tst, Toast.LENGTH_LONG).show();
	}
	@Override
	public void onLocationLost() {
	}
	@Override
	public void onLocationProviderDisabled() {
	}
	@Override
	public void onLocationProviderEnabled() {
	}
	@Override
	public void onLocationProviderStatusChanged(final LocationProviderStatus pLocationProviderStatus, final Bundle pBundle) {
	}
	// ===========================================================
	// Methods
	// ===========================================================
	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
}",class,
"public final class R {
    public static final class attr {
    }
    public static final class drawable {
        public static final int icon=0x7f020000;
    }
    public static final class layout {
        public static final int main=0x7f030000;
    }
    public static final class string {
        public static final int app_name=0x7f040000;
    }
}",class,
"    public static final class attr {
    }",class,
"    public static final class drawable {
        public static final int icon=0x7f020000;
    }",class,
"    public static final class layout {
        public static final int main=0x7f030000;
    }",class,
"    public static final class string {
        public static final int app_name=0x7f040000;
    }",class,
"	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
		this.mLocation = new Location(LocationManager.GPS_PROVIDER);
	}",method,
"	@Override
	public Engine onLoadEngine() {
		this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
		return new Engine(new EngineOptions(true, ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera));
	}",method,
"	@Override
	public void onLoadResources() {
		mIconTexture = new BuildableTexture(128, 128, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		mIconTextureRegion = TextureRegionFactory.createFromAsset(this.mIconTexture, this, ""icon.png"");
		   try {
			      mIconTexture.build(new BlackPawnTextureBuilder(2));
			   } catch (final TextureSourcePackingException e) {
			      Log.d(tag, ""Sprites won't fit in mIconTexture"");
			   }
		this.mEngine.getTextureManager().loadTexture(this.mIconTexture);
	}",method,
"	@Override
	public Scene onLoadScene() {
		final Scene scene = new Scene(1);
		scene.setBackground(new ColorBackground(0.1f, 0.6f, 0.9f));
		mIcon = new Sprite(100, 100, this.mIconTextureRegion);
		scene.getLastChild().attachChild(mIcon);		
		return scene;
	}",method,
"	@Override
	public void onLoadComplete() {
	}",method,
"	@Override
	protected void onResume() {
		super.onResume();
		this.enableOrientationSensor(AndEngineSensorExample.this);
		final LocationSensorOptions locationSensorOptions = new LocationSensorOptions();
		locationSensorOptions.setAccuracy(Criteria.ACCURACY_COARSE);
		locationSensorOptions.setMinimumTriggerTime(0);
		locationSensorOptions.setMinimumTriggerDistance(0);
		this.enableLocationSensor(AndEngineSensorExample.this, locationSensorOptions);
	}",method,
"	@Override
	protected void onPause() {
		super.onPause();
		this.mEngine.disableOrientationSensor(this);
		this.mEngine.disableLocationSensor(this);
	}",method,
"	@Override
	public void onOrientationChanged(final OrientationData pOrientationData) {
		float yaw = pOrientationData.getYaw() / 360.0f;
		mIcon.setPosition( CAMERA_WIDTH/2, yaw * CAMERA_HEIGHT);
	}",method,
"	@Override
	public void onLocationChanged(final Location pLocation) {
		String tst = ""Lat: "" + pLocation.getLatitude()+""  Lng: "" + pLocation.getLongitude();
		Toast.makeText(AndEngineSensorExample.this, tst, Toast.LENGTH_LONG).show();
	}",method,
"	@Override
	public void onLocationLost() {
	}",method,
"	@Override
	public void onLocationProviderDisabled() {
	}",method,
"	@Override
	public void onLocationProviderEnabled() {
	}",method,
"	@Override
	public void onLocationProviderStatusChanged(final LocationProviderStatus pLocationProviderStatus, final Bundle pBundle) {
	}",method,
"public final class PhoneNumberGenerator implements GeneratorSource {
  private Grid table;
  private final TextBox number = new TextBox();
  public PhoneNumberGenerator(ChangeHandler handler, KeyPressHandler keyListener) {
    number.addStyleName(StylesDefs.INPUT_FIELD_REQUIRED);
    number.addChangeHandler(handler);
    number.addKeyPressHandler(keyListener);
  }
  @Override
  public String getName() {
    return ""Phone number"";
  }
  @Override
  public String getText() throws GeneratorException {
    String tel = getTelField();
    return ""tel:"" + tel;
  }
  private String getTelField() throws GeneratorException {
    String input = number.getText();
    if (input.isEmpty()) {
      throw new GeneratorException(""Phone number must be present."");
    }
    input = Validators.filterNumber(input);
    Validators.validateNumber(input);
    return input;
  }
  @Override
  public Grid getWidget() {
    if (table != null) {
      return table;
    }
    table = new Grid(1, 2);
    table.setText(0, 0, ""Phone number"");
    table.setWidget(0, 1, number);
    return table;
  }
  @Override
  public void validate(Widget widget) throws GeneratorException {
    if (widget == number) {
      getTelField();
    }
  }
  @Override
  public void setFocus() {
    number.setFocus(true);
  }
}",class,
"  public PhoneNumberGenerator(ChangeHandler handler, KeyPressHandler keyListener) {
    number.addStyleName(StylesDefs.INPUT_FIELD_REQUIRED);
    number.addChangeHandler(handler);
    number.addKeyPressHandler(keyListener);
  }",method,
"  @Override
  public String getName() {
    return ""Phone number"";
  }",method,
"  @Override
  public String getText() throws GeneratorException {
    String tel = getTelField();
    return ""tel:"" + tel;
  }",method,
"  private String getTelField() throws GeneratorException {
    String input = number.getText();
    if (input.isEmpty()) {
      throw new GeneratorException(""Phone number must be present."");
    }
    input = Validators.filterNumber(input);
    Validators.validateNumber(input);
    return input;
  }",method,
"  @Override
  public Grid getWidget() {
    if (table != null) {
      return table;
    }
    table = new Grid(1, 2);
    table.setText(0, 0, ""Phone number"");
    table.setWidget(0, 1, number);
    return table;
  }",method,
"    if (table != null) {
      return table;
    }",method,
"  @Override
  public void validate(Widget widget) throws GeneratorException {
    if (widget == number) {
      getTelField();
    }
  }",method,
"    if (widget == number) {
      getTelField();
    }",method,
"  @Override
  public void setFocus() {
    number.setFocus(true);
  }",method,
"final class AddRuleAction implements DOMAction {
  private final String mType;
  private final JSONObject mData;
  public AddRuleAction(String type, JSONObject data) {
    this.mType = type;
    this.mData = data;
  }
  @Override
  public void executeDom(DOMActionContext context) {
    if (Constants.Name.FONT_FACE.equals(mType)) {
      FontDO fontDO = parseFontDO(mData, context.getInstance());
      if (fontDO != null && !TextUtils.isEmpty(fontDO.getFontFamilyName())) {
        FontDO cacheFontDO = TypefaceUtil.getFontDO(fontDO.getFontFamilyName());
        if (cacheFontDO == null || !TextUtils.equals(cacheFontDO.getUrl(), fontDO.getUrl())) {
          TypefaceUtil.putFontDO(fontDO);
          TypefaceUtil.loadTypeface(fontDO);
        } else {
          TypefaceUtil.loadTypeface(cacheFontDO);
        }
      }
    }
  }
  private FontDO parseFontDO(JSONObject jsonObject,WXSDKInstance instance) {
    if(jsonObject == null) {
      return null;
    }
    String src = jsonObject.getString(Constants.Name.SRC);
    String name = jsonObject.getString(Constants.Name.FONT_FAMILY);
    return new FontDO(name, src,instance);
  }
}",class,
"  public AddRuleAction(String type, JSONObject data) {
    this.mType = type;
    this.mData = data;
  }",method,
"  @Override
  public void executeDom(DOMActionContext context) {
    if (Constants.Name.FONT_FACE.equals(mType)) {
      FontDO fontDO = parseFontDO(mData, context.getInstance());
      if (fontDO != null && !TextUtils.isEmpty(fontDO.getFontFamilyName())) {
        FontDO cacheFontDO = TypefaceUtil.getFontDO(fontDO.getFontFamilyName());
        if (cacheFontDO == null || !TextUtils.equals(cacheFontDO.getUrl(), fontDO.getUrl())) {
          TypefaceUtil.putFontDO(fontDO);
          TypefaceUtil.loadTypeface(fontDO);
        } else {
          TypefaceUtil.loadTypeface(cacheFontDO);
        }
      }
    }
  }",method,
"  private FontDO parseFontDO(JSONObject jsonObject,WXSDKInstance instance) {
    if(jsonObject == null) {
      return null;
    }
    String src = jsonObject.getString(Constants.Name.SRC);
    String name = jsonObject.getString(Constants.Name.FONT_FAMILY);
    return new FontDO(name, src,instance);
  }",method,
"    if(jsonObject == null) {
      return null;
    }",method,
"public abstract class RemoteAccessor extends RemotingSupport {
	private Class<?> serviceInterface;
	public void setServiceInterface(Class<?> serviceInterface) {
		Assert.notNull(serviceInterface, ""'serviceInterface' must not be null"");
		Assert.isTrue(serviceInterface.isInterface(), ""'serviceInterface' must be an interface"");
		this.serviceInterface = serviceInterface;
	}
	public Class<?> getServiceInterface() {
		return this.serviceInterface;
	}
}",class,
"	public void setServiceInterface(Class<?> serviceInterface) {
		Assert.notNull(serviceInterface, ""'serviceInterface' must not be null"");
		Assert.isTrue(serviceInterface.isInterface(), ""'serviceInterface' must be an interface"");
		this.serviceInterface = serviceInterface;
	}",method,
"	public Class<?> getServiceInterface() {
		return this.serviceInterface;
	}",method,
"public class StoreApi {
  String basePath = ""http://petstore.swagger.io/v2"";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();
  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }
  public ApiInvoker getInvoker() {
    return apiInvoker;
  }
  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }
  public String getBasePath() {
    return basePath;
  }
  public void  deleteOrder (String orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling deleteOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}"".replaceAll(""\\{format\\}"",""json"").replaceAll(""\\{"" + ""orderId"" + ""\\}"", apiInvoker.escapeString(orderId.toString()));
    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();
    String[] localVarContentTypes = {
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : ""application/json"";
    if (localVarContentType.startsWith(""multipart/form-data"")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }
    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, ""DELETE"", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  public Map<String, Integer>  getInventory () throws ApiException {
    Object localVarPostBody = null;
    // create path and map variables
    String localVarPath = ""/store/inventory"".replaceAll(""\\{format\\}"",""json"");
    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();
    String[] localVarContentTypes = {
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : ""application/json"";
    if (localVarContentType.startsWith(""multipart/form-data"")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }
    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, ""GET"", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Map<String, Integer>) ApiInvoker.deserialize(localVarResponse, ""map"", Map.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  public Order  getOrderById (Long orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling getOrderById"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}"".replaceAll(""\\{format\\}"",""json"").replaceAll(""\\{"" + ""orderId"" + ""\\}"", apiInvoker.escapeString(orderId.toString()));
    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();
    String[] localVarContentTypes = {
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : ""application/json"";
    if (localVarContentType.startsWith(""multipart/form-data"")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }
    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, ""GET"", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Order) ApiInvoker.deserialize(localVarResponse, """", Order.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  public Order  placeOrder (Order body) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, ""Missing the required parameter 'body' when calling placeOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order"".replaceAll(""\\{format\\}"",""json"");
    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();
    String[] localVarContentTypes = {
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : ""application/json"";
    if (localVarContentType.startsWith(""multipart/form-data"")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }
    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, ""POST"", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Order) ApiInvoker.deserialize(localVarResponse, """", Order.class);
      }",class,
"  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }
  public ApiInvoker getInvoker() {
    return apiInvoker;
  }
  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }
  public String getBasePath() {
    return basePath;
  }
  public void  deleteOrder (String orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling deleteOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"  public ApiInvoker getInvoker() {
    return apiInvoker;
  }
  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }
  public String getBasePath() {
    return basePath;
  }
  public void  deleteOrder (String orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling deleteOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }
  public String getBasePath() {
    return basePath;
  }
  public void  deleteOrder (String orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling deleteOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"  public String getBasePath() {
    return basePath;
  }
  public void  deleteOrder (String orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling deleteOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"  public void  deleteOrder (String orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling deleteOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling deleteOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  public Map<String, Integer>  getInventory () throws ApiException {
    Object localVarPostBody = null;
    // create path and map variables
    String localVarPath = ""/store/inventory"".replaceAll(""\\{format\\}",method,
"  public Map<String, Integer>  getInventory () throws ApiException {
    Object localVarPostBody = null;
    // create path and map variables
    String localVarPath = ""/store/inventory"".replaceAll(""\\{format\\}",method,
"      if(localVarResponse != null){
        return (Map<String, Integer>) ApiInvoker.deserialize(localVarResponse, ""map"", Map.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  public Order  getOrderById (Long orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling getOrderById"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"  public Order  getOrderById (Long orderId) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling getOrderById"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"    if (orderId == null) {
       throw new ApiException(400, ""Missing the required parameter 'orderId' when calling getOrderById"");
    }
    // create path and map variables
    String localVarPath = ""/store/order/{orderId}",method,
"      if(localVarResponse != null){
        return (Order) ApiInvoker.deserialize(localVarResponse, """", Order.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  public Order  placeOrder (Order body) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, ""Missing the required parameter 'body' when calling placeOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order"".replaceAll(""\\{format\\}",method,
"  public Order  placeOrder (Order body) throws ApiException {
    Object localVarPostBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
       throw new ApiException(400, ""Missing the required parameter 'body' when calling placeOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order"".replaceAll(""\\{format\\}",method,
"    if (body == null) {
       throw new ApiException(400, ""Missing the required parameter 'body' when calling placeOrder"");
    }
    // create path and map variables
    String localVarPath = ""/store/order"".replaceAll(""\\{format\\}",method,
"      if(localVarResponse != null){
        return (Order) ApiInvoker.deserialize(localVarResponse, """", Order.class);
      }
      else {
        return null;
      }",method,
"public class TestOracleWrap extends TestCase {
    private DruidDataSource dataSource;
    protected void setUp() throws Exception {
        dataSource = new DruidDataSource();
        dataSource.setOracle(true);
        dataSource.setUrl(""jdbc:mock:xxx"");
        dataSource.setDriver(new OracleMockDriver());
        dataSource.setPoolPreparedStatements(true);
        dataSource.setConnectionProperties(""defaultRowPrefetch=50"");
        dataSource.setDbType(""oracle"");
        // dataSource.setFilters(""log4j"");
    }
    protected void tearDown() throws Exception {
        JdbcUtils.close(dataSource);
    }
    public void test_oracle() throws Exception {
        String sql = ""SELECT 1"";
        {
            Connection conn = dataSource.getConnection();
            Assert.assertTrue(conn.isWrapperFor(DruidPooledConnection.class));
            Assert.assertNotNull(conn.unwrap(DruidPooledConnection.class));
            Assert.assertTrue(conn.isWrapperFor(oracle.jdbc.OracleConnection.class));
            Assert.assertNotNull(conn.unwrap(oracle.jdbc.OracleConnection.class));
            Assert.assertTrue(conn.isWrapperFor(java.sql.Connection.class));
            Assert.assertNotNull(conn.unwrap(java.sql.Connection.class));
            // /////////////
            PreparedStatement stmt = conn.prepareStatement(sql);
            Assert.assertNotNull(stmt.unwrap(oracle.jdbc.OraclePreparedStatement.class));
            Assert.assertTrue(stmt.isWrapperFor(oracle.jdbc.OraclePreparedStatement.class));
            Assert.assertTrue(stmt.isWrapperFor(DruidPooledPreparedStatement.class));
            Assert.assertNotNull(stmt.unwrap(DruidPooledPreparedStatement.class));
            Assert.assertTrue(stmt.isWrapperFor(java.sql.PreparedStatement.class));
            Assert.assertNotNull(stmt.unwrap(java.sql.PreparedStatement.class));
            ResultSet rs = stmt.executeQuery();
            Assert.assertNotNull(rs.unwrap(oracle.jdbc.OracleResultSet.class));
            Assert.assertTrue(rs.isWrapperFor(oracle.jdbc.OracleResultSet.class));
            Assert.assertTrue(rs.isWrapperFor(DruidPooledResultSet.class));
            Assert.assertNotNull(rs.unwrap(DruidPooledResultSet.class));
            Assert.assertTrue(rs.isWrapperFor(java.sql.ResultSet.class));
            Assert.assertNotNull(rs.unwrap(java.sql.ResultSet.class));
            rs.next();
            rs.close();
            stmt.close();
            conn.close();
        }
        for (int i = 0; i < 10; ++i) {
            Connection conn = dataSource.getConnection();
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            rs.close();
            stmt.close();
            conn.close();
        }
        Assert.assertEquals(1, dataSource.getCachedPreparedStatementCount());
    }
}",class,
"    protected void setUp() throws Exception {
        dataSource = new DruidDataSource();
        dataSource.setOracle(true);
        dataSource.setUrl(""jdbc:mock:xxx"");
        dataSource.setDriver(new OracleMockDriver());
        dataSource.setPoolPreparedStatements(true);
        dataSource.setConnectionProperties(""defaultRowPrefetch=50"");
        dataSource.setDbType(""oracle"");
        // dataSource.setFilters(""log4j"");
    }",method,
"    protected void tearDown() throws Exception {
        JdbcUtils.close(dataSource);
    }",method,
"    public void test_oracle() throws Exception {
        String sql = ""SELECT 1"";
        {
            Connection conn = dataSource.getConnection();
            Assert.assertTrue(conn.isWrapperFor(DruidPooledConnection.class));
            Assert.assertNotNull(conn.unwrap(DruidPooledConnection.class));
            Assert.assertTrue(conn.isWrapperFor(oracle.jdbc.OracleConnection.class));
            Assert.assertNotNull(conn.unwrap(oracle.jdbc.OracleConnection.class));
            Assert.assertTrue(conn.isWrapperFor(java.sql.Connection.class));
            Assert.assertNotNull(conn.unwrap(java.sql.Connection.class));
            // /////////////
            PreparedStatement stmt = conn.prepareStatement(sql);
            Assert.assertNotNull(stmt.unwrap(oracle.jdbc.OraclePreparedStatement.class));
            Assert.assertTrue(stmt.isWrapperFor(oracle.jdbc.OraclePreparedStatement.class));
            Assert.assertTrue(stmt.isWrapperFor(DruidPooledPreparedStatement.class));
            Assert.assertNotNull(stmt.unwrap(DruidPooledPreparedStatement.class));
            Assert.assertTrue(stmt.isWrapperFor(java.sql.PreparedStatement.class));
            Assert.assertNotNull(stmt.unwrap(java.sql.PreparedStatement.class));
            ResultSet rs = stmt.executeQuery();
            Assert.assertNotNull(rs.unwrap(oracle.jdbc.OracleResultSet.class));
            Assert.assertTrue(rs.isWrapperFor(oracle.jdbc.OracleResultSet.class));
            Assert.assertTrue(rs.isWrapperFor(DruidPooledResultSet.class));
            Assert.assertNotNull(rs.unwrap(DruidPooledResultSet.class));
            Assert.assertTrue(rs.isWrapperFor(java.sql.ResultSet.class));
            Assert.assertNotNull(rs.unwrap(java.sql.ResultSet.class));
            rs.next();
            rs.close();
            stmt.close();
            conn.close();
        }
        for (int i = 0; i < 10; ++i) {
            Connection conn = dataSource.getConnection();
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            rs.close();
            stmt.close();
            conn.close();
        }
        Assert.assertEquals(1, dataSource.getCachedPreparedStatementCount());
    }",method,
"        for (int i = 0; i < 10; ++i) {
            Connection conn = dataSource.getConnection();
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            rs.close();
            stmt.close();
            conn.close();
        }",method,
