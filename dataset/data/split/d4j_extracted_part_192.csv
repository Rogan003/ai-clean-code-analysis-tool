code_snippet,type,score
"        if (propertyType == null) {
            propertyType = determinePropertyType(property.getAccessor(PropertyAccessorType.SETTER));
        }",method,
"    private static ModelType<?> determinePropertyType(PropertyAccessorExtractionContext accessor) {
        return accessor == null ? null : ModelType.of(accessor.getAccessorType().propertyTypeFor(accessor.getMostSpecificDeclaration()));
    }",method,
"    private static <P> ModelPropertyExtractionResult<P> createProperty(ModelType<P> propertyType, ModelPropertyExtractionContext propertyContext) {
        ImmutableMap.Builder<PropertyAccessorType, WeaklyTypeReferencingMethod<?, ?>> accessors = ImmutableMap.builder();
        for (PropertyAccessorExtractionContext accessor : propertyContext.getAccessors()) {
            WeaklyTypeReferencingMethod<?, ?> accessorMethod = WeaklyTypeReferencingMethod.of(accessor.getMostSpecificDeclaration());
            accessors.put(accessor.getAccessorType(), accessorMethod);
        }
        ModelProperty<P> property = new ModelProperty<P>(
            propertyType,
            propertyContext.getPropertyName(),
            propertyContext.getDeclaredBy(),
            accessors.build()
        );
        return new ModelPropertyExtractionResult<P>(property, propertyContext.getAccessors());
    }",method,
"    private static <R, P> void toPropertyExtractionContext(ModelSchemaExtractionContext<R> parentContext, ModelPropertyExtractionResult<P> propertyResult) {
        ModelProperty<P> property = propertyResult.getProperty();
        String propertyDescription = propertyDescription(parentContext, property);
        parentContext.child(property.getType(), propertyDescription, attachSchema(property));
    }",method,
"    private static <P> Action<? super ModelSchema<P>> attachSchema(final ModelProperty<P> property) {
        return new Action<ModelSchema<P>>() {
            @Override
            public void execute(ModelSchema<P> propertySchema) {
                property.setSchema(propertySchema);
            }
        };
    }",method,
"            @Override
            public void execute(ModelSchema<P> propertySchema) {
                property.setSchema(propertySchema);
            }",method,
"    private static String propertyDescription(ModelSchemaExtractionContext<?> parentContext, ModelProperty<?> property) {
        if (property.getDeclaredBy().size() == 1 && property.getDeclaredBy().contains(parentContext.getType())) {
            return String.format(""property '%s'"", property.getName());
        } else {
            ImmutableSortedSet<String> declaredBy = ImmutableSortedSet.copyOf(Iterables.transform(property.getDeclaredBy(), Functions.toStringFunction()));
            return String.format(""property '%s' declared by %s"", property.getName(), Joiner.on("", "").join(declaredBy));
        }
    }",method,
"public class RoleController extends BaseController {
	@Autowired
	private SystemService systemService;
	@Autowired
	private OfficeService officeService;
	@ModelAttribute(""role"")
	public Role get(@RequestParam(required=false) String id) {
		if (StringUtils.isNotBlank(id)){
			return systemService.getRole(id);
		}else{
			return new Role();
		}
	}
	@RequiresPermissions(""sys:role:view"")
	@RequestMapping(value = {""list"", """"})
	public String list(Role role, Model model) {
		List<Role> list = systemService.findAllRole();
		model.addAttribute(""list"", list);
		return ""modules/sys/roleList"";
	}
	@RequiresPermissions(""sys:role:view"")
	@RequestMapping(value = ""form"")
	public String form(Role role, Model model) {
		if (role.getOffice()==null){
			role.setOffice(UserUtils.getUser().getOffice());
		}
		model.addAttribute(""role"", role);
		model.addAttribute(""menuList"", systemService.findAllMenu());
		model.addAttribute(""officeList"", officeService.findAll());
		return ""modules/sys/roleForm"";
	}
	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""save"")
	public String save(Role role, Model model, RedirectAttributes redirectAttributes) {
		if(!UserUtils.getUser().isAdmin()&&role.getSysData().equals(Global.YES)){
			addMessage(redirectAttributes, ""越权操作，只有超级管理员才能修改此数据！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
		if (!beanValidator(model, role)){
			return form(role, model);
		}
		if (!""true"".equals(checkName(role.getOldName(), role.getName()))){
			addMessage(model, ""保存角色'"" + role.getName() + ""'失败, 角色名已存在"");
			return form(role, model);
		}
		if (!""true"".equals(checkEnname(role.getOldEnname(), role.getEnname()))){
			addMessage(model, ""保存角色'"" + role.getName() + ""'失败, 英文名已存在"");
			return form(role, model);
		}
		systemService.saveRole(role);
		addMessage(redirectAttributes, ""保存角色'"" + role.getName() + ""'成功"");
		return ""redirect:"" + adminPath + ""/sys/role/?repage"";
	}
	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""delete"")
	public String delete(Role role, RedirectAttributes redirectAttributes) {
		if(!UserUtils.getUser().isAdmin() && role.getSysData().equals(Global.YES)){
			addMessage(redirectAttributes, ""越权操作，只有超级管理员才能修改此数据！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
//		if (Role.isAdmin(id)){
//			addMessage(redirectAttributes, ""删除角色失败, 不允许内置角色或编号空"");
////		}else if (UserUtils.getUser().getRoleIdList().contains(id)){
////			addMessage(redirectAttributes, ""删除角色失败, 不能删除当前用户所在角色"");
//		}else{
			systemService.deleteRole(role);
			addMessage(redirectAttributes, ""删除角色成功"");
//		}
		return ""redirect:"" + adminPath + ""/sys/role/?repage"";
	}
	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""assign"")
	public String assign(Role role, Model model) {
		List<User> userList = systemService.findUser(new User(new Role(role.getId())));
		model.addAttribute(""userList"", userList);
		return ""modules/sys/roleAssign"";
	}
	@RequiresPermissions(""sys:role:view"")
	@RequestMapping(value = ""usertorole"")
	public String selectUserToRole(Role role, Model model) {
		List<User> userList = systemService.findUser(new User(new Role(role.getId())));
		model.addAttribute(""role"", role);
		model.addAttribute(""userList"", userList);
		model.addAttribute(""selectIds"", Collections3.extractToString(userList, ""name"", "",""));
		model.addAttribute(""officeList"", officeService.findAll());
		return ""modules/sys/selectUserToRole"";
	}
	@RequiresPermissions(""sys:role:view"")
	@ResponseBody
	@RequestMapping(value = ""users"")
	public List<Map<String, Object>> users(String officeId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		User user = new User();
		user.setOffice(new Office(officeId));
		Page<User> page = systemService.findUser(new Page<User>(1, -1), user);
		for (User e : page.getList()) {
			Map<String, Object> map = Maps.newHashMap();
			map.put(""id"", e.getId());
			map.put(""pId"", 0);
			map.put(""name"", e.getName());
			mapList.add(map);			
		}
		return mapList;
	}
	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""outrole"")
	public String outrole(String userId, String roleId, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+roleId;
		}
		Role role = systemService.getRole(roleId);
		User user = systemService.getUser(userId);
		if (UserUtils.getUser().getId().equals(userId)) {
			addMessage(redirectAttributes, ""无法从角色【"" + role.getName() + ""】中移除用户【"" + user.getName() + ""】自己！"");
		}else {
			if (user.getRoleList().size() <= 1){
				addMessage(redirectAttributes, ""用户【"" + user.getName() + ""】从角色【"" + role.getName() + ""】中移除失败！这已经是该用户的唯一角色，不能移除。"");
			}else{
				Boolean flag = systemService.outUserInRole(role, user);
				if (!flag) {
					addMessage(redirectAttributes, ""用户【"" + user.getName() + ""】从角色【"" + role.getName() + ""】中移除失败！"");
				}else {
					addMessage(redirectAttributes, ""用户【"" + user.getName() + ""】从角色【"" + role.getName() + ""】中移除成功！"");
				}
			}		
		}
		return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+role.getId();
	}
	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""assignrole"")
	public String assignRole(Role role, String[] idsArr, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+role.getId();
		}
		StringBuilder msg = new StringBuilder();
		int newNum = 0;
		for (int i = 0; i < idsArr.length; i++) {
			User user = systemService.assignUserToRole(role, systemService.getUser(idsArr[i]));
			if (null != user) {
				msg.append(""<br/>新增用户【"" + user.getName() + ""】到角色【"" + role.getName() + ""】！"");
				newNum++;
			}
		}
		addMessage(redirectAttributes, ""已成功分配 ""+newNum+"" 个用户""+msg);
		return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+role.getId();
	}
	@RequiresPermissions(""user"")
	@ResponseBody
	@RequestMapping(value = ""checkName"")
	public String checkName(String oldName, String name) {
		if (name!=null && name.equals(oldName)) {
			return ""true"";
		} else if (name!=null && systemService.getRoleByName(name) == null) {
			return ""true"";
		}
		return ""false"";
	}
	@RequiresPermissions(""user"")
	@ResponseBody
	@RequestMapping(value = ""checkEnname"")
	public String checkEnname(String oldEnname, String enname) {
		if (enname!=null && enname.equals(oldEnname)) {
			return ""true"";
		} else if (enname!=null && systemService.getRoleByEnname(enname) == null) {
			return ""true"";
		}
		return ""false"";
	}
}",class,
"	@RequiresPermissions(""sys:role:view"")
	@RequestMapping(value = {""list"", """"})
	public String list(Role role, Model model) {
		List<Role> list = systemService.findAllRole();
		model.addAttribute(""list"", list);
		return ""modules/sys/roleList"";
	}",method,
"	@RequiresPermissions(""sys:role:view"")
	@RequestMapping(value = ""form"")
	public String form(Role role, Model model) {
		if (role.getOffice()==null){
			role.setOffice(UserUtils.getUser().getOffice());
		}
		model.addAttribute(""role"", role);
		model.addAttribute(""menuList"", systemService.findAllMenu());
		model.addAttribute(""officeList"", officeService.findAll());
		return ""modules/sys/roleForm"";
	}",method,
"	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""save"")
	public String save(Role role, Model model, RedirectAttributes redirectAttributes) {
		if(!UserUtils.getUser().isAdmin()&&role.getSysData().equals(Global.YES)){
			addMessage(redirectAttributes, ""越权操作，只有超级管理员才能修改此数据！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
		if (!beanValidator(model, role)){
			return form(role, model);
		}
		if (!""true"".equals(checkName(role.getOldName(), role.getName()))){
			addMessage(model, ""保存角色'"" + role.getName() + ""'失败, 角色名已存在"");
			return form(role, model);
		}
		if (!""true"".equals(checkEnname(role.getOldEnname(), role.getEnname()))){
			addMessage(model, ""保存角色'"" + role.getName() + ""'失败, 英文名已存在"");
			return form(role, model);
		}
		systemService.saveRole(role);
		addMessage(redirectAttributes, ""保存角色'"" + role.getName() + ""'成功"");
		return ""redirect:"" + adminPath + ""/sys/role/?repage"";
	}",method,
"	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""delete"")
	public String delete(Role role, RedirectAttributes redirectAttributes) {
		if(!UserUtils.getUser().isAdmin() && role.getSysData().equals(Global.YES)){
			addMessage(redirectAttributes, ""越权操作，只有超级管理员才能修改此数据！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/?repage"";
		}
//		if (Role.isAdmin(id)){
//			addMessage(redirectAttributes, ""删除角色失败, 不允许内置角色或编号空"");
////		}else if (UserUtils.getUser().getRoleIdList().contains(id)){
////			addMessage(redirectAttributes, ""删除角色失败, 不能删除当前用户所在角色"");
//		}else{
			systemService.deleteRole(role);
			addMessage(redirectAttributes, ""删除角色成功"");
//		}
		return ""redirect:"" + adminPath + ""/sys/role/?repage"";
	}",method,
"	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""assign"")
	public String assign(Role role, Model model) {
		List<User> userList = systemService.findUser(new User(new Role(role.getId())));
		model.addAttribute(""userList"", userList);
		return ""modules/sys/roleAssign"";
	}",method,
"	@RequiresPermissions(""sys:role:view"")
	@RequestMapping(value = ""usertorole"")
	public String selectUserToRole(Role role, Model model) {
		List<User> userList = systemService.findUser(new User(new Role(role.getId())));
		model.addAttribute(""role"", role);
		model.addAttribute(""userList"", userList);
		model.addAttribute(""selectIds"", Collections3.extractToString(userList, ""name"", "",""));
		model.addAttribute(""officeList"", officeService.findAll());
		return ""modules/sys/selectUserToRole"";
	}",method,
"	@RequiresPermissions(""sys:role:view"")
	@ResponseBody
	@RequestMapping(value = ""users"")
	public List<Map<String, Object>> users(String officeId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		User user = new User();
		user.setOffice(new Office(officeId));
		Page<User> page = systemService.findUser(new Page<User>(1, -1), user);
		for (User e : page.getList()) {
			Map<String, Object> map = Maps.newHashMap();
			map.put(""id"", e.getId());
			map.put(""pId"", 0);
			map.put(""name"", e.getName());
			mapList.add(map);			
		}
		return mapList;
	}",method,
"	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""outrole"")
	public String outrole(String userId, String roleId, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+roleId;
		}
		Role role = systemService.getRole(roleId);
		User user = systemService.getUser(userId);
		if (UserUtils.getUser().getId().equals(userId)) {
			addMessage(redirectAttributes, ""无法从角色【"" + role.getName() + ""】中移除用户【"" + user.getName() + ""】自己！"");
		}else {
			if (user.getRoleList().size() <= 1){
				addMessage(redirectAttributes, ""用户【"" + user.getName() + ""】从角色【"" + role.getName() + ""】中移除失败！这已经是该用户的唯一角色，不能移除。"");
			}else{
				Boolean flag = systemService.outUserInRole(role, user);
				if (!flag) {
					addMessage(redirectAttributes, ""用户【"" + user.getName() + ""】从角色【"" + role.getName() + ""】中移除失败！"");
				}else {
					addMessage(redirectAttributes, ""用户【"" + user.getName() + ""】从角色【"" + role.getName() + ""】中移除成功！"");
				}
			}		
		}
		return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+role.getId();
	}",method,
"				if (!flag) {
					addMessage(redirectAttributes, ""用户【"" + user.getName() + ""】从角色【"" + role.getName() + ""】中移除失败！"");
				}",method,
"	@RequiresPermissions(""sys:role:edit"")
	@RequestMapping(value = ""assignrole"")
	public String assignRole(Role role, String[] idsArr, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, ""演示模式，不允许操作！"");
			return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+role.getId();
		}
		StringBuilder msg = new StringBuilder();
		int newNum = 0;
		for (int i = 0; i < idsArr.length; i++) {
			User user = systemService.assignUserToRole(role, systemService.getUser(idsArr[i]));
			if (null != user) {
				msg.append(""<br/>新增用户【"" + user.getName() + ""】到角色【"" + role.getName() + ""】！"");
				newNum++;
			}
		}
		addMessage(redirectAttributes, ""已成功分配 ""+newNum+"" 个用户""+msg);
		return ""redirect:"" + adminPath + ""/sys/role/assign?id=""+role.getId();
	}",method,
"		for (int i = 0; i < idsArr.length; i++) {
			User user = systemService.assignUserToRole(role, systemService.getUser(idsArr[i]));
			if (null != user) {
				msg.append(""<br/>新增用户【"" + user.getName() + ""】到角色【"" + role.getName() + ""】！"");
				newNum++;
			}
		}",method,
"			if (null != user) {
				msg.append(""<br/>新增用户【"" + user.getName() + ""】到角色【"" + role.getName() + ""】！"");
				newNum++;
			}",method,
"	@RequiresPermissions(""user"")
	@ResponseBody
	@RequestMapping(value = ""checkName"")
	public String checkName(String oldName, String name) {
		if (name!=null && name.equals(oldName)) {
			return ""true"";
		} else if (name!=null && systemService.getRoleByName(name) == null) {
			return ""true"";
		}
		return ""false"";
	}",method,
"	@RequiresPermissions(""user"")
	@ResponseBody
	@RequestMapping(value = ""checkEnname"")
	public String checkEnname(String oldEnname, String enname) {
		if (enname!=null && enname.equals(oldEnname)) {
			return ""true"";
		} else if (enname!=null && systemService.getRoleByEnname(enname) == null) {
			return ""true"";
		}
		return ""false"";
	}",method,
"public class NonStaticConfigInnerClassesTestCase {
	// Intentionally not static
	@Configuration
	class FooConfig {
	}
	// Intentionally not static
	@Configuration
	class BarConfig {
	}
}",class,
"	class FooConfig {
	}",class,
"	class BarConfig {
	}",class,
"public class PlainVanillaFooConfigInnerClassTestCase {
	// Intentionally NOT annotated with @Configuration
	static class FooConfig {
	}
}",class,
"	static class FooConfig {
	}",class,
"public class ApplicationsPageHandler implements PageHandler {
    public Page handle(URL url) {
        Set<String> applications = RegistryContainer.getInstance().getApplications();
        List<List<String>> rows = new ArrayList<List<String>>();
        int providersCount = 0;
        int consumersCount = 0;
        int efferentCount = 0;
        int afferentCount = 0;
        if (applications != null && applications.size() > 0) {
            for (String application : applications) {
                List<String> row = new ArrayList<String>();
                row.add(application);
                List<URL> providers = RegistryContainer.getInstance().getProvidersByApplication(application);
                List<URL> consumers = RegistryContainer.getInstance().getConsumersByApplication(application);
                if (providers != null && providers.size() > 0
                        || consumers != null && consumers.size() > 0) {
                    URL provider = (providers != null && providers.size() > 0 ? providers.iterator().next() : consumers.iterator().next());
                    row.add(provider.getParameter(""owner"", """") + (provider.hasParameter(""organization"") ? "" ("" + provider.getParameter(""organization"") + "")"" : """"));
                } else {
                    row.add("""");
                }
                int providersSize = providers == null ? 0 : providers.size();
                providersCount += providersSize;
                row.add(providersSize == 0 ? ""<font color=\""blue\"">No provider</font>"" : ""<a href=\""providers.html?application="" + application + ""\"">Providers("" + providersSize + "")</a>"");
                int consumersSize = consumers == null ? 0 : consumers.size();
                consumersCount += consumersSize;
                row.add(consumersSize == 0 ? ""<font color=\""blue\"">No consumer</font>"" : ""<a href=\""consumers.html?application="" + application + ""\"">Consumers("" + consumersSize + "")</a>"");
                Set<String> efferents = RegistryContainer.getInstance().getDependencies(application, false);
                int efferentSize = efferents == null ? 0 : efferents.size();
                efferentCount += efferentSize;
                row.add(efferentSize == 0 ? ""<font color=\""blue\"">No dependency</font>"" : ""<a href=\""dependencies.html?application="" + application + ""\"">Depends On("" + efferentSize + "")</a>"");
                Set<String> afferents = RegistryContainer.getInstance().getDependencies(application, true);
                int afferentSize = afferents == null ? 0 : afferents.size();
                afferentCount += afferentSize;
                row.add(afferentSize == 0 ? ""<font color=\""blue\"">No used</font>"" : ""<a href=\""dependencies.html?application="" + application + ""&reverse=true\"">Used By("" + afferentSize + "")</a>"");
                rows.add(row);
            }
        }
        return new Page(""Applications"", ""Applications ("" + rows.size() + "")"",
                new String[]{""Application Name:"", ""Owner"", ""Providers("" + providersCount + "")"", ""Consumers("" + consumersCount + "")"", ""Depends On("" + efferentCount + "")"", ""Used By("" + afferentCount + "")""}, rows);
    }
}",class,
"    public Page handle(URL url) {
        Set<String> applications = RegistryContainer.getInstance().getApplications();
        List<List<String>> rows = new ArrayList<List<String>>();
        int providersCount = 0;
        int consumersCount = 0;
        int efferentCount = 0;
        int afferentCount = 0;
        if (applications != null && applications.size() > 0) {
            for (String application : applications) {
                List<String> row = new ArrayList<String>();
                row.add(application);
                List<URL> providers = RegistryContainer.getInstance().getProvidersByApplication(application);
                List<URL> consumers = RegistryContainer.getInstance().getConsumersByApplication(application);
                if (providers != null && providers.size() > 0
                        || consumers != null && consumers.size() > 0) {
                    URL provider = (providers != null && providers.size() > 0 ? providers.iterator().next() : consumers.iterator().next());
                    row.add(provider.getParameter(""owner"", """") + (provider.hasParameter(""organization"") ? "" ("" + provider.getParameter(""organization"") + "")"" : """"));
                } else {
                    row.add("""");
                }
                int providersSize = providers == null ? 0 : providers.size();
                providersCount += providersSize;
                row.add(providersSize == 0 ? ""<font color=\""blue\"">No provider</font>"" : ""<a href=\""providers.html?application="" + application + ""\"">Providers("" + providersSize + "")</a>"");
                int consumersSize = consumers == null ? 0 : consumers.size();
                consumersCount += consumersSize;
                row.add(consumersSize == 0 ? ""<font color=\""blue\"">No consumer</font>"" : ""<a href=\""consumers.html?application="" + application + ""\"">Consumers("" + consumersSize + "")</a>"");
                Set<String> efferents = RegistryContainer.getInstance().getDependencies(application, false);
                int efferentSize = efferents == null ? 0 : efferents.size();
                efferentCount += efferentSize;
                row.add(efferentSize == 0 ? ""<font color=\""blue\"">No dependency</font>"" : ""<a href=\""dependencies.html?application="" + application + ""\"">Depends On("" + efferentSize + "")</a>"");
                Set<String> afferents = RegistryContainer.getInstance().getDependencies(application, true);
                int afferentSize = afferents == null ? 0 : afferents.size();
                afferentCount += afferentSize;
                row.add(afferentSize == 0 ? ""<font color=\""blue\"">No used</font>"" : ""<a href=\""dependencies.html?application="" + application + ""&reverse=true\"">Used By("" + afferentSize + "")</a>"");
                rows.add(row);
            }
        }
        return new Page(""Applications"", ""Applications ("" + rows.size() + "")"",
                new String[]{""Application Name:"", ""Owner"", ""Providers("" + providersCount + "")"", ""Consumers("" + consumersCount + "")"", ""Depends On("" + efferentCount + "")"", ""Used By("" + afferentCount + "")""}, rows);
    }",method,
"            for (String application : applications) {
                List<String> row = new ArrayList<String>();
                row.add(application);
                List<URL> providers = RegistryContainer.getInstance().getProvidersByApplication(application);
                List<URL> consumers = RegistryContainer.getInstance().getConsumersByApplication(application);
                if (providers != null && providers.size() > 0
                        || consumers != null && consumers.size() > 0) {
                    URL provider = (providers != null && providers.size() > 0 ? providers.iterator().next() : consumers.iterator().next());
                    row.add(provider.getParameter(""owner"", """") + (provider.hasParameter(""organization"") ? "" ("" + provider.getParameter(""organization"") + "")"" : """"));
                } else {
                    row.add("""");
                }
                int providersSize = providers == null ? 0 : providers.size();
                providersCount += providersSize;
                row.add(providersSize == 0 ? ""<font color=\""blue\"">No provider</font>"" : ""<a href=\""providers.html?application="" + application + ""\"">Providers("" + providersSize + "")</a>"");
                int consumersSize = consumers == null ? 0 : consumers.size();
                consumersCount += consumersSize;
                row.add(consumersSize == 0 ? ""<font color=\""blue\"">No consumer</font>"" : ""<a href=\""consumers.html?application="" + application + ""\"">Consumers("" + consumersSize + "")</a>"");
                Set<String> efferents = RegistryContainer.getInstance().getDependencies(application, false);
                int efferentSize = efferents == null ? 0 : efferents.size();
                efferentCount += efferentSize;
                row.add(efferentSize == 0 ? ""<font color=\""blue\"">No dependency</font>"" : ""<a href=\""dependencies.html?application="" + application + ""\"">Depends On("" + efferentSize + "")</a>"");
                Set<String> afferents = RegistryContainer.getInstance().getDependencies(application, true);
                int afferentSize = afferents == null ? 0 : afferents.size();
                afferentCount += afferentSize;
                row.add(afferentSize == 0 ? ""<font color=\""blue\"">No used</font>"" : ""<a href=\""dependencies.html?application="" + application + ""&reverse=true\"">Used By("" + afferentSize + "")</a>"");
                rows.add(row);
            }",method,
"public class XPathConstants {
    private XPathConstants() { }
    public static final QName NUMBER = new QName(""http://www.w3.org/1999/XSL/Transform"", ""NUMBER"");
    public static final QName STRING = new QName(""http://www.w3.org/1999/XSL/Transform"", ""STRING"");
    public static final QName BOOLEAN = new QName(""http://www.w3.org/1999/XSL/Transform"", ""BOOLEAN"");
    public static final QName NODESET = new QName(""http://www.w3.org/1999/XSL/Transform"", ""NODESET"");
    public static final QName NODE = new QName(""http://www.w3.org/1999/XSL/Transform"", ""NODE"");
    public static final String DOM_OBJECT_MODEL = ""http://java.sun.com/jaxp/xpath/dom"";
}",class,
    private XPathConstants() { },method,
"  public void testRenamePackage() {
    renamePackage(""pack"", ""renamedPack"");
    PsiClass psiClass = myJavaFacade.findClass(""renamedPack.MyInterface1"", GlobalSearchScope.allScope(myProject));
    assertNotNull(psiClass);
  }",method,
"  public void testReplaceRootWithSubRoot1() {
    final PsiClass aClass = myJavaFacade.findClass(""pack.MyInterface1"", GlobalSearchScope.allScope(myProject));
    final PsiFile psiFile = aClass.getContainingFile();
    ((PsiJavaFile) psiFile).getClasses();
    psiFile.getText();
    assertNotNull(aClass);
    final VirtualFile newSourceRoot = psiFile.getVirtualFile().getParent();
    replaceSourceRoot(newSourceRoot);
    assertEquals(""MyInterface1"", aClass.getName());
  }",method,
"  public void testReplaceRootWithSubRoot2() {
    final PsiClass aClass = myJavaFacade.findClass(""pack.MyInterface1"", GlobalSearchScope.allScope(myProject));
    assertNotNull(aClass);
    final VirtualFile newSourceRoot = aClass.getContainingFile().getVirtualFile().getParent();
    replaceSourceRoot(newSourceRoot);
    assertEquals(""MyInterface1"", aClass.getName());
  }",method,
"  private void replaceSourceRoot(final VirtualFile newSourceRoot) {
    ApplicationManager.getApplication().runWriteAction(
      () -> {
        final ModifiableRootModel rootModel = ModuleRootManager.getInstance(myModule).getModifiableModel();
        final ContentEntry[] content = rootModel.getContentEntries();
        boolean contentToChangeFound = false;
        for (ContentEntry contentEntry : content) {
          final SourceFolder[] sourceFolders = contentEntry.getSourceFolders();
          for (SourceFolder sourceFolder : sourceFolders) {
            contentEntry.removeSourceFolder(sourceFolder);
          }
          final VirtualFile contentRoot = contentEntry.getFile();
          if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, newSourceRoot, false)) {
            contentEntry.addSourceFolder(newSourceRoot, false);
            contentToChangeFound = true;
          }
        }
        assertTrue(contentToChangeFound);
        rootModel.commit();
      }
    );
  }",method,
"        for (ContentEntry contentEntry : content) {
          final SourceFolder[] sourceFolders = contentEntry.getSourceFolders();
          for (SourceFolder sourceFolder : sourceFolders) {
            contentEntry.removeSourceFolder(sourceFolder);
          }
          final VirtualFile contentRoot = contentEntry.getFile();
          if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, newSourceRoot, false)) {
            contentEntry.addSourceFolder(newSourceRoot, false);
            contentToChangeFound = true;
          }
        }",method,
"          for (SourceFolder sourceFolder : sourceFolders) {
            contentEntry.removeSourceFolder(sourceFolder);
          }",method,
"  public void testParentIdAssert() {
    PsiClass jpanelClass = myJavaFacade.findClass(""javax.swing.JPanel"", GlobalSearchScope.allScope(myProject));
    PsiClass[] inheritors = ClassInheritorsSearch.search(jpanelClass, GlobalSearchScope.projectScope(myProject), true).toArray(PsiClass.EMPTY_ARRAY);
    assertEquals(2, inheritors.length);
    assertTrue(inheritors[0] instanceof PsiAnonymousClass || inheritors[1] instanceof PsiAnonymousClass);
    PsiClass nonAnonClass = inheritors[0] instanceof PsiAnonymousClass ? inheritors[1] : inheritors[0];
    PsiMethod[] methods = nonAnonClass.getMethods();
    assertEquals(1, methods.length);
    PsiTypeElement newType = myJavaFacade.getElementFactory().createTypeElement(PsiType.FLOAT);
    ApplicationManager.getApplication().runWriteAction(() -> {
      methods[0].getReturnTypeElement().replace(newType);
    });
  }",method,
"public class Lookup {
    // LookupFlag bit enumeration
    public static final int IGNORE_BASE_GLYPHS = 0x0002;
    public static final int IGNORE_BASE_LIGATURES = 0x0004;
    public static final int IGNORE_BASE_MARKS = 0x0008;
    public static final int MARK_ATTACHMENT_TYPE = 0xFF00;
    private int type;
    private int flag;
    private int subTableCount;
    private int[] subTableOffsets;
    private LookupSubtable[] subTables;
    public Lookup(LookupSubtableFactory factory, RandomAccessFile raf, int offset)
    throws IOException {
        raf.seek(offset);
        type = raf.readUnsignedShort();
        flag = raf.readUnsignedShort();
        subTableCount = raf.readUnsignedShort();
        subTableOffsets = new int[subTableCount];
        subTables = new LookupSubtable[subTableCount];
        for (int i = 0; i < subTableCount; i++) {
            subTableOffsets[i] = raf.readUnsignedShort();
        }
        for (int i = 0; i < subTableCount; i++) {
            subTables[i] = factory.read(type, raf, offset + subTableOffsets[i]);
        }
    }
    public int getType() {
        return type;
    }
    public int getSubtableCount() {
        return subTableCount;
    }
    public LookupSubtable getSubtable(int i) {
        return subTables[i];
    }
}",class,
"    public Lookup(LookupSubtableFactory factory, RandomAccessFile raf, int offset)
    throws IOException {
        raf.seek(offset);
        type = raf.readUnsignedShort();
        flag = raf.readUnsignedShort();
        subTableCount = raf.readUnsignedShort();
        subTableOffsets = new int[subTableCount];
        subTables = new LookupSubtable[subTableCount];
        for (int i = 0; i < subTableCount; i++) {
            subTableOffsets[i] = raf.readUnsignedShort();
        }
        for (int i = 0; i < subTableCount; i++) {
            subTables[i] = factory.read(type, raf, offset + subTableOffsets[i]);
        }
    }",method,
"        for (int i = 0; i < subTableCount; i++) {
            subTableOffsets[i] = raf.readUnsignedShort();
        }",method,
"        for (int i = 0; i < subTableCount; i++) {
            subTables[i] = factory.read(type, raf, offset + subTableOffsets[i]);
        }",method,
"    public int getType() {
        return type;
    }",method,
"    public int getSubtableCount() {
        return subTableCount;
    }",method,
"    public LookupSubtable getSubtable(int i) {
        return subTables[i];
    }",method,
"public class MaterialMultiSelectListPreference extends MultiSelectListPreference {
  private Context context;
  private MaterialDialog mDialog;
  public MaterialMultiSelectListPreference(Context context) {
    super(context);
    init(context, null);
  }
  public MaterialMultiSelectListPreference(Context context, AttributeSet attrs) {
    super(context, attrs);
    init(context, attrs);
  }
  @TargetApi(Build.VERSION_CODES.LOLLIPOP)
  public MaterialMultiSelectListPreference(Context context, AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
    init(context, attrs);
  }
  @TargetApi(Build.VERSION_CODES.LOLLIPOP)
  public MaterialMultiSelectListPreference(
      Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
    super(context, attrs, defStyleAttr, defStyleRes);
    init(context, attrs);
  }
  @Override
  public void setEntries(CharSequence[] entries) {
    super.setEntries(entries);
    if (mDialog != null) {
      mDialog.setItems(entries);
    }
  }
  private void init(Context context, AttributeSet attrs) {
    this.context = context;
    PrefUtil.setLayoutResource(context, this, attrs);
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {
      setWidgetLayoutResource(0);
    }
  }
  @Override
  public Dialog getDialog() {
    return mDialog;
  }
  @Override
  protected void showDialog(Bundle state) {
    List<Integer> indices = new ArrayList<>();
    for (String s : getValues()) {
      int index = findIndexOfValue(s);
      if (index >= 0) {
        indices.add(findIndexOfValue(s));
      }
    }
    MaterialDialog.Builder builder =
        new MaterialDialog.Builder(context)
            .title(getDialogTitle())
            .icon(getDialogIcon())
            .negativeText(getNegativeButtonText())
            .positiveText(getPositiveButtonText())
            .onAny(
                new MaterialDialog.SingleButtonCallback() {
                  @Override
                  public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                    switch (which) {
                      default:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_POSITIVE);
                        break;
                      case NEUTRAL:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEUTRAL);
                        break;
                      case NEGATIVE:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEGATIVE);
                        break;
                    }
                  }
                })
            .items(getEntries())
            .itemsCallbackMultiChoice(
                indices.toArray(new Integer[indices.size()]),
                new MaterialDialog.ListCallbackMultiChoice() {
                  @Override
                  public boolean onSelection(
                      MaterialDialog dialog, Integer[] which, CharSequence[] text) {
                    onClick(null, DialogInterface.BUTTON_POSITIVE);
                    dialog.dismiss();
                    final Set<String> values = new HashSet<>();
                    for (int i : which) {
                      values.add(getEntryValues()[i].toString());
                    }
                    if (callChangeListener(values)) {
                      setValues(values);
                    }
                    return true;
                  }
                })
            .dismissListener(this);
    final View contentView = onCreateDialogView();
    if (contentView != null) {
      onBindDialogView(contentView);
      builder.customView(contentView, false);
    } else {
      builder.content(getDialogMessage());
    }
    PrefUtil.registerOnActivityDestroyListener(this, this);
    mDialog = builder.build();
    if (state != null) {
      mDialog.onRestoreInstanceState(state);
    }
    mDialog.show();
  }
  @Override
  public void onDismiss(DialogInterface dialog) {
    super.onDismiss(dialog);
    PrefUtil.unregisterOnActivityDestroyListener(this, this);
  }
  @Override
  public void onActivityDestroy() {
    super.onActivityDestroy();
    if (mDialog != null && mDialog.isShowing()) {
      mDialog.dismiss();
    }
  }
  @Override
  protected Parcelable onSaveInstanceState() {
    final Parcelable superState = super.onSaveInstanceState();
    Dialog dialog = getDialog();
    if (dialog == null || !dialog.isShowing()) {
      return superState;
    }
    final SavedState myState = new SavedState(superState);
    myState.isDialogShowing = true;
    myState.dialogBundle = dialog.onSaveInstanceState();
    return myState;
  }
  @Override
  protected void onRestoreInstanceState(Parcelable state) {
    if (state == null || !state.getClass().equals(SavedState.class)) {
      // Didn't save state for us in onSaveInstanceState
      super.onRestoreInstanceState(state);
      return;
    }
    SavedState myState = (SavedState) state;
    super.onRestoreInstanceState(myState.getSuperState());
    if (myState.isDialogShowing) {
      showDialog(myState.dialogBundle);
    }
  }
  // From DialogPreference
  private static class SavedState extends BaseSavedState {
    public static final Parcelable.Creator<SavedState> CREATOR =
        new Parcelable.Creator<SavedState>() {
          public SavedState createFromParcel(Parcel in) {
            return new SavedState(in);
          }
          public SavedState[] newArray(int size) {
            return new SavedState[size];
          }
        };
    boolean isDialogShowing;
    Bundle dialogBundle;
    SavedState(Parcel source) {
      super(source);
      isDialogShowing = source.readInt() == 1;
      dialogBundle = source.readBundle();
    }
    SavedState(Parcelable superState) {
      super(superState);
    }
    @Override
    public void writeToParcel(@NonNull Parcel dest, int flags) {
      super.writeToParcel(dest, flags);
      dest.writeInt(isDialogShowing ? 1 : 0);
      dest.writeBundle(dialogBundle);
    }
  }
}",class,
"  private static class SavedState extends BaseSavedState {
    public static final Parcelable.Creator<SavedState> CREATOR =
        new Parcelable.Creator<SavedState>() {
          public SavedState createFromParcel(Parcel in) {
            return new SavedState(in);
          }
          public SavedState[] newArray(int size) {
            return new SavedState[size];
          }
        };
    boolean isDialogShowing;
    Bundle dialogBundle;
    SavedState(Parcel source) {
      super(source);
      isDialogShowing = source.readInt() == 1;
      dialogBundle = source.readBundle();
    }
    SavedState(Parcelable superState) {
      super(superState);
    }
    @Override
    public void writeToParcel(@NonNull Parcel dest, int flags) {
      super.writeToParcel(dest, flags);
      dest.writeInt(isDialogShowing ? 1 : 0);
      dest.writeBundle(dialogBundle);
    }
  }",class,
"  public MaterialMultiSelectListPreference(Context context) {
    super(context);
    init(context, null);
  }",method,
"  public MaterialMultiSelectListPreference(Context context, AttributeSet attrs) {
    super(context, attrs);
    init(context, attrs);
  }",method,
"  @TargetApi(Build.VERSION_CODES.LOLLIPOP)
  public MaterialMultiSelectListPreference(Context context, AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
    init(context, attrs);
  }",method,
"  @TargetApi(Build.VERSION_CODES.LOLLIPOP)
  public MaterialMultiSelectListPreference(
      Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
    super(context, attrs, defStyleAttr, defStyleRes);
    init(context, attrs);
  }",method,
"  @Override
  public void setEntries(CharSequence[] entries) {
    super.setEntries(entries);
    if (mDialog != null) {
      mDialog.setItems(entries);
    }
  }",method,
"    if (mDialog != null) {
      mDialog.setItems(entries);
    }",method,
"  private void init(Context context, AttributeSet attrs) {
    this.context = context;
    PrefUtil.setLayoutResource(context, this, attrs);
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {
      setWidgetLayoutResource(0);
    }
  }",method,
"    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {
      setWidgetLayoutResource(0);
    }",method,
"  @Override
  public Dialog getDialog() {
    return mDialog;
  }",method,
"  @Override
  protected void showDialog(Bundle state) {
    List<Integer> indices = new ArrayList<>();
    for (String s : getValues()) {
      int index = findIndexOfValue(s);
      if (index >= 0) {
        indices.add(findIndexOfValue(s));
      }
    }
    MaterialDialog.Builder builder =
        new MaterialDialog.Builder(context)
            .title(getDialogTitle())
            .icon(getDialogIcon())
            .negativeText(getNegativeButtonText())
            .positiveText(getPositiveButtonText())
            .onAny(
                new MaterialDialog.SingleButtonCallback() {
                  @Override
                  public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                    switch (which) {
                      default:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_POSITIVE);
                        break;
                      case NEUTRAL:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEUTRAL);
                        break;
                      case NEGATIVE:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEGATIVE);
                        break;
                    }
                  }
                })
            .items(getEntries())
            .itemsCallbackMultiChoice(
                indices.toArray(new Integer[indices.size()]),
                new MaterialDialog.ListCallbackMultiChoice() {
                  @Override
                  public boolean onSelection(
                      MaterialDialog dialog, Integer[] which, CharSequence[] text) {
                    onClick(null, DialogInterface.BUTTON_POSITIVE);
                    dialog.dismiss();
                    final Set<String> values = new HashSet<>();
                    for (int i : which) {
                      values.add(getEntryValues()[i].toString());
                    }
                    if (callChangeListener(values)) {
                      setValues(values);
                    }
                    return true;
                  }
                })
            .dismissListener(this);
    final View contentView = onCreateDialogView();
    if (contentView != null) {
      onBindDialogView(contentView);
      builder.customView(contentView, false);
    } else {
      builder.content(getDialogMessage());
    }
    PrefUtil.registerOnActivityDestroyListener(this, this);
    mDialog = builder.build();
    if (state != null) {
      mDialog.onRestoreInstanceState(state);
    }
    mDialog.show();
  }",method,
"      if (index >= 0) {
        indices.add(findIndexOfValue(s));
      }",method,
"            .onAny(
                new MaterialDialog.SingleButtonCallback() {
                  @Override
                  public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                    switch (which) {
                      default:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_POSITIVE);
                        break;
                      case NEUTRAL:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEUTRAL);
                        break;
                      case NEGATIVE:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEGATIVE);
                        break;
                    }
                  }
                }",method,
"                  @Override
                  public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                    switch (which) {
                      default:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_POSITIVE);
                        break;
                      case NEUTRAL:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEUTRAL);
                        break;
                      case NEGATIVE:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEGATIVE);
                        break;
                    }
                  }",method,
"                    switch (which) {
                      default:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_POSITIVE);
                        break;
                      case NEUTRAL:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEUTRAL);
                        break;
                      case NEGATIVE:
                        MaterialMultiSelectListPreference.this.onClick(
                            dialog, DialogInterface.BUTTON_NEGATIVE);
                        break;
                    }",method,
"                new MaterialDialog.ListCallbackMultiChoice() {
                  @Override
                  public boolean onSelection(
                      MaterialDialog dialog, Integer[] which, CharSequence[] text) {
                    onClick(null, DialogInterface.BUTTON_POSITIVE);
                    dialog.dismiss();
                    final Set<String> values = new HashSet<>();
                    for (int i : which) {
                      values.add(getEntryValues()[i].toString());
                    }
                    if (callChangeListener(values)) {
                      setValues(values);
                    }
                    return true;
                  }
                }",method,
"                  @Override
                  public boolean onSelection(
                      MaterialDialog dialog, Integer[] which, CharSequence[] text) {
                    onClick(null, DialogInterface.BUTTON_POSITIVE);
                    dialog.dismiss();
                    final Set<String> values = new HashSet<>();
                    for (int i : which) {
                      values.add(getEntryValues()[i].toString());
                    }
                    if (callChangeListener(values)) {
                      setValues(values);
                    }
                    return true;
                  }",method,
"                    for (int i : which) {
                      values.add(getEntryValues()[i].toString());
                    }",method,
"    if (contentView != null) {
      onBindDialogView(contentView);
      builder.customView(contentView, false);
    }",method,
"    if (state != null) {
      mDialog.onRestoreInstanceState(state);
    }",method,
"  @Override
  public void onDismiss(DialogInterface dialog) {
    super.onDismiss(dialog);
    PrefUtil.unregisterOnActivityDestroyListener(this, this);
  }",method,
"  @Override
  public void onActivityDestroy() {
    super.onActivityDestroy();
    if (mDialog != null && mDialog.isShowing()) {
      mDialog.dismiss();
    }
  }",method,
"  @Override
  protected Parcelable onSaveInstanceState() {
    final Parcelable superState = super.onSaveInstanceState();
    Dialog dialog = getDialog();
    if (dialog == null || !dialog.isShowing()) {
      return superState;
    }
    final SavedState myState = new SavedState(superState);
    myState.isDialogShowing = true;
    myState.dialogBundle = dialog.onSaveInstanceState();
    return myState;
  }",method,
"  @Override
  protected void onRestoreInstanceState(Parcelable state) {
    if (state == null || !state.getClass().equals(SavedState.class)) {
      // Didn't save state for us in onSaveInstanceState
      super.onRestoreInstanceState(state);
      return;
    }
    SavedState myState = (SavedState) state;
    super.onRestoreInstanceState(myState.getSuperState());
    if (myState.isDialogShowing) {
      showDialog(myState.dialogBundle);
    }
  }",method,
"    if (myState.isDialogShowing) {
      showDialog(myState.dialogBundle);
    }",method,
"          public SavedState createFromParcel(Parcel in) {
            return new SavedState(in);
          }",method,
"          public SavedState[] newArray(int size) {
            return new SavedState[size];
          }",method,
"    SavedState(Parcel source) {
      super(source);
      isDialogShowing = source.readInt() == 1;
      dialogBundle = source.readBundle();
    }",method,
"    SavedState(Parcelable superState) {
      super(superState);
    }",method,
"    @Override
    public void writeToParcel(@NonNull Parcel dest, int flags) {
      super.writeToParcel(dest, flags);
      dest.writeInt(isDialogShowing ? 1 : 0);
      dest.writeBundle(dialogBundle);
    }",method,
"public class PaginaBean {
    Pagina pagina;
    public PaginaBean() {
        pagina = new Pagina();
    }
    public void caixaAlta() {
        //Atribui o valor de nome como maiusculo para nome2
        pagina.setNome2(pagina.getNome().toUpperCase());
    }
    public void mensagemOK() {
        //Captura mensagens e retorna via Ajax.
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(""Minha primeira mensagem""));
    }
    public Pagina getPagina() {
        return pagina;
    }
    public void setPagina(Pagina pagina) {
        this.pagina = pagina;
    }
}",class,
"public class Pagina {
    private String nome;
    private String nome2;
    public String getNome2() {
        return nome2;
    }
    public void setNome2(String nome2) {
        this.nome2 = nome2;
    }
    public String getNome() {
        return nome;
    }
    public void setNome(String nome) {
        this.nome = nome;
    }
}",class,
"public class HashMap implements Map
{
    private int size;
    private Entry[] buckets;
    public HashMap(int capacity)
    {
        this.buckets = new Entry[capacity];
    }
    public int getCapacity()
    {
        return this.buckets.length;
    }
    public boolean isFull ()
    {
        return size==getCapacity();
    }
    @Override
    public boolean put(int key, long value)
    {
        int index = index(key);
        if (isFull())
            throw new RuntimeException(""HashMap is full"");//бросаем исключение в случае заполнения таблицы
        if (buckets[index] == null)//если ячейка пустая - делаем в нее запись
        {
            buckets[index] = new Entry(key, value);
            size++;
            return true;
        }
        for (int i = 0; i < getCapacity(); i++)
        {
            if (buckets[i] != null && buckets[i].getKey() == key)
            {
                buckets[i] = new Entry(key, value);
                return true;
            }
            if (buckets[i] == null)
            {
                buckets[i] = new Entry(key, value);
                size++;
                return true;
            }
        }
        return false;
    }
    public Entry[] getBuckets()
    {
        return buckets;
    }
    @Override
    public long get(int key)
    {
        int index = index(key);
        if (buckets[index].getKey() == key && buckets[index] != null)//поиск по ключу
        {
            return buckets[index].getValue();
        }
        else//если произошла коллизия - выполняем линейный поиск
        {
            for (int i = 0; i < getCapacity(); i++)
            {
                if (buckets[i] != null && buckets[i].getKey() == key)
                {
                    return buckets[i].getValue();
                }
            }
        }
         throw new RuntimeException(""HashMap doesn't contains entry with such key"");//бросаем исключение в случае НЕобнаружения элемента
         // с указанным ключом
    }
    @Override
    public int size()
    {
        return size;
    }
    private int index(int hash)
    {
        return hash % getCapacity();//определение индекса записи
    }
    protected int hash(int key)
    {
        key ^= (key >>> 20) ^ (key >>> 12);
        return key ^ (key >>> 7) ^ (key >>> 4);
    }
    public static class Entry
    {
        private int key;
        private long value;
        public Entry(int key, long value)
        {
            this.key = key;
            this.value = value;
        }
        public int getKey()
        {
            return key;
        }
        public long getValue()
        {
            return value;
        }
        public void setValue(long value)
        {
            this.value = value;
        }
    }
}",class,
"    public static class Entry
    {
        private int key;
        private long value;
        public Entry(int key, long value)
        {
            this.key = key;
            this.value = value;
        }
        public int getKey()
        {
            return key;
        }
        public long getValue()
        {
            return value;
        }
        public void setValue(long value)
        {
            this.value = value;
        }
    }",class,
"    public PaginaBean() {
        pagina = new Pagina();
    }",method,
"    public void caixaAlta() {
        //Atribui o valor de nome como maiusculo para nome2
        pagina.setNome2(pagina.getNome().toUpperCase());
    }",method,
"    public void mensagemOK() {
        //Captura mensagens e retorna via Ajax.
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(""Minha primeira mensagem""));
    }",method,
"    public Pagina getPagina() {
        return pagina;
    }",method,
"    public void setPagina(Pagina pagina) {
        this.pagina = pagina;
    }",method,
"    public String getNome2() {
        return nome2;
    }",method,
"    public void setNome2(String nome2) {
        this.nome2 = nome2;
    }",method,
"    public String getNome() {
        return nome;
    }",method,
"    public void setNome(String nome) {
        this.nome = nome;
    }",method,
"    public HashMap(int capacity)
    {
        this.buckets = new Entry[capacity];
    }",method,
"    public int getCapacity()
    {
        return this.buckets.length;
    }",method,
"    public boolean isFull ()
    {
        return size==getCapacity();
    }",method,
"    @Override
    public boolean put(int key, long value)
    {
        int index = index(key);
        if (isFull())
            throw new RuntimeException(""HashMap is full"");//бросаем исключение в случае заполнения таблицы
        if (buckets[index] == null)//если ячейка пустая - делаем в нее запись
        {
            buckets[index] = new Entry(key, value);
            size++;
            return true;
        }
        for (int i = 0; i < getCapacity(); i++)
        {
            if (buckets[i] != null && buckets[i].getKey() == key)
            {
                buckets[i] = new Entry(key, value);
                return true;
            }
            if (buckets[i] == null)
            {
                buckets[i] = new Entry(key, value);
                size++;
                return true;
            }
        }
        return false;
    }",method,
"            if (buckets[i] == null)
            {
                buckets[i] = new Entry(key, value);
                size++;
                return true;
            }",method,
"    public Entry[] getBuckets()
    {
        return buckets;
    }",method,
"    @Override
    public long get(int key)
    {
        int index = index(key);
        if (buckets[index].getKey() == key && buckets[index] != null)//поиск по ключу
        {
            return buckets[index].getValue();
        }
        else//если произошла коллизия - выполняем линейный поиск
        {
            for (int i = 0; i < getCapacity(); i++)
            {
                if (buckets[i] != null && buckets[i].getKey() == key)
                {
                    return buckets[i].getValue();
                }
            }
        }
         throw new RuntimeException(""HashMap doesn't contains entry with such key"");//бросаем исключение в случае НЕобнаружения элемента
         // с указанным ключом
    }",method,
"    @Override
    public int size()
    {
        return size;
    }",method,
"    private int index(int hash)
    {
        return hash % getCapacity();//определение индекса записи
    }",method,
"    protected int hash(int key)
    {
        key ^= (key >>> 20) ^ (key >>> 12);
        return key ^ (key >>> 7) ^ (key >>> 4);
    }",method,
"        public Entry(int key, long value)
        {
            this.key = key;
            this.value = value;
        }",method,
