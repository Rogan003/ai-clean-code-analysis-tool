code_snippet,type,score
"    @Override
    public void visitBlock(JCBlock tree) {
      tree.stats = List.nil();
    }",method,
"    @Override
    public void visitVarDef(JCVariableDecl tree) {
      if ((tree.mods.flags & Flags.ENUM) == Flags.ENUM) {
        // javac desugars enum constants into fields during parsing
        super.visitVarDef(tree);
        return;
      }
      // drop field initializers unless the field looks like a JLS ยง4.12.4 constant variable
      if (isConstantVariable(enclClass, tree)) {
        return;
      }
      tree.init = null;
    }",method,
"  private static boolean delegatingConstructor(List<JCStatement> stats) {
    if (stats.isEmpty()) {
      return false;
    }
    JCStatement stat = stats.get(0);
    if (stat.getKind() != Kind.EXPRESSION_STATEMENT) {
      return false;
    }
    JCExpression expr = ((JCExpressionStatement) stat).getExpression();
    if (expr.getKind() != Kind.METHOD_INVOCATION) {
      return false;
    }
    JCExpression method = ((JCMethodInvocation) expr).getMethodSelect();
    Name name;
    switch (method.getKind()) {
      case IDENTIFIER:
        name = ((JCIdent) method).getName();
        break;
      case MEMBER_SELECT:
        name = ((JCFieldAccess) method).getIdentifier();
        break;
      default:
        return false;
    }
    return name.contentEquals(""this"") || name.contentEquals(""super"");
  }",method,
"  private static boolean isFinal(JCClassDecl enclClass, JCVariableDecl tree) {
    if ((tree.mods.flags & Flags.FINAL) == Flags.FINAL) {
      return true;
    }
    if (enclClass != null && (enclClass.mods.flags & (Flags.ANNOTATION | Flags.INTERFACE)) != 0) {
      // Fields in annotation declarations and interfaces are implicitly final
      return true;
    }
    return false;
  }",method,
"  private static boolean isConstantVariable(JCClassDecl enclClass, JCVariableDecl tree) {
    if (!isFinal(enclClass, tree)) {
      return false;
    }
    if (!constantType(tree.getType())) {
      return false;
    }
    if (tree.getInitializer() != null) {
      Boolean result = tree.getInitializer().accept(CONSTANT_VISITOR, null);
      if (result == null || !result) {
        return false;
      }
    }
    return true;
  }",method,
"      if (result == null || !result) {
        return false;
      }",method,
"  private static boolean constantType(JCTree tree) {
    switch (tree.getKind()) {
      case PRIMITIVE_TYPE:
        return true;
      case IDENTIFIER:
        return tree.toString().contentEquals(""String"");
      case MEMBER_SELECT:
        return tree.toString().contentEquals(""java.lang.String"");
      default:
        return false;
    }
  }",method,
"        @Override
        public Boolean visitConditionalExpression(ConditionalExpressionTree node, Void p) {
          return reduce(
              node.getCondition().accept(this, null),
              node.getTrueExpression().accept(this, null),
              node.getFalseExpression().accept(this, null));
        }",method,
"        @Override
        public Boolean visitParenthesized(ParenthesizedTree node, Void p) {
          return node.getExpression().accept(this, null);
        }",method,
"        @Override
        public Boolean visitUnary(UnaryTree node, Void p) {
          switch (node.getKind()) {
            case UNARY_PLUS:
            case UNARY_MINUS:
            case BITWISE_COMPLEMENT:
            case LOGICAL_COMPLEMENT:
              break;
            default:
              // non-constant unary expression
              return false;
          }
          return node.getExpression().accept(this, null);
        }",method,
"        @Override
        public Boolean visitBinary(BinaryTree node, Void p) {
          switch (node.getKind()) {
            case MULTIPLY:
            case DIVIDE:
            case REMAINDER:
            case PLUS:
            case MINUS:
            case LEFT_SHIFT:
            case RIGHT_SHIFT:
            case UNSIGNED_RIGHT_SHIFT:
            case LESS_THAN:
            case LESS_THAN_EQUAL:
            case GREATER_THAN:
            case GREATER_THAN_EQUAL:
            case AND:
            case XOR:
            case OR:
            case CONDITIONAL_AND:
            case CONDITIONAL_OR:
            case EQUAL_TO:
            case NOT_EQUAL_TO:
              break;
            default:
              // non-constant binary expression
              return false;
          }
          return reduce(
              node.getLeftOperand().accept(this, null), node.getRightOperand().accept(this, null));
        }",method,
"        @Override
        public Boolean visitTypeCast(TypeCastTree node, Void p) {
          return reduce(
              constantType((JCTree) node.getType()), node.getExpression().accept(this, null));
        }",method,
"        @Override
        public Boolean visitMemberSelect(MemberSelectTree node, Void p) {
          return node.getExpression().accept(this, null);
        }",method,
"        @Override
        public Boolean visitIdentifier(IdentifierTree node, Void p) {
          // Assume all variables are constant variables. This is a conservative assumption, but
          // it's the best we can do with only syntactic information.
          return true;
        }",method,
"        @Override
        public Boolean visitLiteral(LiteralTree node, Void unused) {
          switch (node.getKind()) {
            case STRING_LITERAL:
            case INT_LITERAL:
            case LONG_LITERAL:
            case FLOAT_LITERAL:
            case DOUBLE_LITERAL:
            case BOOLEAN_LITERAL:
            case CHAR_LITERAL:
              return true;
            default:
              return false;
          }
        }",method,
"        public boolean reduce(Boolean... bx) {
          boolean r = true;
          for (Boolean b : bx) {
            r &= firstNonNull(b, false);
          }
          return r;
        }",method,
"          for (Boolean b : bx) {
            r &= firstNonNull(b, false);
          }",method,
"public class DeleteAclsResponse extends AbstractResponse {
    public static final Logger log = LoggerFactory.getLogger(DeleteAclsResponse.class);
    private final static String FILTER_RESPONSES_KEY_NAME = ""filter_responses"";
    private final static String MATCHING_ACLS_KEY_NAME = ""matching_acls"";
    private static final Schema MATCHING_ACL = new Schema(
            ERROR_CODE,
            ERROR_MESSAGE,
            RESOURCE_TYPE,
            RESOURCE_NAME,
            PRINCIPAL,
            HOST,
            OPERATION,
            PERMISSION_TYPE);
    private static final Schema DELETE_ACLS_RESPONSE_V0 = new Schema(
            THROTTLE_TIME_MS,
            new Field(FILTER_RESPONSES_KEY_NAME,
                    new ArrayOf(new Schema(
                            ERROR_CODE,
                            ERROR_MESSAGE,
                            new Field(MATCHING_ACLS_KEY_NAME, new ArrayOf(MATCHING_ACL), ""The matching ACLs"")))));
    public static Schema[] schemaVersions() {
        return new Schema[]{DELETE_ACLS_RESPONSE_V0};
    }
    public static class AclDeletionResult {
        private final ApiError error;
        private final AclBinding acl;
        public AclDeletionResult(ApiError error, AclBinding acl) {
            this.error = error;
            this.acl = acl;
        }
        public AclDeletionResult(AclBinding acl) {
            this(ApiError.NONE, acl);
        }
        public ApiError error() {
            return error;
        }
        public AclBinding acl() {
            return acl;
        }
        @Override
        public String toString() {
            return ""(error="" + error + "", acl="" + acl + "")"";
        }
    }
    public static class AclFilterResponse {
        private final ApiError error;
        private final Collection<AclDeletionResult> deletions;
        public AclFilterResponse(ApiError error, Collection<AclDeletionResult> deletions) {
            this.error = error;
            this.deletions = deletions;
        }
        public AclFilterResponse(Collection<AclDeletionResult> deletions) {
            this(ApiError.NONE, deletions);
        }
        public ApiError error() {
            return error;
        }
        public Collection<AclDeletionResult> deletions() {
            return deletions;
        }
        @Override
        public String toString() {
            return ""(error="" + error + "", deletions="" + Utils.join(deletions, "","") + "")"";
        }
    }
    private final int throttleTimeMs;
    private final List<AclFilterResponse> responses;
    public DeleteAclsResponse(int throttleTimeMs, List<AclFilterResponse> responses) {
        this.throttleTimeMs = throttleTimeMs;
        this.responses = responses;
    }
    public DeleteAclsResponse(Struct struct) {
        this.throttleTimeMs = struct.get(THROTTLE_TIME_MS);
        this.responses = new ArrayList<>();
        for (Object responseStructObj : struct.getArray(FILTER_RESPONSES_KEY_NAME)) {
            Struct responseStruct = (Struct) responseStructObj;
            ApiError error = new ApiError(responseStruct);
            List<AclDeletionResult> deletions = new ArrayList<>();
            for (Object matchingAclStructObj : responseStruct.getArray(MATCHING_ACLS_KEY_NAME)) {
                Struct matchingAclStruct = (Struct) matchingAclStructObj;
                ApiError matchError = new ApiError(matchingAclStruct);
                AccessControlEntry entry = RequestUtils.aceFromStructFields(matchingAclStruct);
                Resource resource = RequestUtils.resourceFromStructFields(matchingAclStruct);
                deletions.add(new AclDeletionResult(matchError, new AclBinding(resource, entry)));
            }
            this.responses.add(new AclFilterResponse(error, deletions));
        }
    }
    @Override
    protected Struct toStruct(short version) {
        Struct struct = new Struct(ApiKeys.DELETE_ACLS.responseSchema(version));
        struct.set(THROTTLE_TIME_MS, throttleTimeMs);
        List<Struct> responseStructs = new ArrayList<>();
        for (AclFilterResponse response : responses) {
            Struct responseStruct = struct.instance(FILTER_RESPONSES_KEY_NAME);
            response.error.write(responseStruct);
            List<Struct> deletionStructs = new ArrayList<>();
            for (AclDeletionResult deletion : response.deletions()) {
                Struct deletionStruct = responseStruct.instance(MATCHING_ACLS_KEY_NAME);
                deletion.error.write(deletionStruct);
                RequestUtils.resourceSetStructFields(deletion.acl().resource(), deletionStruct);
                RequestUtils.aceSetStructFields(deletion.acl().entry(), deletionStruct);
                deletionStructs.add(deletionStruct);
            }
            responseStruct.set(MATCHING_ACLS_KEY_NAME, deletionStructs.toArray(new Struct[0]));
            responseStructs.add(responseStruct);
        }
        struct.set(FILTER_RESPONSES_KEY_NAME, responseStructs.toArray());
        return struct;
    }
    public int throttleTimeMs() {
        return throttleTimeMs;
    }
    public List<AclFilterResponse> responses() {
        return responses;
    }
    @Override
    public Map<Errors, Integer> errorCounts() {
        Map<Errors, Integer> errorCounts = new HashMap<>();
        for (AclFilterResponse response : responses)
            updateErrorCounts(errorCounts, response.error.error());
        return errorCounts;
    }
    public static DeleteAclsResponse parse(ByteBuffer buffer, short version) {
        return new DeleteAclsResponse(ApiKeys.DELETE_ACLS.responseSchema(version).read(buffer));
    }
    public String toString() {
        return ""(responses="" + Utils.join(responses, "","") + "")"";
    }
}",class,
"    public static class AclDeletionResult {
        private final ApiError error;
        private final AclBinding acl;
        public AclDeletionResult(ApiError error, AclBinding acl) {
            this.error = error;
            this.acl = acl;
        }
        public AclDeletionResult(AclBinding acl) {
            this(ApiError.NONE, acl);
        }
        public ApiError error() {
            return error;
        }
        public AclBinding acl() {
            return acl;
        }
        @Override
        public String toString() {
            return ""(error="" + error + "", acl="" + acl + "")"";
        }
    }",class,
"    public static class AclFilterResponse {
        private final ApiError error;
        private final Collection<AclDeletionResult> deletions;
        public AclFilterResponse(ApiError error, Collection<AclDeletionResult> deletions) {
            this.error = error;
            this.deletions = deletions;
        }
        public AclFilterResponse(Collection<AclDeletionResult> deletions) {
            this(ApiError.NONE, deletions);
        }
        public ApiError error() {
            return error;
        }
        public Collection<AclDeletionResult> deletions() {
            return deletions;
        }
        @Override
        public String toString() {
            return ""(error="" + error + "", deletions="" + Utils.join(deletions, "","") + "")"";
        }
    }",class,
"    public static Schema[] schemaVersions() {
        return new Schema[]{DELETE_ACLS_RESPONSE_V0};
    }",method,
"        public AclDeletionResult(ApiError error, AclBinding acl) {
            this.error = error;
            this.acl = acl;
        }",method,
"        public AclDeletionResult(AclBinding acl) {
            this(ApiError.NONE, acl);
        }",method,
"        public ApiError error() {
            return error;
        }",method,
"        public AclBinding acl() {
            return acl;
        }",method,
"        @Override
        public String toString() {
            return ""(error="" + error + "", acl="" + acl + "")"";
        }",method,
"        public AclFilterResponse(ApiError error, Collection<AclDeletionResult> deletions) {
            this.error = error;
            this.deletions = deletions;
        }",method,
"        public AclFilterResponse(Collection<AclDeletionResult> deletions) {
            this(ApiError.NONE, deletions);
        }",method,
"        public ApiError error() {
            return error;
        }",method,
"        public Collection<AclDeletionResult> deletions() {
            return deletions;
        }",method,
"        @Override
        public String toString() {
            return ""(error="" + error + "", deletions="" + Utils.join(deletions, "","") + "")"";
        }",method,
"    public DeleteAclsResponse(int throttleTimeMs, List<AclFilterResponse> responses) {
        this.throttleTimeMs = throttleTimeMs;
        this.responses = responses;
    }",method,
"    public DeleteAclsResponse(Struct struct) {
        this.throttleTimeMs = struct.get(THROTTLE_TIME_MS);
        this.responses = new ArrayList<>();
        for (Object responseStructObj : struct.getArray(FILTER_RESPONSES_KEY_NAME)) {
            Struct responseStruct = (Struct) responseStructObj;
            ApiError error = new ApiError(responseStruct);
            List<AclDeletionResult> deletions = new ArrayList<>();
            for (Object matchingAclStructObj : responseStruct.getArray(MATCHING_ACLS_KEY_NAME)) {
                Struct matchingAclStruct = (Struct) matchingAclStructObj;
                ApiError matchError = new ApiError(matchingAclStruct);
                AccessControlEntry entry = RequestUtils.aceFromStructFields(matchingAclStruct);
                Resource resource = RequestUtils.resourceFromStructFields(matchingAclStruct);
                deletions.add(new AclDeletionResult(matchError, new AclBinding(resource, entry)));
            }
            this.responses.add(new AclFilterResponse(error, deletions));
        }
    }",method,
"    @Override
    protected Struct toStruct(short version) {
        Struct struct = new Struct(ApiKeys.DELETE_ACLS.responseSchema(version));
        struct.set(THROTTLE_TIME_MS, throttleTimeMs);
        List<Struct> responseStructs = new ArrayList<>();
        for (AclFilterResponse response : responses) {
            Struct responseStruct = struct.instance(FILTER_RESPONSES_KEY_NAME);
            response.error.write(responseStruct);
            List<Struct> deletionStructs = new ArrayList<>();
            for (AclDeletionResult deletion : response.deletions()) {
                Struct deletionStruct = responseStruct.instance(MATCHING_ACLS_KEY_NAME);
                deletion.error.write(deletionStruct);
                RequestUtils.resourceSetStructFields(deletion.acl().resource(), deletionStruct);
                RequestUtils.aceSetStructFields(deletion.acl().entry(), deletionStruct);
                deletionStructs.add(deletionStruct);
            }
            responseStruct.set(MATCHING_ACLS_KEY_NAME, deletionStructs.toArray(new Struct[0]));
            responseStructs.add(responseStruct);
        }
        struct.set(FILTER_RESPONSES_KEY_NAME, responseStructs.toArray());
        return struct;
    }",method,
"        for (AclFilterResponse response : responses) {
            Struct responseStruct = struct.instance(FILTER_RESPONSES_KEY_NAME);
            response.error.write(responseStruct);
            List<Struct> deletionStructs = new ArrayList<>();
            for (AclDeletionResult deletion : response.deletions()) {
                Struct deletionStruct = responseStruct.instance(MATCHING_ACLS_KEY_NAME);
                deletion.error.write(deletionStruct);
                RequestUtils.resourceSetStructFields(deletion.acl().resource(), deletionStruct);
                RequestUtils.aceSetStructFields(deletion.acl().entry(), deletionStruct);
                deletionStructs.add(deletionStruct);
            }
            responseStruct.set(MATCHING_ACLS_KEY_NAME, deletionStructs.toArray(new Struct[0]));
            responseStructs.add(responseStruct);
        }",method,
"    public int throttleTimeMs() {
        return throttleTimeMs;
    }",method,
"    public List<AclFilterResponse> responses() {
        return responses;
    }",method,
"    @Override
    public Map<Errors, Integer> errorCounts() {
        Map<Errors, Integer> errorCounts = new HashMap<>();
        for (AclFilterResponse response : responses)
            updateErrorCounts(errorCounts, response.error.error());
        return errorCounts;
    }",method,
"    public static DeleteAclsResponse parse(ByteBuffer buffer, short version) {
        return new DeleteAclsResponse(ApiKeys.DELETE_ACLS.responseSchema(version).read(buffer));
    }",method,
"    public String toString() {
        return ""(responses="" + Utils.join(responses, "","") + "")"";
    }",method,
"public class AccountsChooserListFragment extends CSSListFragment {
    private AccountsChooserAdapter mAdapter;
    private AccountsLoader accLoader;
    private Integer INDEX_DISPLAY_NAME = null;
    private Integer INDEX_WIZARD = null;
    private Integer INDEX_ID = null;
    private void initIndexes(Cursor c) {
        if(INDEX_DISPLAY_NAME == null) {
            INDEX_ID = c.getColumnIndex(SipProfile.FIELD_ID);
            INDEX_DISPLAY_NAME = c.getColumnIndex(SipProfile.FIELD_DISPLAY_NAME);
            INDEX_WIZARD = c.getColumnIndex(SipProfile.FIELD_WIZARD);
        }
    }
    @Override
    public void onCreate(Bundle state) {
        super.onCreate(state);
        setHasOptionsMenu(false);
    }
    @Override
    public void onResume() {
        super.onResume();
        attachAdapter();
        getLoaderManager().initLoader(0, getArguments(), this);
    }
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedState) {
        return inflater.inflate(R.layout.accounts_chooser_fragment, container, false);
    }
    private void attachAdapter() {
        if(getListAdapter() == null) {
            if(mAdapter == null) {
                mAdapter = new AccountsChooserAdapter(getActivity(), null);
            }
            setListAdapter(mAdapter);
        }
    }
    @Override
    public Loader<Cursor> onCreateLoader(int loader, Bundle args) {
        accLoader = new AccountsLoader(getActivity(), false, showExternal);
        return accLoader;
    }
    @Override
    public void changeCursor(Cursor c) {
        // Set adapter content if nothing to force was found
        if(mAdapter != null) {
            mAdapter.changeCursor(c);
        }
    }
    @Override
    public void onListItemClick(ListView l, View v, int position, long id) {
        if(mAdapter != null && accListener != null) {
            Cursor c = (Cursor) mAdapter.getItem(position);
            initIndexes(c);
            long accId = c.getLong(INDEX_ID);
            String displayName = c.getString(INDEX_DISPLAY_NAME);
            String wizard = c.getString(INDEX_WIZARD);
            accListener.onAccountClicked(accId, displayName, wizard);
        }
    }
    public interface OnAccountClickListener {
        public void onAccountClicked(long accountId, String name, String wizard); 
    }
    private OnAccountClickListener accListener = null;
    public void setOnAccountClickListener(OnAccountClickListener l) {
        accListener = l;
    }
    private class AccountsChooserAdapter extends ResourceCursorAdapter {
        public AccountsChooserAdapter(Context context, Cursor c) {
            super(context, R.layout.accounts_chooser_list_item, c, 0);
        }
        @Override
        public View newView(Context context, Cursor cursor, ViewGroup parent) {
            View v = super.newView(context, cursor, parent);
            // Shortcut for the binding
            if(v.getTag() == null) {
                AccListItemViewTag tag = new AccListItemViewTag();
                tag.name = (TextView) v.findViewById(R.id.AccTextView);
                tag.icon = (ImageView) v.findViewById(R.id.wizard_icon);
                v.setTag(tag);
            }
            return v;
        }
        private class AccListItemViewTag {
            TextView name;
            ImageView icon;
        }
        @Override
        public void bindView(View view, Context context, Cursor cursor) {
            AccListItemViewTag tag = (AccListItemViewTag) view.getTag();
            if(tag != null) {
                initIndexes(cursor);
                Long accId = cursor.getLong(INDEX_ID);
                String name = cursor.getString(INDEX_DISPLAY_NAME);
                String wizard = cursor.getString(INDEX_WIZARD);
                tag.name.setText(name);
                boolean iconSet = false;
                if(accLoader != null) {
                   CallHandlerPlugin ch = accLoader.getCallHandlerWithAccountId(accId);
                   if(ch != null) {
                       tag.icon.setImageBitmap(ch.getIcon());
                       iconSet = true;
                   }
                }
                if(!iconSet){
                    tag.icon.setImageResource(WizardUtils.getWizardIconRes(wizard));
                }
            }
        }
    }
    private boolean showExternal;
    public void setShowCallHandlerPlugins(boolean showInternalAccounts) {
        showExternal = showInternalAccounts;
    }
}",class,
"    private class AccountsChooserAdapter extends ResourceCursorAdapter {
        public AccountsChooserAdapter(Context context, Cursor c) {
            super(context, R.layout.accounts_chooser_list_item, c, 0);
        }
        @Override
        public View newView(Context context, Cursor cursor, ViewGroup parent) {
            View v = super.newView(context, cursor, parent);
            // Shortcut for the binding
            if(v.getTag() == null) {
                AccListItemViewTag tag = new AccListItemViewTag();
                tag.name = (TextView) v.findViewById(R.id.AccTextView);
                tag.icon = (ImageView) v.findViewById(R.id.wizard_icon);
                v.setTag(tag);
            }
            return v;
        }
        private class AccListItemViewTag {
            TextView name;
            ImageView icon;
        }
        @Override
        public void bindView(View view, Context context, Cursor cursor) {
            AccListItemViewTag tag = (AccListItemViewTag) view.getTag();
            if(tag != null) {
                initIndexes(cursor);
                Long accId = cursor.getLong(INDEX_ID);
                String name = cursor.getString(INDEX_DISPLAY_NAME);
                String wizard = cursor.getString(INDEX_WIZARD);
                tag.name.setText(name);
                boolean iconSet = false;
                if(accLoader != null) {
                   CallHandlerPlugin ch = accLoader.getCallHandlerWithAccountId(accId);
                   if(ch != null) {
                       tag.icon.setImageBitmap(ch.getIcon());
                       iconSet = true;
                   }
                }
                if(!iconSet){
                    tag.icon.setImageResource(WizardUtils.getWizardIconRes(wizard));
                }
            }
        }
    }",class,
"        private class AccListItemViewTag {
            TextView name;
            ImageView icon;
        }",class,
"    private void initIndexes(Cursor c) {
        if(INDEX_DISPLAY_NAME == null) {
            INDEX_ID = c.getColumnIndex(SipProfile.FIELD_ID);
            INDEX_DISPLAY_NAME = c.getColumnIndex(SipProfile.FIELD_DISPLAY_NAME);
            INDEX_WIZARD = c.getColumnIndex(SipProfile.FIELD_WIZARD);
        }
    }",method,
"        if(INDEX_DISPLAY_NAME == null) {
            INDEX_ID = c.getColumnIndex(SipProfile.FIELD_ID);
            INDEX_DISPLAY_NAME = c.getColumnIndex(SipProfile.FIELD_DISPLAY_NAME);
            INDEX_WIZARD = c.getColumnIndex(SipProfile.FIELD_WIZARD);
        }",method,
"    @Override
    public void onCreate(Bundle state) {
        super.onCreate(state);
        setHasOptionsMenu(false);
    }",method,
"    @Override
    public void onResume() {
        super.onResume();
        attachAdapter();
        getLoaderManager().initLoader(0, getArguments(), this);
    }",method,
"    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }",method,
"    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedState) {
        return inflater.inflate(R.layout.accounts_chooser_fragment, container, false);
    }",method,
"    private void attachAdapter() {
        if(getListAdapter() == null) {
            if(mAdapter == null) {
                mAdapter = new AccountsChooserAdapter(getActivity(), null);
            }
            setListAdapter(mAdapter);
        }
    }",method,
"            if(mAdapter == null) {
                mAdapter = new AccountsChooserAdapter(getActivity(), null);
            }",method,
"    @Override
    public Loader<Cursor> onCreateLoader(int loader, Bundle args) {
        accLoader = new AccountsLoader(getActivity(), false, showExternal);
        return accLoader;
    }",method,
"    @Override
    public void changeCursor(Cursor c) {
        // Set adapter content if nothing to force was found
        if(mAdapter != null) {
            mAdapter.changeCursor(c);
        }
    }",method,
"        if(mAdapter != null) {
            mAdapter.changeCursor(c);
        }",method,
"    @Override
    public void onListItemClick(ListView l, View v, int position, long id) {
        if(mAdapter != null && accListener != null) {
            Cursor c = (Cursor) mAdapter.getItem(position);
            initIndexes(c);
            long accId = c.getLong(INDEX_ID);
            String displayName = c.getString(INDEX_DISPLAY_NAME);
            String wizard = c.getString(INDEX_WIZARD);
            accListener.onAccountClicked(accId, displayName, wizard);
        }
    }",method,
"        if(mAdapter != null && accListener != null) {
            Cursor c = (Cursor) mAdapter.getItem(position);
            initIndexes(c);
            long accId = c.getLong(INDEX_ID);
            String displayName = c.getString(INDEX_DISPLAY_NAME);
            String wizard = c.getString(INDEX_WIZARD);
            accListener.onAccountClicked(accId, displayName, wizard);
        }",method,
"    public void setOnAccountClickListener(OnAccountClickListener l) {
        accListener = l;
    }",method,
"        public AccountsChooserAdapter(Context context, Cursor c) {
            super(context, R.layout.accounts_chooser_list_item, c, 0);
        }",method,
"        @Override
        public View newView(Context context, Cursor cursor, ViewGroup parent) {
            View v = super.newView(context, cursor, parent);
            // Shortcut for the binding
            if(v.getTag() == null) {
                AccListItemViewTag tag = new AccListItemViewTag();
                tag.name = (TextView) v.findViewById(R.id.AccTextView);
                tag.icon = (ImageView) v.findViewById(R.id.wizard_icon);
                v.setTag(tag);
            }
            return v;
        }",method,
"        @Override
        public void bindView(View view, Context context, Cursor cursor) {
            AccListItemViewTag tag = (AccListItemViewTag) view.getTag();
            if(tag != null) {
                initIndexes(cursor);
                Long accId = cursor.getLong(INDEX_ID);
                String name = cursor.getString(INDEX_DISPLAY_NAME);
                String wizard = cursor.getString(INDEX_WIZARD);
                tag.name.setText(name);
                boolean iconSet = false;
                if(accLoader != null) {
                   CallHandlerPlugin ch = accLoader.getCallHandlerWithAccountId(accId);
                   if(ch != null) {
                       tag.icon.setImageBitmap(ch.getIcon());
                       iconSet = true;
                   }
                }
                if(!iconSet){
                    tag.icon.setImageResource(WizardUtils.getWizardIconRes(wizard));
                }
            }
        }",method,
"            if(tag != null) {
                initIndexes(cursor);
                Long accId = cursor.getLong(INDEX_ID);
                String name = cursor.getString(INDEX_DISPLAY_NAME);
                String wizard = cursor.getString(INDEX_WIZARD);
                tag.name.setText(name);
                boolean iconSet = false;
                if(accLoader != null) {
                   CallHandlerPlugin ch = accLoader.getCallHandlerWithAccountId(accId);
                   if(ch != null) {
                       tag.icon.setImageBitmap(ch.getIcon());
                       iconSet = true;
                   }
                }
                if(!iconSet){
                    tag.icon.setImageResource(WizardUtils.getWizardIconRes(wizard));
                }
            }",method,
"                if(accLoader != null) {
                   CallHandlerPlugin ch = accLoader.getCallHandlerWithAccountId(accId);
                   if(ch != null) {
                       tag.icon.setImageBitmap(ch.getIcon());
                       iconSet = true;
                   }
                }",method,
"                   if(ch != null) {
                       tag.icon.setImageBitmap(ch.getIcon());
                       iconSet = true;
                   }",method,
"                if(!iconSet){
                    tag.icon.setImageResource(WizardUtils.getWizardIconRes(wizard));
                }",method,
"    public void setShowCallHandlerPlugins(boolean showInternalAccounts) {
        showExternal = showInternalAccounts;
    }",method,
"public class Alert {
    private final String token;
    private final AlertType type;
    private final ZonedDateTime scheduledTime;
    public Alert(String token, AlertType type, ZonedDateTime scheduledTime) {
        this.token = token;
        this.type = type;
        this.scheduledTime = scheduledTime;
    }
    @JsonCreator
    public Alert(@JsonProperty(""token"") String token, @JsonProperty(""type"") AlertType type,
            @JsonProperty(""scheduledTime"") String scheduledTime) {
        this.token = token;
        this.type = type;
        this.scheduledTime = ZonedDateTime.parse(scheduledTime, DateUtils.AVS_ISO_OFFSET_DATE_TIME);
    }
    public String getToken() {
        return this.token;
    }
    public AlertType getType() {
        return this.type;
    }
    @JsonSerialize(using = ZonedDateTimeSerializer.class)
    public ZonedDateTime getScheduledTime() {
        return scheduledTime;
    }
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = (prime * result) + ((token == null) ? 0 : token.hashCode());
        return result;
    }
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Alert other = (Alert) obj;
        if (token == null) {
            if (other.token != null) {
                return false;
            }
        } else if (!token.equals(other.token)) {
            return false;
        }
        return true;
    }
    public static class ZonedDateTimeSerializer extends JsonSerializer<ZonedDateTime> {
        @Override
        public void serialize(ZonedDateTime zonedDateTime, JsonGenerator jsonGenerator,
                SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
            jsonGenerator.writeString(zonedDateTime.format(DateUtils.AVS_ISO_OFFSET_DATE_TIME));
        }
    }
}",class,
"    public static class ZonedDateTimeSerializer extends JsonSerializer<ZonedDateTime> {
        @Override
        public void serialize(ZonedDateTime zonedDateTime, JsonGenerator jsonGenerator,
                SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
            jsonGenerator.writeString(zonedDateTime.format(DateUtils.AVS_ISO_OFFSET_DATE_TIME));
        }
    }",class,
"    public Alert(String token, AlertType type, ZonedDateTime scheduledTime) {
        this.token = token;
        this.type = type;
        this.scheduledTime = scheduledTime;
    }",method,
"    public String getToken() {
        return this.token;
    }",method,
"    public AlertType getType() {
        return this.type;
    }",method,
"    @JsonSerialize(using = ZonedDateTimeSerializer.class)
    public ZonedDateTime getScheduledTime() {
        return scheduledTime;
    }",method,
"    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = (prime * result) + ((token == null) ? 0 : token.hashCode());
        return result;
    }",method,
"    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Alert other = (Alert) obj;
        if (token == null) {
            if (other.token != null) {
                return false;
            }
        } else if (!token.equals(other.token)) {
            return false;
        }
        return true;
    }",method,
"        if (this == obj) {
            return true;
        }",method,
"        if (obj == null) {
            return false;
        }",method,
"        if (token == null) {
            if (other.token != null) {
                return false;
            }
        }",method,
"            if (other.token != null) {
                return false;
            }",method,
"        @Override
        public void serialize(ZonedDateTime zonedDateTime, JsonGenerator jsonGenerator,
                SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
            jsonGenerator.writeString(zonedDateTime.format(DateUtils.AVS_ISO_OFFSET_DATE_TIME));
        }",method,
"	default RouterFunction<T> and(RouterFunction<T> other) {
		return new RouterFunctions.SameComposedRouterFunction<>(this, other);
	}",method,
"	default RouterFunction<?> andOther(RouterFunction<?> other) {
		return new RouterFunctions.DifferentComposedRouterFunction(this, other);
	}",method,
"	default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {
		return and(RouterFunctions.route(predicate, handlerFunction));
	}",method,
"	default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {
		return and(RouterFunctions.nest(predicate, routerFunction));
	}",method,
"	default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {
		return new RouterFunctions.FilteredRouterFunction<>(this, filterFunction);
	}",method,
"	default void accept(RouterFunctions.Visitor visitor) {
		visitor.unknown(this);
	}",method,
"public class HandleTouchRecyclerViewActivity extends BaseActivity implements ObservableScrollViewCallbacks {
    private static final String TAG = HandleTouchRecyclerViewActivity.class.getSimpleName();
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_handletouchrecyclerview);
        ObservableRecyclerView recyclerView = (ObservableRecyclerView) findViewById(R.id.scroll);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setHasFixedSize(true);
        recyclerView.setScrollViewCallbacks(this);
        recyclerView.setAdapter(new CustomAdapter(this, getDummyData()));
    }
    @Override
    public void onScrollChanged(int scrollY, boolean firstScroll, boolean dragging) {
        Log.v(TAG, ""onScrollChanged: scrollY: "" + scrollY + "" firstScroll: "" + firstScroll + "" dragging: "" + dragging);
    }
    @Override
    public void onDownMotionEvent() {
        Log.v(TAG, ""onDownMotionEvent"");
    }
    @Override
    public void onUpOrCancelMotionEvent(ScrollState scrollState) {
        Log.v(TAG, ""onUpOrCancelMotionEvent: scrollState: "" + scrollState);
    }
    public static class CustomAdapter extends RecyclerView.Adapter<CustomAdapter.ViewHolder> {
        private Context mContext;
        private LayoutInflater mInflater;
        private ArrayList<String> mItems;
        public CustomAdapter(Context context, ArrayList<String> items) {
            mContext = context;
            mInflater = LayoutInflater.from(context);
            mItems = items;
        }
        @Override
        public int getItemCount() {
            return mItems.size();
        }
        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new ViewHolder(mContext, mInflater.inflate(R.layout.list_item_handletouch, parent, false));
        }
        @Override
        public void onBindViewHolder(ViewHolder viewHolder, int position) {
            viewHolder.textView.setText(mItems.get(position));
        }
        static class ViewHolder extends RecyclerView.ViewHolder {
            TextView textView;
            Context context;
            public ViewHolder(Context context, View view) {
                super(view);
                this.context = context;
                this.textView = (TextView) view.findViewById(android.R.id.text1);
                view.findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        click(getPosition() + 1);
                    }
                });
            }
            private void click(int i) {
                String message = ""Button "" + i + "" is clicked"";
                Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                Log.v(TAG, ""click: "" + message);
            }
        }
    }
}",class,
"    public static class CustomAdapter extends RecyclerView.Adapter<CustomAdapter.ViewHolder> {
        private Context mContext;
        private LayoutInflater mInflater;
        private ArrayList<String> mItems;
        public CustomAdapter(Context context, ArrayList<String> items) {
            mContext = context;
            mInflater = LayoutInflater.from(context);
            mItems = items;
        }
        @Override
        public int getItemCount() {
            return mItems.size();
        }
        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new ViewHolder(mContext, mInflater.inflate(R.layout.list_item_handletouch, parent, false));
        }
        @Override
        public void onBindViewHolder(ViewHolder viewHolder, int position) {
            viewHolder.textView.setText(mItems.get(position));
        }
        static class ViewHolder extends RecyclerView.ViewHolder {
            TextView textView;
            Context context;
            public ViewHolder(Context context, View view) {
                super(view);
                this.context = context;
                this.textView = (TextView) view.findViewById(android.R.id.text1);
                view.findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        click(getPosition() + 1);
                    }
                });
            }
            private void click(int i) {
                String message = ""Button "" + i + "" is clicked"";
                Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                Log.v(TAG, ""click: "" + message);
            }
        }
    }",class,
"        static class ViewHolder extends RecyclerView.ViewHolder {
            TextView textView;
            Context context;
            public ViewHolder(Context context, View view) {
                super(view);
                this.context = context;
                this.textView = (TextView) view.findViewById(android.R.id.text1);
                view.findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        click(getPosition() + 1);
                    }
                });
            }
            private void click(int i) {
                String message = ""Button "" + i + "" is clicked"";
                Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                Log.v(TAG, ""click: "" + message);
            }
        }",class,
"    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_handletouchrecyclerview);
        ObservableRecyclerView recyclerView = (ObservableRecyclerView) findViewById(R.id.scroll);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setHasFixedSize(true);
        recyclerView.setScrollViewCallbacks(this);
        recyclerView.setAdapter(new CustomAdapter(this, getDummyData()));
    }",method,
"    @Override
    public void onScrollChanged(int scrollY, boolean firstScroll, boolean dragging) {
        Log.v(TAG, ""onScrollChanged: scrollY: "" + scrollY + "" firstScroll: "" + firstScroll + "" dragging: "" + dragging);
    }",method,
"    @Override
    public void onDownMotionEvent() {
        Log.v(TAG, ""onDownMotionEvent"");
    }",method,
"    @Override
    public void onUpOrCancelMotionEvent(ScrollState scrollState) {
        Log.v(TAG, ""onUpOrCancelMotionEvent: scrollState: "" + scrollState);
    }",method,
"        public CustomAdapter(Context context, ArrayList<String> items) {
            mContext = context;
            mInflater = LayoutInflater.from(context);
            mItems = items;
        }",method,
"        @Override
        public int getItemCount() {
            return mItems.size();
        }",method,
"        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new ViewHolder(mContext, mInflater.inflate(R.layout.list_item_handletouch, parent, false));
        }",method,
"        @Override
        public void onBindViewHolder(ViewHolder viewHolder, int position) {
            viewHolder.textView.setText(mItems.get(position));
        }",method,
"            public ViewHolder(Context context, View view) {
                super(view);
                this.context = context;
                this.textView = (TextView) view.findViewById(android.R.id.text1);
                view.findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        click(getPosition() + 1);
                    }
                });
            }",method,
"                    @Override
                    public void onClick(View v) {
                        click(getPosition() + 1);
                    }",method,
"            private void click(int i) {
                String message = ""Button "" + i + "" is clicked"";
                Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                Log.v(TAG, ""click: "" + message);
            }",method,
"public final class CppDebugPackageProvider implements TransitiveInfoProvider {
  private final Label targetLabel;
  private final Artifact strippedArtifact;
  private final Artifact unstrippedArtifact;
  @Nullable private final Artifact dwpArtifact;
  public CppDebugPackageProvider(
      Label targetLabel,
      Artifact strippedArtifact,
      Artifact unstrippedArtifact,
      @Nullable Artifact dwpArtifact) {
    Preconditions.checkNotNull(strippedArtifact);
    Preconditions.checkNotNull(unstrippedArtifact);
    this.targetLabel = targetLabel;
    this.strippedArtifact = strippedArtifact;
    this.unstrippedArtifact = unstrippedArtifact;
    this.dwpArtifact = dwpArtifact;
  }
  public final Label getTargetLabel() {
    return targetLabel;
  }
  public final Artifact getStrippedArtifact() {
    return strippedArtifact;
  }
  public final Artifact getUnstrippedArtifact() {
    return unstrippedArtifact;
  }
  @Nullable
  public final Artifact getDwpArtifact() {
    return dwpArtifact;
  }
}",class,
"  @Nullable private final Artifact dwpArtifact;
  public CppDebugPackageProvider(
      Label targetLabel,
      Artifact strippedArtifact,
      Artifact unstrippedArtifact,
      @Nullable Artifact dwpArtifact) {
    Preconditions.checkNotNull(strippedArtifact);
    Preconditions.checkNotNull(unstrippedArtifact);
    this.targetLabel = targetLabel;
    this.strippedArtifact = strippedArtifact;
    this.unstrippedArtifact = unstrippedArtifact;
    this.dwpArtifact = dwpArtifact;
  }",method,
"  public final Label getTargetLabel() {
    return targetLabel;
  }",method,
