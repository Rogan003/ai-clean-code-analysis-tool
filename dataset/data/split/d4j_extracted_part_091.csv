code_snippet,type,score
"                            @Override
                            public void windowClosing(WindowEvent e)
                            {
                                pannel.exit();
                                super.windowClosing(e); //To change body of generated methods, choose Tools | Templates.
                            }",method,
"    public static void setIN(ImageIcon in)
        {
//            IN.setIcon(new ImageIcon(in));
            IN.setIcon(in);
        }",method,
"    public static void setGRAY(ImageIcon in)
        {
            GRAY.setIcon(in);
        }",method,
"    public static void setFace(ImageIcon in)
        {
            FACE.setIcon(in);
        }",method,
"    public static void setOut(ImageIcon in)
        {
            OUT.setIcon(in);
        }",method,
"public class ModelMaps {
    private static final ModelReference<NodeInitializerRegistry> NODE_INITIALIZER_REGISTRY_MODEL_REFERENCE = ModelReference.of(NodeInitializerRegistry.class);
    private static final ModelType<ChildNodeInitializerStrategy<?>> CHILD_NODE_INITIALIZER_STRATEGY_MODEL_TYPE =
        Cast.uncheckedCast(ModelType.of(ChildNodeInitializerStrategy.class));
    public static <T> MutableModelNode addModelMapNode(MutableModelNode modelNode, ModelType<T> elementModelType, String name) {
        modelNode.addLink(
            ModelRegistrations.of(modelNode.getPath().child(name))
                .action(ModelActionRole.Create, NODE_INITIALIZER_REGISTRY_MODEL_REFERENCE, new BiAction<MutableModelNode, NodeInitializerRegistry>() {
                    @Override
                    public void execute(MutableModelNode node, NodeInitializerRegistry nodeInitializerRegistry) {
                        ChildNodeInitializerStrategy<T> childFactory =
                            NodeBackedModelMap.createUsingRegistry(nodeInitializerRegistry);
                        node.setPrivateData(CHILD_NODE_INITIALIZER_STRATEGY_MODEL_TYPE, childFactory);
                    }
                })
                .descriptor(modelNode.getDescriptor())
                .withProjection(
                    ModelMapModelProjection.unmanaged(elementModelType, ChildNodeInitializerStrategyAccessors.fromPrivateData())
                )
                .build()
        );
        MutableModelNode mapNode = modelNode.getLink(name);
        assert mapNode != null;
        return mapNode;
    }
    public static <T> ModelMap<T> toView(MutableModelNode mapNode, ModelType<T> elementModelType) {
        mapNode.ensureUsable();
        return mapNode.asMutable(
                ModelTypes.modelMap(elementModelType),
                RuleContext.get()
        ).getInstance();
    }
}",class,
"    public static <T> MutableModelNode addModelMapNode(MutableModelNode modelNode, ModelType<T> elementModelType, String name) {
        modelNode.addLink(
            ModelRegistrations.of(modelNode.getPath().child(name))
                .action(ModelActionRole.Create, NODE_INITIALIZER_REGISTRY_MODEL_REFERENCE, new BiAction<MutableModelNode, NodeInitializerRegistry>() {
                    @Override
                    public void execute(MutableModelNode node, NodeInitializerRegistry nodeInitializerRegistry) {
                        ChildNodeInitializerStrategy<T> childFactory =
                            NodeBackedModelMap.createUsingRegistry(nodeInitializerRegistry);
                        node.setPrivateData(CHILD_NODE_INITIALIZER_STRATEGY_MODEL_TYPE, childFactory);
                    }
                })
                .descriptor(modelNode.getDescriptor())
                .withProjection(
                    ModelMapModelProjection.unmanaged(elementModelType, ChildNodeInitializerStrategyAccessors.fromPrivateData())
                )
                .build()
        );
        MutableModelNode mapNode = modelNode.getLink(name);
        assert mapNode != null;
        return mapNode;
    }",method,
"                .action(ModelActionRole.Create, NODE_INITIALIZER_REGISTRY_MODEL_REFERENCE, new BiAction<MutableModelNode, NodeInitializerRegistry>() {
                    @Override
                    public void execute(MutableModelNode node, NodeInitializerRegistry nodeInitializerRegistry) {
                        ChildNodeInitializerStrategy<T> childFactory =
                            NodeBackedModelMap.createUsingRegistry(nodeInitializerRegistry);
                        node.setPrivateData(CHILD_NODE_INITIALIZER_STRATEGY_MODEL_TYPE, childFactory);
                    }
                }",method,
"                    @Override
                    public void execute(MutableModelNode node, NodeInitializerRegistry nodeInitializerRegistry) {
                        ChildNodeInitializerStrategy<T> childFactory =
                            NodeBackedModelMap.createUsingRegistry(nodeInitializerRegistry);
                        node.setPrivateData(CHILD_NODE_INITIALIZER_STRATEGY_MODEL_TYPE, childFactory);
                    }",method,
"    public static <T> ModelMap<T> toView(MutableModelNode mapNode, ModelType<T> elementModelType) {
        mapNode.ensureUsable();
        return mapNode.asMutable(
                ModelTypes.modelMap(elementModelType),
                RuleContext.get()
        ).getInstance();
    }",method,
"public abstract class InspectionTreeNode extends DefaultMutableTreeNode {
  protected final AtomicClearableLazyValue<LevelAndCount[]> myProblemLevels = new AtomicClearableLazyValue<LevelAndCount[]>() {
    @NotNull
    @Override
    protected LevelAndCount[] compute() {
      TObjectIntHashMap<HighlightDisplayLevel> counter = new TObjectIntHashMap<>();
      visitProblemSeverities(counter);
      LevelAndCount[] arr = new LevelAndCount[counter.size()];
      final int[] i = {0};
      counter.forEachEntry(new TObjectIntProcedure<HighlightDisplayLevel>() {
        @Override
        public boolean execute(HighlightDisplayLevel l, int c) {
          arr[i[0]++] = new LevelAndCount(l, c);
          return true;
        }
      });
      Arrays.sort(arr, Comparator.<LevelAndCount, HighlightSeverity>comparing(levelAndCount -> levelAndCount.getLevel().getSeverity()).reversed());
      return arr;
    }
  };
  protected volatile InspectionTreeUpdater myUpdater;
  protected InspectionTreeNode  (Object userObject) {
    super(userObject);
  }
  @Nullable
  public Icon getIcon(boolean expanded) {
    return null;
  }
  @NotNull
  public LevelAndCount[] getProblemLevels() {
    if (!isProblemCountCacheValid()) {
      dropProblemCountCaches();
    }
    return myProblemLevels.getValue();
  }
  private void dropProblemCountCaches() {
    InspectionTreeNode current = this;
    while (current != null) {
      current.myProblemLevels.drop();
      current = (InspectionTreeNode)current.getParent();
    }
  }
  protected boolean isProblemCountCacheValid() {
    return true;
  }
  protected void visitProblemSeverities(TObjectIntHashMap<HighlightDisplayLevel> counter) {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      for (LevelAndCount levelAndCount : child.getProblemLevels()) {
        if (!counter.adjustValue(levelAndCount.getLevel(), levelAndCount.getCount())) {
          counter.put(levelAndCount.getLevel(), levelAndCount.getCount());
        }
      }
    }
  }
  public int getProblemCount(boolean allowSuppressed) {
    int sum = 0;
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      sum += child.getProblemCount(allowSuppressed);
    }
    return sum;
  }
  public boolean isValid() {
    return true;
  }
  public boolean isExcluded() {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      if (!child.isExcluded()) {
        return false;
      }
    }
    return getChildCount() != 0;
  }
  public boolean appearsBold() {
    return false;
  }
  @Nullable
  public String getTailText() {
    return null;
  }
  public void excludeElement() {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      child.excludeElement();
    }
  }
  public void amnestyElement() {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      child.amnestyElement();
    }
  }
  public InspectionTreeNode insertByOrder(InspectionTreeNode child, boolean allowDuplication) {
    return ReadAction.compute(() -> {
      if (!allowDuplication) {
        int index = getIndex(child);
        if (index != -1) {
          return (InspectionTreeNode)getChildAt(index);
        }
      }
      int index = TreeUtil.indexedBinarySearch(this, child, InspectionResultsViewComparator.getInstance());
      if (!allowDuplication && index >= 0){
        return (InspectionTreeNode)getChildAt(index);
      }
      insert(child, Math.abs(index + 1));
      return child;
    });
  }
  @Override
  public void add(MutableTreeNode newChild) {
    super.add(newChild);
    if (myUpdater != null) {
      ((InspectionTreeNode)newChild).propagateUpdater(myUpdater);
      dropProblemCountCaches();
      myUpdater.updateWithPreviewPanel();
    }
  }
  @Override
  public void insert(MutableTreeNode newChild, int childIndex) {
    super.insert(newChild, childIndex);
    if (myUpdater != null) {
      ((InspectionTreeNode)newChild).propagateUpdater(myUpdater);
      dropProblemCountCaches();
      myUpdater.updateWithPreviewPanel();
    }
  }
  private void propagateUpdater(InspectionTreeUpdater updater) {
    if (myUpdater != null) return;
    myUpdater = updater;
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      child.propagateUpdater(updater);
    }
  }
  public RefEntity getContainingFileLocalEntity() {
    final Enumeration children = children();
    RefEntity current = null;
    while (children.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)children.nextElement();
      final RefEntity entity = child.getContainingFileLocalEntity();
      if (entity == null || current != null) {
        return null;
      }
      current = entity;
    }
    return current;
  }
  @Override
  public synchronized TreeNode getParent() {
    return super.getParent();
  }
  @Override
  public synchronized void setParent(MutableTreeNode newParent) {
    super.setParent(newParent);
  }
}",class,
"    @NotNull
    @Override
    protected LevelAndCount[] compute() {
      TObjectIntHashMap<HighlightDisplayLevel> counter = new TObjectIntHashMap<>();
      visitProblemSeverities(counter);
      LevelAndCount[] arr = new LevelAndCount[counter.size()];
      final int[] i = {0};
      counter.forEachEntry(new TObjectIntProcedure<HighlightDisplayLevel>() {
        @Override
        public boolean execute(HighlightDisplayLevel l, int c) {
          arr[i[0]++] = new LevelAndCount(l, c);
          return true;
        }
      });
      Arrays.sort(arr, Comparator.<LevelAndCount, HighlightSeverity>comparing(levelAndCount -> levelAndCount.getLevel().getSeverity()).reversed());
      return arr;
    }",method,
"      counter.forEachEntry(new TObjectIntProcedure<HighlightDisplayLevel>() {
        @Override
        public boolean execute(HighlightDisplayLevel l, int c) {
          arr[i[0]++] = new LevelAndCount(l, c);
          return true;
        }
      }",method,
"        @Override
        public boolean execute(HighlightDisplayLevel l, int c) {
          arr[i[0]++] = new LevelAndCount(l, c);
          return true;
        }",method,
"  protected InspectionTreeNode  (Object userObject) {
    super(userObject);
  }",method,
"  @Nullable
  public Icon getIcon(boolean expanded) {
    return null;
  }",method,
"  @NotNull
  public LevelAndCount[] getProblemLevels() {
    if (!isProblemCountCacheValid()) {
      dropProblemCountCaches();
    }
    return myProblemLevels.getValue();
  }",method,
"  private void dropProblemCountCaches() {
    InspectionTreeNode current = this;
    while (current != null) {
      current.myProblemLevels.drop();
      current = (InspectionTreeNode)current.getParent();
    }
  }",method,
"    while (current != null) {
      current.myProblemLevels.drop();
      current = (InspectionTreeNode)current.getParent();
    }",method,
"  protected boolean isProblemCountCacheValid() {
    return true;
  }",method,
"  protected void visitProblemSeverities(TObjectIntHashMap<HighlightDisplayLevel> counter) {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      for (LevelAndCount levelAndCount : child.getProblemLevels()) {
        if (!counter.adjustValue(levelAndCount.getLevel(), levelAndCount.getCount())) {
          counter.put(levelAndCount.getLevel(), levelAndCount.getCount());
        }
      }
    }
  }",method,
"  public int getProblemCount(boolean allowSuppressed) {
    int sum = 0;
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      sum += child.getProblemCount(allowSuppressed);
    }
    return sum;
  }",method,
"  public boolean isValid() {
    return true;
  }",method,
"  public boolean isExcluded() {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      if (!child.isExcluded()) {
        return false;
      }
    }
    return getChildCount() != 0;
  }",method,
"  public boolean appearsBold() {
    return false;
  }",method,
"  @Nullable
  public String getTailText() {
    return null;
  }",method,
"  public void excludeElement() {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      child.excludeElement();
    }
  }",method,
"  public void amnestyElement() {
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      child.amnestyElement();
    }
  }",method,
"  public InspectionTreeNode insertByOrder(InspectionTreeNode child, boolean allowDuplication) {
    return ReadAction.compute(() -> {
      if (!allowDuplication) {
        int index = getIndex(child);
        if (index != -1) {
          return (InspectionTreeNode)getChildAt(index);
        }
      }
      int index = TreeUtil.indexedBinarySearch(this, child, InspectionResultsViewComparator.getInstance());
      if (!allowDuplication && index >= 0){
        return (InspectionTreeNode)getChildAt(index);
      }
      insert(child, Math.abs(index + 1));
      return child;
    });
  }",method,
"      if (!allowDuplication) {
        int index = getIndex(child);
        if (index != -1) {
          return (InspectionTreeNode)getChildAt(index);
        }
      }",method,
"        if (index != -1) {
          return (InspectionTreeNode)getChildAt(index);
        }",method,
"      if (!allowDuplication && index >= 0){
        return (InspectionTreeNode)getChildAt(index);
      }",method,
"  @Override
  public void add(MutableTreeNode newChild) {
    super.add(newChild);
    if (myUpdater != null) {
      ((InspectionTreeNode)newChild).propagateUpdater(myUpdater);
      dropProblemCountCaches();
      myUpdater.updateWithPreviewPanel();
    }
  }",method,
"    if (myUpdater != null) {
      ((InspectionTreeNode)newChild).propagateUpdater(myUpdater);
      dropProblemCountCaches();
      myUpdater.updateWithPreviewPanel();
    }",method,
"  @Override
  public void insert(MutableTreeNode newChild, int childIndex) {
    super.insert(newChild, childIndex);
    if (myUpdater != null) {
      ((InspectionTreeNode)newChild).propagateUpdater(myUpdater);
      dropProblemCountCaches();
      myUpdater.updateWithPreviewPanel();
    }
  }",method,
"    if (myUpdater != null) {
      ((InspectionTreeNode)newChild).propagateUpdater(myUpdater);
      dropProblemCountCaches();
      myUpdater.updateWithPreviewPanel();
    }",method,
"  private void propagateUpdater(InspectionTreeUpdater updater) {
    if (myUpdater != null) return;
    myUpdater = updater;
    Enumeration enumeration = children();
    while (enumeration.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)enumeration.nextElement();
      child.propagateUpdater(updater);
    }
  }",method,
"  public RefEntity getContainingFileLocalEntity() {
    final Enumeration children = children();
    RefEntity current = null;
    while (children.hasMoreElements()) {
      InspectionTreeNode child = (InspectionTreeNode)children.nextElement();
      final RefEntity entity = child.getContainingFileLocalEntity();
      if (entity == null || current != null) {
        return null;
      }
      current = entity;
    }
    return current;
  }",method,
"      if (entity == null || current != null) {
        return null;
      }",method,
"  @Override
  public synchronized TreeNode getParent() {
    return super.getParent();
  }",method,
"  @Override
  public synchronized void setParent(MutableTreeNode newParent) {
    super.setParent(newParent);
  }",method,
"public class RestClientResponseException extends RestClientException {
	private static final long serialVersionUID = -8803556342728481792L;
	private static final Charset DEFAULT_CHARSET = StandardCharsets.ISO_8859_1;
	private final int rawStatusCode;
	private final String statusText;
	private final byte[] responseBody;
	@Nullable
	private final HttpHeaders responseHeaders;
	@Nullable
	private final String responseCharset;
	public RestClientResponseException(String message, int statusCode, String statusText,
			@Nullable HttpHeaders responseHeaders, @Nullable byte[] responseBody, @Nullable Charset responseCharset) {
		super(message);
		this.rawStatusCode = statusCode;
		this.statusText = statusText;
		this.responseHeaders = responseHeaders;
		this.responseBody = (responseBody != null ? responseBody : new byte[0]);
		this.responseCharset = (responseCharset != null ? responseCharset.name() : null);
	}
	public int getRawStatusCode() {
		return this.rawStatusCode;
	}
	public String getStatusText() {
		return this.statusText;
	}
	@Nullable
	public HttpHeaders getResponseHeaders() {
		return this.responseHeaders;
	}
	public byte[] getResponseBodyAsByteArray() {
		return this.responseBody;
	}
	public String getResponseBodyAsString() {
		if (this.responseCharset == null) {
			return new String(this.responseBody, DEFAULT_CHARSET);
		}
		try {
			return new String(this.responseBody, this.responseCharset);
		}
		catch (UnsupportedEncodingException ex) {
			// should not occur
			throw new IllegalStateException(ex);
		}
	}
}",class,
"	public RestClientResponseException(String message, int statusCode, String statusText,
			@Nullable HttpHeaders responseHeaders, @Nullable byte[] responseBody, @Nullable Charset responseCharset) {
		super(message);
		this.rawStatusCode = statusCode;
		this.statusText = statusText;
		this.responseHeaders = responseHeaders;
		this.responseBody = (responseBody != null ? responseBody : new byte[0]);
		this.responseCharset = (responseCharset != null ? responseCharset.name() : null);
	}",method,
"	public int getRawStatusCode() {
		return this.rawStatusCode;
	}",method,
"	public String getStatusText() {
		return this.statusText;
	}",method,
"	@Nullable
	public HttpHeaders getResponseHeaders() {
		return this.responseHeaders;
	}",method,
"	public byte[] getResponseBodyAsByteArray() {
		return this.responseBody;
	}",method,
"	public String getResponseBodyAsString() {
		if (this.responseCharset == null) {
			return new String(this.responseBody, DEFAULT_CHARSET);
		}
		try {
			return new String(this.responseBody, this.responseCharset);
		}
		catch (UnsupportedEncodingException ex) {
			// should not occur
			throw new IllegalStateException(ex);
		}
	}",method,
"		if (this.responseCharset == null) {
			return new String(this.responseBody, DEFAULT_CHARSET);
		}",method,
"		catch (UnsupportedEncodingException ex) {
			// should not occur
			throw new IllegalStateException(ex);
		}",method,
"public class ChangedLinesCounterTest extends LightPlatformCodeInsightFixtureTestCase {
  @Override
  protected String getTestDataPath() {
    return PlatformTestUtil.getPlatformTestDataPath()
           + ""codeStyle/formatter/"";
  }
  @Override
  public void tearDown() throws Exception {
    myFixture.getFile().putUserData(FormatChangedTextUtil.TEST_REVISION_CONTENT, null);
    super.tearDown();
  }
  public void doTest(int expectedLinesChanged) {
    myFixture.configureByFile(getTestName(true) + ""_revision.java"");
    PsiFile file = myFixture.getFile();
    CharSequence revisionContent = myFixture.getDocument(file).getCharsSequence();
    myFixture.configureByFile(getTestName(true) + "".java"");
    file = myFixture.getFile();
    Document document = myFixture.getDocument(file);
    int linesChanged = FormatChangedTextUtil.getInstance().calculateChangedLinesNumber(document, revisionContent);
    Assert.assertTrue(linesChanged > 0);
    Assert.assertEquals(expectedLinesChanged, linesChanged);
  }
  public void testAddedLines() {
    doTest(17);
  }
  public void testModifiedLines() {
    doTest(6);
  }
  public void testDeletedLines() {
    doTest(3);
  }
  public void testChangedSingleLine() {
    doTest(1);
  }
  public void testChangedAndDeleted() {
    doTest(6);
  }
  public void testModification() {
    doTest(3);
  }
  public void testInsert() {
    doTest(2);
  }
  public void testLotsWhiteSpaces() {
    doTest(19);
  }
}",class,
"  @Override
  protected String getTestDataPath() {
    return PlatformTestUtil.getPlatformTestDataPath()
           + ""codeStyle/formatter/"";
  }",method,
"  @Override
  public void tearDown() throws Exception {
    myFixture.getFile().putUserData(FormatChangedTextUtil.TEST_REVISION_CONTENT, null);
    super.tearDown();
  }",method,
"  public void doTest(int expectedLinesChanged) {
    myFixture.configureByFile(getTestName(true) + ""_revision.java"");
    PsiFile file = myFixture.getFile();
    CharSequence revisionContent = myFixture.getDocument(file).getCharsSequence();
    myFixture.configureByFile(getTestName(true) + "".java"");
    file = myFixture.getFile();
    Document document = myFixture.getDocument(file);
    int linesChanged = FormatChangedTextUtil.getInstance().calculateChangedLinesNumber(document, revisionContent);
    Assert.assertTrue(linesChanged > 0);
    Assert.assertEquals(expectedLinesChanged, linesChanged);
  }",method,
"  public void testAddedLines() {
    doTest(17);
  }",method,
"  public void testModifiedLines() {
    doTest(6);
  }",method,
"  public void testDeletedLines() {
    doTest(3);
  }",method,
"  public void testChangedSingleLine() {
    doTest(1);
  }",method,
"  public void testChangedAndDeleted() {
    doTest(6);
  }",method,
"  public void testModification() {
    doTest(3);
  }",method,
"  public void testInsert() {
    doTest(2);
  }",method,
"  public void testLotsWhiteSpaces() {
    doTest(19);
  }",method,
"public class AppServerTest {
  private static final String APPCACHE_MIME_TYPE = ""text/cache-manifest"";
  private AppServer server;
  private static WebDriver driver;
  @BeforeClass
  public static void startDriver() throws Throwable {
    driver = new WebDriverBuilder().get();
  }
  @Before
  public void startServer() throws Throwable {
    server = new JettyAppServer();
    server.start();
  }
  @After
  public void stopServer() {
    server.stop();
  }
  @AfterClass
  public static void quitDriver() {
    driver.quit();
  }
  @Test
  public void hostsStaticPages() {
    driver.get(server.whereIs(""simpleTest.html""));
    assertEquals(""Hello WebDriver"", driver.getTitle());
  }
  @Test
  public void servesNumberedPages() {
    driver.get(server.whereIs(""page/1""));
    assertEquals(""Page1"", driver.getTitle());
    driver.get(server.whereIs(""page/2""));
    assertEquals(""Page2"", driver.getTitle());
  }
  @Test
  public void numberedPagesExcludeQuerystring() {
    driver.get(server.whereIs(""page/1?foo=bar""));
    assertEquals(""1"", driver.findElement(By.id(""pageNumber"")).getText());
  }
  @Test
  public void redirects() {
    driver.get(server.whereIs(""redirect""));
    assertEquals(""We Arrive Here"", driver.getTitle());
    assertTrue(driver.getCurrentUrl().contains(""resultPage""));
  }
  @Test
  public void sleeps() {
    long before = System.currentTimeMillis();
    driver.get(server.whereIs(""sleep?time=1""));
    long duration = System.currentTimeMillis() - before;
    assertTrue(duration >= 1000);
    assertTrue(duration < 1500);
    assertEquals(""Slept for 1s"", driver.findElement(By.tagName(""body"")).getText());
  }
  @Test
  public void dealsWithUtf16() {
    driver.get(server.whereIs(""encoding""));
    String pageText = driver.findElement(By.tagName(""body"")).getText();
    assertTrue(pageText.contains(""\u05E9\u05DC\u05D5\u05DD""));
  }
  @Test
  public void manifestHasCorrectMimeType() {
    assertUrlHasContentType(server.whereIs(""html5/test.appcache""), APPCACHE_MIME_TYPE);
  }
  @Test
  public void manifestHasCorrectMimeTypeUnderJavascript() {
    String appcacheUrl =
        server.whereIs(""/javascript/atoms/test/html5/testdata/with_fallback.appcache"");
    assertUrlHasContentType(appcacheUrl, APPCACHE_MIME_TYPE);
  }
  @Test
  public void uploadsFile() throws Throwable {
    String FILE_CONTENTS = ""Uploaded file"";
    File testFile = File.createTempFile(""webdriver"", ""tmp"");
    testFile.deleteOnExit();
    Files.write(FILE_CONTENTS, testFile, Charsets.UTF_8);
    driver.get(server.whereIs(""upload.html""));
    driver.findElement(By.id(""upload"")).sendKeys(testFile.getAbsolutePath());
    driver.findElement(By.id(""go"")).submit();
    // Nasty. Sorry.
    Thread.sleep(50);
    driver.switchTo().frame(""upload_target"");
    WebElement body = driver.findElement(By.xpath(""//body""));
    assertEquals(FILE_CONTENTS, body.getText());
  }
  private void assertUrlHasContentType(String url, String appcacheMimeType) {
    HttpClient httpclient = HttpClientBuilder.create().build();
    HttpGet httpget = new HttpGet(url);
    HttpResponse response;
    try {
      response = httpclient.execute(httpget);
    } catch (RuntimeException e) {
      throw e;
    } catch (Throwable t) {
      throw new RuntimeException(t);
    }
    Header[] contentTypeHeaders = response.getHeaders(""Content-Type"");
    assertEquals(1, contentTypeHeaders.length);
    assertTrue(contentTypeHeaders[0].getValue().contains(appcacheMimeType));
  }
}",class,
"  @BeforeClass
  public static void startDriver() throws Throwable {
    driver = new WebDriverBuilder().get();
  }",method,
"  @Before
  public void startServer() throws Throwable {
    server = new JettyAppServer();
    server.start();
  }",method,
"  @After
  public void stopServer() {
    server.stop();
  }",method,
"  @AfterClass
  public static void quitDriver() {
    driver.quit();
  }",method,
"  @Test
  public void hostsStaticPages() {
    driver.get(server.whereIs(""simpleTest.html""));
    assertEquals(""Hello WebDriver"", driver.getTitle());
  }",method,
"  @Test
  public void servesNumberedPages() {
    driver.get(server.whereIs(""page/1""));
    assertEquals(""Page1"", driver.getTitle());
    driver.get(server.whereIs(""page/2""));
    assertEquals(""Page2"", driver.getTitle());
  }",method,
"  @Test
  public void numberedPagesExcludeQuerystring() {
    driver.get(server.whereIs(""page/1?foo=bar""));
    assertEquals(""1"", driver.findElement(By.id(""pageNumber"")).getText());
  }",method,
"  @Test
  public void redirects() {
    driver.get(server.whereIs(""redirect""));
    assertEquals(""We Arrive Here"", driver.getTitle());
    assertTrue(driver.getCurrentUrl().contains(""resultPage""));
  }",method,
"  @Test
  public void sleeps() {
    long before = System.currentTimeMillis();
    driver.get(server.whereIs(""sleep?time=1""));
    long duration = System.currentTimeMillis() - before;
    assertTrue(duration >= 1000);
    assertTrue(duration < 1500);
    assertEquals(""Slept for 1s"", driver.findElement(By.tagName(""body"")).getText());
  }",method,
"  @Test
  public void dealsWithUtf16() {
    driver.get(server.whereIs(""encoding""));
    String pageText = driver.findElement(By.tagName(""body"")).getText();
    assertTrue(pageText.contains(""\u05E9\u05DC\u05D5\u05DD""));
  }",method,
"  @Test
  public void manifestHasCorrectMimeType() {
    assertUrlHasContentType(server.whereIs(""html5/test.appcache""), APPCACHE_MIME_TYPE);
  }",method,
"  @Test
  public void manifestHasCorrectMimeTypeUnderJavascript() {
    String appcacheUrl =
        server.whereIs(""/javascript/atoms/test/html5/testdata/with_fallback.appcache"");
    assertUrlHasContentType(appcacheUrl, APPCACHE_MIME_TYPE);
  }",method,
"  @Test
  public void uploadsFile() throws Throwable {
    String FILE_CONTENTS = ""Uploaded file"";
    File testFile = File.createTempFile(""webdriver"", ""tmp"");
    testFile.deleteOnExit();
    Files.write(FILE_CONTENTS, testFile, Charsets.UTF_8);
    driver.get(server.whereIs(""upload.html""));
    driver.findElement(By.id(""upload"")).sendKeys(testFile.getAbsolutePath());
    driver.findElement(By.id(""go"")).submit();
    // Nasty. Sorry.
    Thread.sleep(50);
    driver.switchTo().frame(""upload_target"");
    WebElement body = driver.findElement(By.xpath(""//body""));
    assertEquals(FILE_CONTENTS, body.getText());
  }
  private void assertUrlHasContentType(String url, String appcacheMimeType) {
    HttpClient httpclient = HttpClientBuilder.create().build();
    HttpGet httpget = new HttpGet(url);
    HttpResponse response;
    try {
      response = httpclient.execute(httpget);
    } catch (RuntimeException e) {
      throw e;
    } catch (Throwable t) {
      throw new RuntimeException(t);
    }
    Header[] contentTypeHeaders = response.getHeaders(""Content-Type"");
    assertEquals(1, contentTypeHeaders.length);
    assertTrue(contentTypeHeaders[0].getValue().contains(appcacheMimeType));
  }",method,
"public class GrClassReferenceType extends PsiClassType {
  private final GrReferenceElement myReferenceElement;
  public GrClassReferenceType(GrReferenceElement referenceElement) {
    super(LanguageLevel.JDK_1_5);
    myReferenceElement = referenceElement;
  }
  public GrClassReferenceType(GrReferenceElement referenceElement, LanguageLevel languageLevel) {
    super(languageLevel);
    myReferenceElement = referenceElement;
  }
  @Override
  @Nullable
  public PsiClass resolve() {
    return resolveGenerics().getElement();
  }
  @Override
  @Nullable
  public String getClassName() {
    final PsiClass resolved = resolve();
    if (resolved != null) return resolved.getName();
    return myReferenceElement.getReferenceName();
  }
  @Override
  @NotNull
  public PsiType[] getParameters() {
    return myReferenceElement.getTypeArguments();
  }
  @Override
  @NotNull
  public ClassResolveResult resolveGenerics() {
    final GroovyResolveResult resolveResult = myReferenceElement.advancedResolve();
    return new ClassResolveResult() {
      @Override
      public PsiClass getElement() {
        final PsiElement resolved = resolveResult.getElement();
        return resolved instanceof PsiClass ? (PsiClass)resolved : null;
      }
      @Override
      @NotNull
      public PsiSubstitutor getSubstitutor() {
        return resolveResult.getSubstitutor();
      }
      @Override
      public boolean isPackagePrefixPackageReference() {
        return false;
      }
      @Override
      public boolean isAccessible() {
        return resolveResult.isAccessible();
      }
      @Override
      public boolean isStaticsScopeCorrect() {
        return resolveResult.isStaticsOK();
      }
      @Override
      @Nullable
      public PsiElement getCurrentFileResolveScope() {
        return resolveResult.getCurrentFileResolveContext();
      }
      @Override
      public boolean isValidResult() {
        return isStaticsScopeCorrect() && isAccessible();
      }
    };
  }
  @Override
  @NotNull
  public PsiClassType rawType() {
    final PsiElementFactory factory = JavaPsiFacade.getElementFactory(myReferenceElement.getProject());
    final PsiClass clazz = resolve();
    if (clazz != null) {
      return factory.createType(clazz, factory.createRawSubstitutor(clazz), getLanguageLevel());
    }
    else {
      String qName = myReferenceElement.getClassNameText();
      return factory.createTypeByFQClassName(qName, myReferenceElement.getResolveScope());
    }
  }
  @NotNull
  @Override
  public String getPresentableText() {
    return PsiNameHelper.getPresentableText(myReferenceElement.getReferenceName(), PsiAnnotation.EMPTY_ARRAY, myReferenceElement.getTypeArguments());
  }
  @Override
  @NotNull
  public String getCanonicalText() {
    return myReferenceElement.getCanonicalText();
  }
  @Override
  public boolean isValid() {
    return myReferenceElement.isValid();
  }
  @Override
  public boolean equalsToText(@NotNull String text) {
    return text.endsWith(getPresentableText())  && text.equals(getCanonicalText());
  }
  @Override
  @NotNull
  public GlobalSearchScope getResolveScope() {
    return myReferenceElement.getResolveScope();
  }
  @Override
  @NotNull
  public LanguageLevel getLanguageLevel() {
    return myLanguageLevel;
  }
  @Override
  @NotNull
  public PsiClassType setLanguageLevel(@NotNull final LanguageLevel languageLevel) {
    return new GrClassReferenceType(myReferenceElement,languageLevel);
  }
  public GrReferenceElement getReference() {
    return myReferenceElement;
  }
}",class,
"  public GrClassReferenceType(GrReferenceElement referenceElement) {
    super(LanguageLevel.JDK_1_5);
    myReferenceElement = referenceElement;
  }",method,
"  public GrClassReferenceType(GrReferenceElement referenceElement, LanguageLevel languageLevel) {
    super(languageLevel);
    myReferenceElement = referenceElement;
  }",method,
"  @Override
  @Nullable
  public PsiClass resolve() {
    return resolveGenerics().getElement();
  }",method,
"  @Override
  @Nullable
  public String getClassName() {
    final PsiClass resolved = resolve();
    if (resolved != null) return resolved.getName();
    return myReferenceElement.getReferenceName();
  }",method,
"  @Override
  @NotNull
  public PsiType[] getParameters() {
    return myReferenceElement.getTypeArguments();
  }",method,
"  @Override
  @NotNull
  public ClassResolveResult resolveGenerics() {
    final GroovyResolveResult resolveResult = myReferenceElement.advancedResolve();
    return new ClassResolveResult() {
      @Override
      public PsiClass getElement() {
        final PsiElement resolved = resolveResult.getElement();
        return resolved instanceof PsiClass ? (PsiClass)resolved : null;
      }
      @Override
      @NotNull
      public PsiSubstitutor getSubstitutor() {
        return resolveResult.getSubstitutor();
      }
      @Override
      public boolean isPackagePrefixPackageReference() {
        return false;
      }
      @Override
      public boolean isAccessible() {
        return resolveResult.isAccessible();
      }
      @Override
      public boolean isStaticsScopeCorrect() {
        return resolveResult.isStaticsOK();
      }
      @Override
      @Nullable
      public PsiElement getCurrentFileResolveScope() {
        return resolveResult.getCurrentFileResolveContext();
      }
      @Override
      public boolean isValidResult() {
        return isStaticsScopeCorrect() && isAccessible();
      }
    };
  }",method,
"    return new ClassResolveResult() {
      @Override
      public PsiClass getElement() {
        final PsiElement resolved = resolveResult.getElement();
        return resolved instanceof PsiClass ? (PsiClass)resolved : null;
      }
      @Override
      @NotNull
      public PsiSubstitutor getSubstitutor() {
        return resolveResult.getSubstitutor();
      }
      @Override
      public boolean isPackagePrefixPackageReference() {
        return false;
      }
      @Override
      public boolean isAccessible() {
        return resolveResult.isAccessible();
      }
      @Override
      public boolean isStaticsScopeCorrect() {
        return resolveResult.isStaticsOK();
      }
      @Override
      @Nullable
      public PsiElement getCurrentFileResolveScope() {
        return resolveResult.getCurrentFileResolveContext();
      }
      @Override
      public boolean isValidResult() {
        return isStaticsScopeCorrect() && isAccessible();
      }
    }",method,
"      @Override
      public PsiClass getElement() {
        final PsiElement resolved = resolveResult.getElement();
        return resolved instanceof PsiClass ? (PsiClass)resolved : null;
      }",method,
"      @Override
      @NotNull
      public PsiSubstitutor getSubstitutor() {
        return resolveResult.getSubstitutor();
      }",method,
"      @Override
      public boolean isPackagePrefixPackageReference() {
        return false;
      }",method,
"      @Override
      public boolean isAccessible() {
        return resolveResult.isAccessible();
      }",method,
"      @Override
      public boolean isStaticsScopeCorrect() {
        return resolveResult.isStaticsOK();
      }",method,
"      @Override
      @Nullable
      public PsiElement getCurrentFileResolveScope() {
        return resolveResult.getCurrentFileResolveContext();
      }",method,
"      @Override
      public boolean isValidResult() {
        return isStaticsScopeCorrect() && isAccessible();
      }",method,
"  @Override
  @NotNull
  public PsiClassType rawType() {
    final PsiElementFactory factory = JavaPsiFacade.getElementFactory(myReferenceElement.getProject());
    final PsiClass clazz = resolve();
    if (clazz != null) {
      return factory.createType(clazz, factory.createRawSubstitutor(clazz), getLanguageLevel());
    }
    else {
      String qName = myReferenceElement.getClassNameText();
      return factory.createTypeByFQClassName(qName, myReferenceElement.getResolveScope());
    }
  }",method,
"    if (clazz != null) {
      return factory.createType(clazz, factory.createRawSubstitutor(clazz), getLanguageLevel());
    }",method,
"  @NotNull
  @Override
  public String getPresentableText() {
    return PsiNameHelper.getPresentableText(myReferenceElement.getReferenceName(), PsiAnnotation.EMPTY_ARRAY, myReferenceElement.getTypeArguments());
  }",method,
"  @Override
  @NotNull
  public String getCanonicalText() {
    return myReferenceElement.getCanonicalText();
  }",method,
"  @Override
  public boolean isValid() {
    return myReferenceElement.isValid();
  }",method,
"  @Override
  public boolean equalsToText(@NotNull String text) {
    return text.endsWith(getPresentableText())  && text.equals(getCanonicalText());
  }",method,
"  @Override
  @NotNull
  public GlobalSearchScope getResolveScope() {
    return myReferenceElement.getResolveScope();
  }",method,
"  @Override
  @NotNull
  public LanguageLevel getLanguageLevel() {
    return myLanguageLevel;
  }",method,
"  @Override
  @NotNull
  public PsiClassType setLanguageLevel(@NotNull final LanguageLevel languageLevel) {
    return new GrClassReferenceType(myReferenceElement,languageLevel);
  }",method,
"  public GrReferenceElement getReference() {
    return myReferenceElement;
  }",method,
